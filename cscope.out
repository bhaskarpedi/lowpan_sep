cscope 15 /media/sf_lowpan_sep               0000572232
	@apps/lowpan.h

1 
	~<°dio.h
>

2 
	~<°döt.h
>

	@apps/main.c

4 
	~"‰ame802154.h
"

5 
	~"memb.h
"

6 
	~"√t°ack.h
"

7 
	~"low∑n.h
"

8 
	~"b•.h
"

9 
	~"b•_Àds.h
"

10 
	~"b•_buâ⁄s.h
"

11 
	~"uù.h
"

12 
	~"uù-icmp6.h
"

13 
	~"mrfi_uù_if.h
"

14 
	~"nuŒmac.h
"

15 
	~"°rög.h
"

17 
	#DELAY_IN_MSECS
(
x
Ë{\

	)

18 
	gd_˙t
;\

19 
	gd_˙t
=0;d_cnt<1000;d_cnt++)\

21 
BSP_DELAY_USECS
(
x
);\

25 
	#UIP_ICMP_BUF
 ((
uù_icmp_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

27 
	#PING_DATALEN
 16

	)

28 
	#MAX_PING_CNT
 10

	)

30 
mac_°©e_t
 
mac_°©e
;

32 
	$uù_pög6
(
uù_ùaddr_t
 *
de°
)

34 
uöt16_t
 
pögByã
 = 0;

37 
	`mem£t
((
uöt8_t
 *)
UIP_ICMP_BUF
 + 
UIP_ICMPH_LEN
, 0, 4);

39 
	`mem£t
((
uöt8_t
 *)
UIP_ICMP_BUF
 + 
UIP_ICMPH_LEN
 + 
UIP_ICMP6_ECHO_REQUEST_LEN
,

40 
pögByã
++, 
PING_DATALEN
);

41 
	`uù_icmp6_£nd
(&
de°
, 
ICMP6_ECHO_REQUEST
, 0,\

42 
UIP_ICMP6_ECHO_REQUEST_LEN
 + 
PING_DATALEN
);

45 if(
pögByã
 >
MAX_PING_CNT
)ÖingByte = 0;

46 
	}
}

48 
	$maö
()

50 
	`BSP_Inô
();

51 
	`√t°ack_öô
();

52 **
pPackë
 = 
NULL
;

53 
uöt16_t
 
pktLí
;

54 
uù_ùaddr_t
 
de°
 = {0XFE, 0X80, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,\

56 #i‡((1 =
MODE_PING_TEST
Ë|| (1 =
MODE_TX
Ë|| (1 =
MODE_RX
))

59 #i‡(1 =
MODE_PING_TEST
)

64 
	`BSP_TURN_ON_LED1
();

66 if(
	`BSP_BUTTON1
())

68 
pögC¡
;

69 
pögC¡
=0;ÖögC¡<
MAX_PING_CNT
;ÖingCnt++)

71 
	`uù_pög6
(&
de°
);

72 
	`DELAY_IN_MSECS
(1000);

77 
	`BSP_TURN_OFF_LED1
();

80 #ifde‡
LOWPAN_COORDINATOR


86 #i‡(1 =
MODE_TX
)

88 #ñi‡(1 =
MODE_RX
)

93 if(1 =
NETSTACK_RADIO
.
	`≥ndög_∑ckë
())

95 
pktLí
 = 
NETSTACK_RADIO
.
	`ªad
((*)
pPackë
,ÖktLen);

96 
	`mrfi_uù_pkt_c⁄vît
(*
pPackë
, 
pktLí
);

97 
NETSTACK_RDC
.
	`öput
();

98 
	`mrfi_uù_pkt_¥oc_d⁄e
();

102 if(1 =
mrfi_pkt_tx_≥nd
)

104 
b•ISèã_t
 
x
;

105 
	`BSP_ENTER_CRITICAL_SECTION
(
x
);

108 
	`BSP_EXIT_CRITICAL_SECTION
(
x
);

111 if(1 =
mac_bóc⁄_Êag
)

113 
b•ISèã_t
 
x
;

114 
	`BSP_ENTER_CRITICAL_SECTION
(
x
);

116 
mac_bóc⁄_Êag
 = 0;

117 
	`BSP_EXIT_CRITICAL_SECTION
(
x
);

123 
	}
}

	@apps/mrfi_uip_if.c

1 
	~"mrfi_uù_if.h
"

2 
	~"mrfi.h
"

3 
	~"∑ckëbuf.h
"

5 
	$mrfi_uù_pkt_c⁄vît
(*
pPackë
, 
uöt16_t
 
pktLí
)

7 
	`∑ckëbuf_c›y‰om
((c⁄° *)
pPackë
, 
pktLí
);

8 
	}
}

10 
	$mrfi_uù_pkt_¥oc_d⁄e
()

12 
mrfiPktRe˚iveFœg
 = 0;

13 
	}
}

	@apps/mrfi_uip_if.h

10 
	~"°döt.h
"

11 
	~"mrfi.h
"

15 
mrfi_uù_pkt_c⁄vît
(*
pPackë
, 
uöt16_t
 
pktLí
);

17 
mrfi_uù_pkt_¥oc_d⁄e
();

	@core/contiki.h

1 
	#CCIF


	)

2 
	#CLIF


	)

	@core/dev/nullradio.c

1 
	~"nuŒødio.h
"

6 
	$öô
()

9 
	}
}

12 
	$¥ï¨e
(c⁄° *
∑ylﬂd
, 
∑ylﬂd_Àn
)

15 
	}
}

18 
	$å™smô
(
å™smô_Àn
)

20  
RADIO_TX_OK
;

21 
	}
}

24 
	$£nd
(c⁄° *
∑ylﬂd
, 
∑ylﬂd_Àn
)

26 
	`¥ï¨e
(
∑ylﬂd
, 
∑ylﬂd_Àn
);

27  
	`å™smô
(
∑ylﬂd_Àn
);

28 
	}
}

31 
	$ªad
(*
buf
, 
buf_Àn
)

34 
	}
}

37 
	$ch™√l_˛ór
()

40 
	}
}

43 
	$ª˚ivög_∑ckë
()

46 
	}
}

49 
	$≥ndög_∑ckë
()

52 
	}
}

55 
	$⁄
()

58 
	}
}

61 
	$off
()

64 
	}
}

66 c⁄° 
ødio_drivî
 
	gnuŒødio_drivî
 =

68 
öô
,

69 
¥ï¨e
,

70 
å™smô
,

71 
£nd
,

72 
ªad
,

73 
ch™√l_˛ór
,

74 
ª˚ivög_∑ckë
,

75 
≥ndög_∑ckë
,

76 
⁄
,

77 
off
,

	@core/dev/nullradio.h

1 #i‚de‡
NULLRADIO_H


2 
	#NULLRADIO_H


	)

4 
	~"ødio.h
"

6 c⁄° 
ødio_drivî
 
nuŒødio_drivî
;

	@core/dev/radio.h

55 #i‚de‡
__RADIO_H__


56 
	#__RADIO_H__


	)

61 
	sødio_drivî
 {

63 (* 
	möô
)();

66 (* 
	m¥ï¨e
)(c⁄° *
	m∑ylﬂd
, 
	m∑ylﬂd_Àn
);

69 (* 
	må™smô
)(
	må™smô_Àn
);

72 (* 
	m£nd
)(c⁄° *
	m∑ylﬂd
, 
	m∑ylﬂd_Àn
);

75 (* 
	mªad
)(*
	mbuf
, 
	mbuf_Àn
);

79 (* 
	mch™√l_˛ór
)();

82 (* 
	mª˚ivög_∑ckë
)();

85 (* 
	m≥ndög_∑ckë
)();

88 (* 
	m⁄
)();

91 (* 
	moff
)();

96 
	mRADIO_TX_OK
,

97 
	mRADIO_TX_ERR
,

98 
	mRADIO_TX_COLLISION
,

99 
	mRADIO_TX_NOACK
,

	@core/lib/list.c

48 
	~"lib/li°.h
"

50 
	#NULL
 0

	)

52 
	sli°
 {

53 
li°
 *
	m√xt
;

66 
	$li°_öô
(
li°_t
 
li°
)

68 *
li°
 = 
NULL
;

69 
	}
}

83 
	$li°_hód
(
li°_t
 
li°
)

85  *
li°
;

86 
	}
}

101 
	$li°_c›y
(
li°_t
 
de°
,Üi°_à
§c
)

103 *
de°
 = *
§c
;

104 
	}
}

118 
	$li°_èû
(
li°_t
 
li°
)

120 
li°
 *
l
;

122 if(*
li°
 =
NULL
) {

123  
NULL
;

126 
l
 = *
li°
;Ü->
√xt
 !
NULL
;Ü =Ü->next);

128  
l
;

129 
	}
}

143 
	$li°_add
(
li°_t
 
li°
, *
ôem
)

145 
li°
 *
l
;

148 
	`li°_ªmove
(
li°
, 
ôem
);

150 ((
li°
 *)
ôem
)->
√xt
 = 
NULL
;

152 
l
 = 
	`li°_èû
(
li°
);

154 if(
l
 =
NULL
) {

155 *
li°
 = 
ôem
;

157 
l
->
√xt
 = 
ôem
;

159 
	}
}

165 
	$li°_push
(
li°_t
 
li°
, *
ôem
)

170 
	`li°_ªmove
(
li°
, 
ôem
);

172 ((
li°
 *)
ôem
)->
√xt
 = *list;

173 *
li°
 = 
ôem
;

174 
	}
}

186 
	$li°_ch›
(
li°_t
 
li°
)

188 
li°
 *
l
, *
r
;

190 if(*
li°
 =
NULL
) {

191  
NULL
;

193 if(((
li°
 *)*li°)->
√xt
 =
NULL
) {

194 
l
 = *
li°
;

195 *
li°
 = 
NULL
;

196  
l
;

199 
l
 = *
li°
;Ü->
√xt
->√xà!
NULL
;Ü =Ü->next);

201 
r
 = 
l
->
√xt
;

202 
l
->
√xt
 = 
NULL
;

204  
r
;

205 
	}
}

218 
	$li°_p›
(
li°_t
 
li°
)

220 
li°
 *
l
;

221 
l
 = *
li°
;

222 if(*
li°
 !
NULL
) {

223 *
li°
 = ((li° *)*li°)->
√xt
;

226  
l
;

227 
	}
}

240 
	$li°_ªmove
(
li°_t
 
li°
, *
ôem
)

242 
li°
 *
l
, *
r
;

244 if(*
li°
 =
NULL
) {

248 
r
 = 
NULL
;

249 
l
 = *
li°
;Ü !
NULL
;Ü =Ü->
√xt
) {

250 if(
l
 =
ôem
) {

251 if(
r
 =
NULL
) {

253 *
li°
 = 
l
->
√xt
;

256 
r
->
√xt
 = 
l
->next;

258 
l
->
√xt
 = 
NULL
;

261 
r
 = 
l
;

263 
	}
}

275 
	$li°_Àngth
(
li°_t
 
li°
)

277 
li°
 *
l
;

278 
n
 = 0;

280 
l
 = *
li°
;Ü !
NULL
;Ü =Ü->
√xt
) {

281 ++
n
;

284  
n
;

285 
	}
}

303 
	$li°_ö£π
(
li°_t
 
li°
, *
¥evôem
, *
√wôem
)

305 if(
¥evôem
 =
NULL
) {

306 
	`li°_push
(
li°
, 
√wôem
);

309 ((
li°
 *)
√wôem
)->
√xt
 = ((li° *)
¥evôem
)->next;

310 ((
li°
 *)
¥evôem
)->
√xt
 = 
√wôem
;

312 
	}
}

325 
	$li°_ôem_√xt
(*
ôem
)

327  
ôem
 =
NULL
? NULL: ((
li°
 *)ôem)->
√xt
;

328 
	}
}

	@core/lib/list.h

69 #i‚de‡
__LIST_H__


70 
	#__LIST_H__


	)

72 
	#LIST_CONCAT2
(
s1
, 
s2
Ës1##
	)
s2

73 
	#LIST_CONCAT
(
s1
, 
s2
Ë
	`LIST_CONCAT2
(s1, s2)

	)

89 
	#LIST
(
«me
) \

90 *
	`LIST_CONCAT
(
«me
,
_li°
Ë
NULL
; \

91 
li°_t
 
«me
 = (li°_t)&
	`LIST_CONCAT
“ame,
_li°
)

	)

111 
	#LIST_STRUCT
(
«me
) \

112 *
	`LIST_CONCAT
(
«me
,
_li°
); \

113 
li°_t
 
«me


	)

125 
	#LIST_STRUCT_INIT
(
°ru˘_±r
, 
«me
) \

127 (
°ru˘_±r
)->
«me
 = &((°ru˘_±r)->
	`LIST_CONCAT
“ame,
_li°
)); \

128 (
°ru˘_±r
)->
	`LIST_CONCAT
(
«me
,
_li°
Ë
NULL
; \

129 
	`li°_öô
((
°ru˘_±r
)->
«me
); \

130 } 0)

	)

136 ** 
	tli°_t
;

138 
li°_öô
(
li°_t
 
li°
);

139 * 
li°_hód
(
li°_t
 
li°
);

140 * 
li°_èû
(
li°_t
 
li°
);

141 * 
li°_p›
 (
li°_t
 
li°
);

142 
li°_push
(
li°_t
 
li°
, *
ôem
);

144 * 
li°_ch›
(
li°_t
 
li°
);

146 
li°_add
(
li°_t
 
li°
, *
ôem
);

147 
li°_ªmove
(
li°_t
 
li°
, *
ôem
);

149 
li°_Àngth
(
li°_t
 
li°
);

151 
li°_c›y
(
li°_t
 
de°
,Üi°_à
§c
);

153 
li°_ö£π
(
li°_t
 
li°
, *
¥evôem
, *
√wôem
);

155 * 
li°_ôem_√xt
(*
ôem
);

	@core/lib/memb.c

46 
	~<°rög.h
>

48 
	~"c⁄tiki.h
"

49 
	~"memb.h
"

53 
	$memb_öô
(
memb
 *
m
)

55 
	`mem£t
(
m
->
cou¡
, 0, m->
num
);

56 
	`mem£t
(
m
->
mem
, 0, m->
size
 * m->
num
);

57 
	}
}

60 
	$memb_Æloc
(
memb
 *
m
)

62 
i
;

64 
i
 = 0; i < 
m
->
num
; ++i) {

65 if(
m
->
cou¡
[
i
] == 0) {

69 ++(
m
->
cou¡
[
i
]);

70  (*)((*)
m
->
mem
 + (
i
 * m->
size
));

76  
NULL
;

77 
	}
}

80 
	$memb_‰ì
(
memb
 *
m
, *
±r
)

82 
i
;

83 *
±r2
;

87 
±r2
 = (*)
m
->
mem
;

88 
i
 = 0; i < 
m
->
num
; ++i) {

90 if(
±r2
 =(*)
±r
) {

93 if(
m
->
cou¡
[
i
] > 0) {

95 --(
m
->
cou¡
[
i
]);

97  
m
->
cou¡
[
i
];

99 
±r2
 +
m
->
size
;

102 
	}
}

105 
	$memb_ömemb
(
memb
 *
m
, *
±r
)

107  (*)
±r
 >(*)
m
->
mem
 &&

108 (*)
±r
 < (*)
m
->
mem
 + (m->
num
 * m->
size
);

109 
	}
}

	@core/lib/memb.h

64 #i‚de‡
__MEMB_H__


65 
	#__MEMB_H__


	)

68 
	~"c⁄tiki-c⁄f.h
"

90 
	#MEMB
(
«me
, 
°ru˘uª
, 
num
) \

91 
«me
##
_memb_cou¡
[
num
]; \

92 
°ru˘uª
 
«me
##
_memb_mem
[
num
]; \

93 
memb
 
«me
 = {(
°ru˘uª
), 
num
, \

94 
«me
##
_memb_cou¡
, \

95 (*)
«me
##
_memb_mem
}

	)

97 
	smemb
 {

98 
	msize
;

99 
	mnum
;

100 *
	mcou¡
;

101 *
	mmem
;

109 
memb_öô
(
memb
 *
m
);

116 *
memb_Æloc
(
memb
 *
m
);

130 
memb_‰ì
(
memb
 *
m
, *
±r
);

132 
memb_ömemb
(
memb
 *
m
, *
±r
);

	@core/lib/random.c

35 
	~"øndom.h
"

38 
	~<°dlib.h
>

42 
	$øndom_öô
(
£ed
)

44 
	`§™d
(
£ed
);

45 
	}
}

48 
	$øndom_ønd
()

53  ()
	`ønd
();

54 
	}
}

	@core/lib/random.h

33 #i‚de‡
__RANDOM_H__


34 
	#__RANDOM_H__


	)

40 
øndom_öô
(
£ed
);

47 
øndom_ønd
();

51 
	#RANDOM_RAND_MAX
 65535U

	)

	@core/net/address802154.c

2 
	~"low∑n.h
"

3 
	~"addªss802154.h
"

5 
rimóddr_t
 
	grimóddr_node_addr
;

6 c⁄° 
rimóddr_t
 
	grimóddr_nuŒ
 = { { 0, 0 } };

9 
	$rimóddr_c›y
(
rimóddr_t
 *
de°
, c⁄°Ñimóddr_à*
§c
)

11 
uöt8_t
 
i
;

12 
i
 = 0; i < 
IEEE802154_SHORTADDR_LEN
; i++) {

13 
de°
->
u8
[
i
] = 
§c
->u8[i];

15 
	}
}

17 
	$rimóddr_cmp
(c⁄° 
rimóddr_t
 *
addr1
, c⁄°Ñimóddr_à*
addr2
)

19 
uöt8_t
 
i
;

20 
i
 = 0; i < 
IEEE802154_SHORTADDR_LEN
; i++) {

21 if(
addr1
->
u8
[
i
] !
addr2
->u8[i]) {

26 
	}
}

28 
	$rimóddr_£t_node_addr
(
rimóddr_t
 *
t
)

30 
	`rimóddr_c›y
(&
rimóddr_node_addr
, 
t
);

31 
	}
}

	@core/net/address802154.h

2 
	~"low∑n.h
"

5 
	#IEEE802154_SHORTADDR_LEN
 2

	)

11 
uöt8_t
 
	mu8
[
IEEE802154_SHORTADDR_LEN
];

12 } 
	trimóddr_t
;

29 
rimóddr_c›y
(
rimóddr_t
 *
de°
, c⁄°Ñimóddr_à*
‰om
);

43 
rimóddr_cmp
(c⁄° 
rimóddr_t
 *
addr1
, c⁄°Ñimóddr_à*
addr2
);

53 
rimóddr_£t_node_addr
(
rimóddr_t
 *
addr
);

64 
rimóddr_t
 
rimóddr_node_addr
;

77 c⁄° 
rimóddr_t
 
rimóddr_nuŒ
;

	@core/net/mac/frame802154.c

66 
	~"‰ame802154.h
"

67 
	~"rimóddr.h
"

68 
	~<°rög.h
>

76 
uöt8_t
 
	mde°_pid_Àn
;

77 
uöt8_t
 
	mde°_addr_Àn
;

78 
uöt8_t
 
	m§c_pid_Àn
;

79 
uöt8_t
 
	m§c_addr_Àn
;

80 
uöt8_t
 
	maux_£c_Àn
;

81 } 
	tfõld_Àngth_t
;

84 
ölöe
 
uöt8_t


85 
	$addr_Àn
(
uöt8_t
 
mode
)

87 
mode
) {

88 
FRAME802154_SHORTADDRMODE
:

90 
FRAME802154_LONGADDRMODE
:

95 
	}
}

98 
	$fõld_Àn
(
‰ame802154_t
 *
p
, 
fõld_Àngth_t
 *
Êí
)

101 
	`mem£t
(
Êí
, 0, (
fõld_Àngth_t
));

104 if(
p
->
fcf
.
de°_addr_mode
 & 3) {

105 
Êí
->
de°_pid_Àn
 = 2;

107 if(
p
->
fcf
.
§c_addr_mode
 & 3) {

108 
Êí
->
§c_pid_Àn
 = 2;

112 if(
p
->
fcf
.
de°_addr_mode
 & 3 &&Ö->fcf.
§c_addr_mode
 & 3 &&

113 
p
->
§c_pid
 =p->
de°_pid
) {

114 
p
->
fcf
.
∑nid_com¥essi⁄
 = 1;

117 
Êí
->
§c_pid_Àn
 = 0;

119 
p
->
fcf
.
∑nid_com¥essi⁄
 = 0;

123 
Êí
->
de°_addr_Àn
 = 
	`addr_Àn
(
p
->
fcf
.
de°_addr_mode
 & 3);

124 
Êí
->
§c_addr_Àn
 = 
	`addr_Àn
(
p
->
fcf
.
§c_addr_mode
 & 3);

127 if(
p
->
fcf
.
£curôy_íabÀd
 & 1) {

130 
p
->
aux_hdr
.
£curôy_c⁄åﬁ
.
key_id_mode
) {

132 
Êí
->
aux_£c_Àn
 = 5;

135 
Êí
->
aux_£c_Àn
 = 6;

138 
Êí
->
aux_£c_Àn
 = 10;

141 
Êí
->
aux_£c_Àn
 = 14;

148 
	}
}

159 
uöt8_t


160 
	$‰ame802154_hdæí
(
‰ame802154_t
 *
p
)

162 
fõld_Àngth_t
 
Êí
;

163 
	`fõld_Àn
(
p
, &
Êí
);

164  3 + 
Êí
.
de°_pid_Àn
 + fÀn.
de°_addr_Àn
 +

165 
Êí
.
§c_pid_Àn
 + fÀn.
§c_addr_Àn
 + fÀn.
aux_£c_Àn
;

166 
	}
}

182 
uöt8_t


183 
	$‰ame802154_¸óã
(
‰ame802154_t
 *
p
, 
uöt8_t
 *
buf
, uöt8_à
buf_Àn
)

185 
c
;

186 
fõld_Àngth_t
 
Êí
;

187 
uöt8_t
 *
tx_‰ame_buf„r
;

188 
uöt8_t
 
pos
;

190 
	`fõld_Àn
(
p
, &
Êí
);

192 if(3 + 
Êí
.
de°_pid_Àn
 + fÀn.
de°_addr_Àn
 +

193 
Êí
.
§c_pid_Àn
 + fÀn.
§c_addr_Àn
 + fÀn.
aux_£c_Àn
 > 
buf_Àn
) {

200 
tx_‰ame_buf„r
 = 
buf
;

201 
tx_‰ame_buf„r
[0] = (
p
->
fcf
.
‰ame_ty≥
 & 7) |

202 ((
p
->
fcf
.
£curôy_íabÀd
 & 1) << 3) |

203 ((
p
->
fcf
.
‰ame_≥ndög
 & 1) << 4) |

204 ((
p
->
fcf
.
ack_ªquúed
 & 1) << 5) |

205 ((
p
->
fcf
.
∑nid_com¥essi⁄
 & 1) << 6);

206 
tx_‰ame_buf„r
[1] = ((
p
->
fcf
.
de°_addr_mode
 & 3) << 2) |

207 ((
p
->
fcf
.
‰ame_vîsi⁄
 & 3) << 4) |

208 ((
p
->
fcf
.
§c_addr_mode
 & 3) << 6);

211 
tx_‰ame_buf„r
[2] = 
p
->
£q
;

212 
pos
 = 3;

215 if(
Êí
.
de°_pid_Àn
 == 2) {

216 
tx_‰ame_buf„r
[
pos
++] = 
p
->
de°_pid
 & 0xff;

217 
tx_‰ame_buf„r
[
pos
++] = (
p
->
de°_pid
 >> 8) & 0xff;

221 
c
 = 
Êí
.
de°_addr_Àn
; c > 0; c--) {

222 
tx_‰ame_buf„r
[
pos
++] = 
p
->
de°_addr
[
c
 - 1];

226 if(
Êí
.
§c_pid_Àn
 == 2) {

227 
tx_‰ame_buf„r
[
pos
++] = 
p
->
§c_pid
 & 0xff;

228 
tx_‰ame_buf„r
[
pos
++] = (
p
->
§c_pid
 >> 8) & 0xff;

232 
c
 = 
Êí
.
§c_addr_Àn
; c > 0; c--) {

233 
tx_‰ame_buf„r
[
pos
++] = 
p
->
§c_addr
[
c
 - 1];

237 if(
Êí
.
aux_£c_Àn
) {

242  
pos
;

243 
	}
}

254 
uöt8_t


255 
	$‰ame802154_∑r£
(
uöt8_t
 *
d©a
, uöt8_à
Àn
, 
‰ame802154_t
 *
pf
)

257 
uöt8_t
 *
p
;

258 
‰ame802154_fcf_t
 
fcf
;

259 
uöt8_t
 
c
;

261 if(
Àn
 < 3) {

265 
p
 = 
d©a
;

266 #i‚de‡
BIG_ENDIAN


268 
fcf
.
‰ame_ty≥
 = 
p
[0] & 7;

269 
fcf
.
£curôy_íabÀd
 = (
p
[0] >> 3) & 1;

270 
fcf
.
‰ame_≥ndög
 = (
p
[0] >> 4) & 1;

271 
fcf
.
ack_ªquúed
 = (
p
[0] >> 5) & 1;

272 
fcf
.
∑nid_com¥essi⁄
 = (
p
[0] >> 6) & 1;

274 
fcf
.
de°_addr_mode
 = (
p
[1] >> 2) & 3;

275 
fcf
.
‰ame_vîsi⁄
 = (
p
[1] >> 4) & 3;

276 
fcf
.
§c_addr_mode
 = (
p
[1] >> 6) & 3;

279 
	`mem˝y
(&
pf
->
fcf
, &fcf, (
‰ame802154_fcf_t
));

280 
pf
->
£q
 = 
p
[2];

281 
p
 += 3;

284 if(
fcf
.
de°_addr_mode
) {

286 
pf
->
de°_pid
 = 
p
[0] + (p[1] << 8);

287 
p
 += 2;

295 if(
fcf
.
de°_addr_mode
 =
FRAME802154_SHORTADDRMODE
) {

296 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
de°_addr
), &
rimóddr_nuŒ
);

297 
pf
->
de°_addr
[0] = 
p
[1];

298 
pf
->
de°_addr
[1] = 
p
[0];

299 
p
 += 2;

300 } if(
fcf
.
de°_addr_mode
 =
FRAME802154_LONGADDRMODE
) {

301 
c
 = 0; c < 8; c++) {

302 
pf
->
de°_addr
[
c
] = 
p
[7 - c];

304 
p
 += 8;

307 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
de°_addr
), &
rimóddr_nuŒ
);

308 
pf
->
de°_pid
 = 0;

312 if(
fcf
.
§c_addr_mode
) {

314 if(!
fcf
.
∑nid_com¥essi⁄
) {

315 
pf
->
§c_pid
 = 
p
[0] + (p[1] << 8);

316 
p
 += 2;

318 
pf
->
§c_pid
 =Öf->
de°_pid
;

327 if(
fcf
.
§c_addr_mode
 =
FRAME802154_SHORTADDRMODE
) {

328 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
§c_addr
), &
rimóddr_nuŒ
);

329 
pf
->
§c_addr
[0] = 
p
[1];

330 
pf
->
§c_addr
[1] = 
p
[0];

331 
p
 += 2;

332 } if(
fcf
.
§c_addr_mode
 =
FRAME802154_LONGADDRMODE
) {

333 
c
 = 0; c < 8; c++) {

334 
pf
->
§c_addr
[
c
] = 
p
[7 - c];

336 
p
 += 8;

339 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
§c_addr
), &
rimóddr_nuŒ
);

340 
pf
->
§c_pid
 = 0;

343 if(
fcf
.
£curôy_íabÀd
) {

349 
c
 = 
p
 - 
d©a
;

351 
pf
->
∑ylﬂd_Àn
 = 
Àn
 - 
c
;

353 
pf
->
∑ylﬂd
 = 
p
;

356 
fcf
.
‰ame_ty≥
 = 
p
[0] & 7;

357 
fcf
.
£curôy_íabÀd
 = (
p
[0] >> 3) & 1;

358 
fcf
.
‰ame_≥ndög
 = (
p
[0] >> 4) & 1;

359 
fcf
.
ack_ªquúed
 = (
p
[0] >> 5) & 1;

360 
fcf
.
∑nid_com¥essi⁄
 = (
p
[0] >> 6) & 1;

362 
fcf
.
de°_addr_mode
 = (
p
[1] >> 2) & 3;

363 
fcf
.
‰ame_vîsi⁄
 = (
p
[1] >> 4) & 3;

364 
fcf
.
§c_addr_mode
 = (
p
[1] >> 6) & 3;

367 
	`mem˝y
(&
pf
->
fcf
, &fcf, (
‰ame802154_fcf_t
));

368 
pf
->
£q
 = 
p
[2];

369 
p
 += 3;

372 if(
fcf
.
de°_addr_mode
) {

374 
pf
->
de°_pid
 = 
p
[0] + (p[1] << 8);

375 
p
 += 2;

383 if(
fcf
.
de°_addr_mode
 =
FRAME802154_SHORTADDRMODE
) {

384 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
de°_addr
), &
rimóddr_nuŒ
);

385 
pf
->
de°_addr
[0] = 
p
[1];

386 
pf
->
de°_addr
[1] = 
p
[0];

387 
p
 += 2;

388 } if(
fcf
.
de°_addr_mode
 =
FRAME802154_LONGADDRMODE
) {

389 
c
 = 0; c < 8; c++) {

390 
pf
->
de°_addr
[
c
] = 
p
[7 - c];

392 
p
 += 8;

395 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
de°_addr
), &
rimóddr_nuŒ
);

396 
pf
->
de°_pid
 = 0;

400 if(
fcf
.
§c_addr_mode
) {

402 if(!
fcf
.
∑nid_com¥essi⁄
) {

403 
pf
->
§c_pid
 = 
p
[0] + (p[1] << 8);

404 
p
 += 2;

406 
pf
->
§c_pid
 =Öf->
de°_pid
;

415 if(
fcf
.
§c_addr_mode
 =
FRAME802154_SHORTADDRMODE
) {

416 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
§c_addr
), &
rimóddr_nuŒ
);

417 
pf
->
§c_addr
[0] = 
p
[1];

418 
pf
->
§c_addr
[1] = 
p
[0];

419 
p
 += 2;

420 } if(
fcf
.
§c_addr_mode
 =
FRAME802154_LONGADDRMODE
) {

421 
c
 = 0; c < 8; c++) {

422 
pf
->
§c_addr
[
c
] = 
p
[7 - c];

424 
p
 += 8;

427 
	`rimóddr_c›y
((
rimóddr_t
 *)&(
pf
->
§c_addr
), &
rimóddr_nuŒ
);

428 
pf
->
§c_pid
 = 0;

431 if(
fcf
.
£curôy_íabÀd
) {

437 
c
 = 
p
 - 
d©a
;

439 
pf
->
∑ylﬂd_Àn
 = 
Àn
 - 
c
;

441 
pf
->
∑ylﬂd
 = 
p
;

445  
c
 > 
Àn
 ? 0 : c;

446 
	}
}

449 
uöt8_t
 
	$‰ame802154_∑ckBóc⁄
(
uöt8_t
* 
p
, 
‰ame802154_bóc⁄_t
 *
°
)

451 
p
[0] = 
°
->
su≥rFrS≥c
 & 0x00FF;

452 
p
[1] = (
°
->
su≥rFrS≥c
 & 0xFF00)>>8;

453 
p
[2] = (
°
->
gtsInfo
.
gtsS≥c
);

454 if(0 !
p
[2])

458 
p
[3] = (
°
->
≥ndAddrInfo
.
≥ndAddrS≥c
);

460 
	}
}

462 
uöt8_t
 
	$‰ame802154_u≈ackBóc⁄
(
uöt8_t
* 
p
, 
‰ame802154_bóc⁄_t
 *
°
)

464 
°
->
su≥rFrS≥c
 = 
p
[0];

465 
°
->
su≥rFrS≥c
 |(
p
[1]<<8);

466 
°
->
gtsInfo
.
gtsS≥c
 = 
p
[2];

467 
°
->
≥ndAddrInfo
.
≥ndAddrS≥c
 = 
p
[3];

469 
	}
}

	@core/net/mac/frame802154.h

62 #i‚de‡
FRAME_802154_H


63 
	#FRAME_802154_H


	)

65 
	~"low∑n.h
"

66 
	~"c⁄tiki-c⁄f.h
"

69 #ifde‡
IEEE802154_CONF_PANID


70 
	#IEEE802154_PANID
 
IEEE802154_CONF_PANID


	)

72 
	#IEEE802154_PANID
 0xABCD

	)

81 
	#FRAME802154_BEACONFRAME
 (0x00)

	)

82 
	#FRAME802154_DATAFRAME
 (0x01)

	)

83 
	#FRAME802154_ACKFRAME
 (0x02)

	)

84 
	#FRAME802154_CMDFRAME
 (0x03)

	)

86 
	#FRAME802154_BEACONREQ
 (0x07)

	)

88 
	#FRAME802154_IEEERESERVED
 (0x00)

	)

89 
	#FRAME802154_NOADDR
 (0x00Ë

	)

90 
	#FRAME802154_SHORTADDRMODE
 (0x02)

	)

91 
	#FRAME802154_LONGADDRMODE
 (0x03)

	)

93 
	#FRAME802154_NOBEACONS
 (0x0F)

	)

95 
	#FRAME802154_BROADCASTADDR
 (0xFFFF)

	)

96 
	#FRAME802154_BROADCASTPANDID
 (0xFFFF)

	)

98 
	#FRAME802154_IEEE802154_2003
 (0x00)

	)

99 
	#FRAME802154_IEEE802154_2006
 (0x01)

	)

101 
	#FRAME802154_SECURITY_LEVEL_NONE
 (0)

	)

102 
	#FRAME802154_SECURITY_LEVEL_128
 (3)

	)

122 
uöt8_t
 
	m‰ame_ty≥
;

123 
uöt8_t
 
	m£curôy_íabÀd
;

124 
uöt8_t
 
	m‰ame_≥ndög
;

125 
uöt8_t
 
	mack_ªquúed
;

126 
uöt8_t
 
	m∑nid_com¥essi⁄
;

128 
uöt8_t
 
	mde°_addr_mode
;

129 
uöt8_t
 
	m‰ame_vîsi⁄
;

130 
uöt8_t
 
	m§c_addr_mode
;

131 } 
	t‰ame802154_fcf_t
;

135 
uöt8_t
 
	m£curôy_Àvñ
;

136 
uöt8_t
 
	mkey_id_mode
;

137 
uöt8_t
 
	mª£rved
;

138 } 
	t‰ame802154_scf_t
;

142 
‰ame802154_scf_t
 
	m£curôy_c⁄åﬁ
;

143 
uöt32_t
 
	m‰ame_cou¡î
;

144 
uöt8_t
 
	mkey
[9];

145 } 
	t‰ame802154_aux_hdr_t
;

152 
‰ame802154_fcf_t
 
	mfcf
;

153 
uöt8_t
 
	m£q
;

154 
uöt16_t
 
	mde°_pid
;

155 
uöt8_t
 
	mde°_addr
[8];

156 
uöt16_t
 
	m§c_pid
;

157 
uöt8_t
 
	m§c_addr
[8];

158 
‰ame802154_aux_hdr_t
 
	maux_hdr
;

159 
uöt8_t
 *
	m∑ylﬂd
;

160 
uöt8_t
 
	m∑ylﬂd_Àn
;

161 } 
	t‰ame802154_t
;

163 
	s‰ame802154_bóc⁄
{

164 
uöt16_t
 
	msu≥rFrS≥c
;

166 
uöt8_t
 
	mgtsS≥c
;

167 
uöt8_t
 
	mgtsDú
;

168 * 
	mgtsLi°
;

169 }
	mgtsInfo
;

171 
uöt8_t
 
	m≥ndAddrS≥c
;

172 * 
	m≥ndAddrLi°
;

173 }
	m≥ndAddrInfo
;

175 }
	t‰ame802154_bóc⁄_t
;

179 
uöt8_t
 
‰ame802154_hdæí
(
‰ame802154_t
 *
p
);

180 
uöt8_t
 
‰ame802154_¸óã
(
‰ame802154_t
 *
p
, uöt8_à*
buf
, uöt8_à
buf_Àn
);

181 
uöt8_t
 
‰ame802154_∑r£
(uöt8_à*
d©a
, uöt8_à
Àngth
, 
‰ame802154_t
 *
pf
);

182 
uöt8_t
 
‰ame802154_∑ckBóc⁄
(uöt8_t* 
p
, 
‰ame802154_bóc⁄_t
 * 
°
);

183 
uöt8_t
 
‰ame802154_u≈ackBóc⁄
(uöt8_t* 
p
, 
‰ame802154_bóc⁄_t
 *
°
);

	@core/net/mac/framer-802154.c

40 
	~"‰amî-802154.h
"

41 
	~"‰ame802154.h
"

42 
	~"∑ckëbuf.h
"

43 
	~"øndom.h
"

44 
	~<°rög.h
>

46 
	#DEBUG
 0

	)

48 #i‡
DEBUG


49 
	~<°dio.h
>

50 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

51 
	#PRINTADDR
(
addr
Ë
	`PRINTF
(" %02x%02x:%02x%02x:%02x%02x:%02x%02x ", ((
uöt8_t
 *Ôddr)[0], ((uöt8_à*Ôddr)[1], ((uöt8_à*Ôddr)[2], ((uöt8_à*Ôddr)[3], ((uöt8_à*Ôddr)[4], ((uöt8_à*Ôddr)[5], ((uöt8_à*Ôddr)[6], ((uöt8_à*Ôddr)[7])

	)

53 
	#PRINTF
(...)

	)

54 
	#PRINTADDR
(
addr
)

	)

61 
uöt8_t
 
	gmac_d¢
;

63 
uöt8_t
 
	göôülized
 = 0;

69 c⁄° 
uöt16_t
 
	gmac_d°_∑n_id
 = 
IEEE802154_PANID
;

75 c⁄° 
uöt16_t
 
	gmac_§c_∑n_id
 = 
IEEE802154_PANID
;

79 
	$is_brﬂdˇ°_addr
(
uöt8_t
 
mode
, uöt8_à*
addr
)

81 
i
 = 
mode
 =
FRAME802154_SHORTADDRMODE
 ? 2 : 8;

82 
i
-- > 0) {

83 if(
addr
[
i
] != 0xff) {

88 
	}
}

91 
	$¸óã
()

93 
‰ame802154_t
 
∑øms
;

94 
uöt8_t
 
Àn
;

97 
	`mem£t
(&
∑øms
, 0, (params));

99 if(!
öôülized
) {

100 
öôülized
 = 1;

101 
mac_d¢
 = 
	`øndom_ønd
() & 0xff;

105 
∑øms
.
fcf
.
‰ame_ty≥
 = 
FRAME802154_DATAFRAME
;

106 
∑øms
.
fcf
.
£curôy_íabÀd
 = 0;

107 
∑øms
.
fcf
.
‰ame_≥ndög
 = 
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_PENDING
);

108 if(
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
), &
rimóddr_nuŒ
)) {

109 
∑øms
.
fcf
.
ack_ªquúed
 = 0;

111 
∑øms
.
fcf
.
ack_ªquúed
 = 
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_MAC_ACK
);

113 
∑øms
.
fcf
.
∑nid_com¥essi⁄
 = 0;

116 
∑øms
.
fcf
.
‰ame_vîsi⁄
 = 
FRAME802154_IEEE802154_2003
;

119 if(
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_MAC_SEQNO
)) {

120 
∑øms
.
£q
 = 
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_MAC_SEQNO
);

122 
∑øms
.
£q
 = 
mac_d¢
++;

123 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_MAC_SEQNO
, 
∑øms
.
£q
);

132 if((
rimóddr_t
) == 2) {

134 
∑øms
.
fcf
.
§c_addr_mode
 = 
FRAME802154_SHORTADDRMODE
;

136 
∑øms
.
fcf
.
§c_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

138 
∑øms
.
de°_pid
 = 
mac_d°_∑n_id
;

144 if(
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
), &
rimóddr_nuŒ
)) {

146 
∑øms
.
fcf
.
de°_addr_mode
 = 
FRAME802154_SHORTADDRMODE
;

147 
∑øms
.
de°_addr
[0] = 0xFF;

148 
∑øms
.
de°_addr
[1] = 0xFF;

151 
	`rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
de°_addr
,

152 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

154 if((
rimóddr_t
) == 2) {

155 
∑øms
.
fcf
.
de°_addr_mode
 = 
FRAME802154_SHORTADDRMODE
;

157 
∑øms
.
fcf
.
de°_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

162 
∑øms
.
§c_pid
 = 
mac_§c_∑n_id
;

168 
	`rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
§c_addr
, &
rimóddr_node_addr
);

170 
∑øms
.
∑ylﬂd
 = 
	`∑ckëbuf_d©≠å
();

171 
∑øms
.
∑ylﬂd_Àn
 = 
	`∑ckëbuf_d©Æí
();

172 
Àn
 = 
	`‰ame802154_hdæí
(&
∑øms
);

173 if(
	`∑ckëbuf_hdøŒoc
(
Àn
)) {

174 
	`‰ame802154_¸óã
(&
∑øms
, 
	`∑ckëbuf_hdΩå
(), 
Àn
);

176 
	`PRINTF
("15.4-OUT: %2X", 
∑øms
.
fcf
.
‰ame_ty≥
);

177 
	`PRINTADDR
(
∑øms
.
de°_addr
.
u8
);

178 
	`PRINTF
("%u %u (%u)\n", 
Àn
, 
	`∑ckëbuf_d©Æí
(), 
	`∑ckëbuf_tŸÀn
());

180  
Àn
;

182 
	`PRINTF
("15.4-OUT:Åoÿœrgêhódî: %u\n", 
Àn
);

183  
FRAMER_FAILED
;

185 
	}
}

188 
	$∑r£
()

190 
‰ame802154_t
 
‰ame
;

191 
Àn
;

192 
Àn
 = 
	`∑ckëbuf_d©Æí
();

193 if(
	`‰ame802154_∑r£
(
	`∑ckëbuf_d©≠å
(), 
Àn
, &
‰ame
) &&

194 
	`∑ckëbuf_hdºedu˚
(
Àn
 - 
‰ame
.
∑ylﬂd_Àn
)) {

195 if(
‰ame
.
fcf
.
de°_addr_mode
) {

196 if(
‰ame
.
de°_pid
 !
mac_§c_∑n_id
 &&

197 
‰ame
.
de°_pid
 !
FRAME802154_BROADCASTPANDID
) {

199 
	`PRINTF
("15.4: f‹ánŸhîÖ™ %u\n", 
‰ame
.
de°_pid
);

200  
FRAMER_FAILED
;

202 if(!
	`is_brﬂdˇ°_addr
(
‰ame
.
fcf
.
de°_addr_mode
, føme.
de°_addr
)) {

203 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_RECEIVER
, (
rimóddr_t
 *)&
‰ame
.
de°_addr
);

206 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_SENDER
, (
rimóddr_t
 *)&
‰ame
.
§c_addr
);

207 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_PENDING
, 
‰ame
.
fcf
.
‰ame_≥ndög
);

209 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_PACKET_ID
, 
‰ame
.
£q
);

211 
	`PRINTF
("15.4-IN: %2X", 
‰ame
.
fcf
.
‰ame_ty≥
);

212 
	`PRINTADDR
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

213 
	`PRINTADDR
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

214 
	`PRINTF
("%u (%u)\n", 
	`∑ckëbuf_d©Æí
(), 
Àn
);

216  
Àn
 - 
‰ame
.
∑ylﬂd_Àn
;

218  
FRAMER_FAILED
;

219 
	}
}

221 c⁄° 
‰amî
 
	g‰amî_802154
 = {

222 
¸óã
, 
∑r£


	@core/net/mac/framer-802154.h

40 #i‚de‡
__FRAMER_802154_H__


41 
	#__FRAMER_802154_H__


	)

43 
	~"‰amî.h
"

45 c⁄° 
‰amî
 
‰amî_802154
;

	@core/net/mac/framer-nullmac.c

40 
	~"‰amî-nuŒmac.h
"

41 
	~"∑ckëbuf.h
"

43 
	#DEBUG
 0

	)

45 #i‡
DEBUG


46 
	~<°dio.h
>

47 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

48 
	#PRINTADDR
(
addr
Ë
	`PRINTF
(" %02x%02x:%02x%02x:%02x%02x:%02x%02x ", ((
uöt8_t
 *Ôddr)[0], ((uöt8_à*Ôddr)[1], ((uöt8_à*Ôddr)[2], ((uöt8_à*Ôddr)[3], ((uöt8_à*Ôddr)[4], ((uöt8_à*Ôddr)[5], ((uöt8_à*Ôddr)[6], ((uöt8_à*Ôddr)[7])

	)

50 
	#PRINTF
(...)

	)

51 
	#PRINTADDR
(
addr
)

	)

54 
	snuŒmac_hdr
 {

55 
rimóddr_t
 
	mª˚ivî
;

56 
rimóddr_t
 
	m£ndî
;

61 
	$¸óã
()

63 
nuŒmac_hdr
 *
hdr
;

65 if(
	`∑ckëbuf_hdøŒoc
((
nuŒmac_hdr
))) {

66 
hdr
 = 
	`∑ckëbuf_hdΩå
();

67 
	`rimóddr_c›y
(&(
hdr
->
£ndî
), &
rimóddr_node_addr
);

68 
	`rimóddr_c›y
(&(
hdr
->
ª˚ivî
), 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

69  (
nuŒmac_hdr
);

71 
	`PRINTF
("PNULLMAC-UT:Åoÿœrgêhódî: %u\n", 
Àn
);

72  
FRAMER_FAILED
;

73 
	}
}

76 
	$∑r£
()

78 
nuŒmac_hdr
 *
hdr
;

79 
hdr
 = 
	`∑ckëbuf_d©≠å
();

80 if(
	`∑ckëbuf_hdºedu˚
((
nuŒmac_hdr
))) {

81 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_SENDER
, &(
hdr
->
£ndî
));

82 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_RECEIVER
, &(
hdr
->
ª˚ivî
));

84 
	`PRINTF
("PNULLMAC-IN: ");

85 
	`PRINTADDR
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

86 
	`PRINTADDR
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

87 
	`PRINTF
("%u (%u)\n", 
	`∑ckëbuf_d©Æí
(), 
Àn
);

89  (
nuŒmac_hdr
);

91  
FRAMER_FAILED
;

92 
	}
}

94 c⁄° 
‰amî
 
	g‰amî_nuŒmac
 = {

95 
¸óã
, 
∑r£


	@core/net/mac/framer-nullmac.h

40 #i‚de‡
__FRAMER_NULLMAC_H__


41 
	#__FRAMER_NULLMAC_H__


	)

43 
	~"‰amî.h
"

45 c⁄° 
‰amî
 
‰amî_nuŒmac
;

	@core/net/mac/framer.h

42 #i‚de‡
__FRAMER_H__


43 
	#__FRAMER_H__


	)

45 
	#FRAMER_FAILED
 -1

	)

47 
	s‰amî
 {

49 (* 
	m¸óã
)();

50 (* 
	m∑r£
)();

	@core/net/mac/mac.c

34 
	~"mac.h
"

36 
	#DEBUG
 0

	)

37 #i‡
DEBUG


38 
	~<°dio.h
>

39 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

41 
	#PRINTF
(...)

	)

46 
	$mac_ˇŒ_£¡_ˇŒback
(
mac_ˇŒback_t
 
£¡
, *
±r
, 
°©us
, 
num_tx
)

48 
	`PRINTF
("mac_callback_t %pÖtr %p status %dÇum_tx %d\n",

49 
£¡
, 
±r
, 
°©us
, 
num_tx
);

50 
°©us
) {

51 
MAC_TX_COLLISION
:

52 
	`PRINTF
("mac: cﬁlisi⁄á·î %dÅx\n", 
num_tx
);

54 
MAC_TX_NOACK
:

55 
	`PRINTF
("mac:Çﬂcká·î %dÅx\n", 
num_tx
);

57 
MAC_TX_OK
:

58 
	`PRINTF
("mac: síàa·î %dÅx\n", 
num_tx
);

61 
	`PRINTF
("mac:Éº‹ %dá·î %dÅx\n", 
°©us
, 
num_tx
);

64 if(
£¡
) {

65 
	`£¡
(
±r
, 
°©us
, 
num_tx
);

67 
	}
}

	@core/net/mac/mac.h

41 #i‚de‡
__MAC_H__


42 
	#__MAC_H__


	)

44 
	~"c⁄tiki-c⁄f.h
"

45 
	~"ødio.h
"

48 (* 
	tmac_ˇŒback_t
)(*
	t±r
, 
	t°©us
, 
	tå™smissi⁄s
);

50 
	`mac_ˇŒ_£¡_ˇŒback
(
mac_ˇŒback_t
 
£¡
, *
±r
, 
°©us
, 
num_tx
);

55 
	smac_drivî
 {

56 *
«me
;

59 (* 
öô
)();

62 (* 
£nd
)(
mac_ˇŒback_t
 
£¡_ˇŒback
, *
±r
);

65 (* 
öput
)();

68 (* 
⁄
)();

71 (* 
off
)(
kìp_ødio_⁄
);

74 (* 
ch™√l_check_öãrvÆ
)();

80 
MAC_TX_OK
,

84 
MAC_TX_COLLISION
,

87 
MAC_TX_NOACK
,

90 
MAC_TX_DEFERRED
,

94 
MAC_TX_ERR
,

99 
MAC_TX_ERR_FATAL
,

	@core/net/mac/newmac.c

10 
	~"√wmac.h
"

11 
	~"√t/∑ckëbuf.h
"

12 
	~"√t/queuebuf.h
"

14 
	~"sys/˛ock.h
"

15 
	~"lib/øndom.h
"

16 
	~"√t/√t°ack.h
"

17 
	~"lib/li°.h
"

18 
	~"lib/memb.h
"

19 
	~<°rög.h
>

21 
	~<°dio.h
>

23 
	$öô
()

25 
NETSTACK_RDC
.
	`öô
();

26 
	}
}

28 
	$£nd_∑ckë
(
mac_ˇŒback_t
 
£¡_ˇŒback
, *
±r
)

30 
	}
}

32 
	$öput_∑ckë
()

34 
	}
}

36 
	$⁄
()

38  
NETSTACK_RDC
.
	`⁄
();

39 
	}
}

41 
	$off
(
kìp_ødio_⁄
)

43  
NETSTACK_RDC
.
	`off
(
kìp_ødio_⁄
);

44 
	}
}

46 
	$ch™√l_check_öãrvÆ
()

48 
	}
}

49 c⁄° 
mac_drivî
 
	gbmac_drivî
 = {

51 
öô
,

52 
£nd_∑ckë
,

53 
öput_∑ckë
,

54 
⁄
,

55 
off
,

56 
ch™√l_check_öãrvÆ
,

63 
	smac_drivî
 {

64 *
	m«me
;

67 (* 
	möô
)();

70 (* 
	m£nd
)(
mac_ˇŒback_t
 
	m£¡_ˇŒback
, *
	m±r
);

73 (* 
	möput
)();

76 (* 
	m⁄
)();

79 (* 
	moff
)(
	mkìp_ødio_⁄
);

82 (* 
	mch™√l_check_öãrvÆ
)();

88 
	mMAC_TX_OK
,

92 
	mMAC_TX_COLLISION
,

95 
	mMAC_TX_NOACK
,

98 
	mMAC_TX_DEFERRED
,

102 
	mMAC_TX_ERR
,

107 
	mMAC_TX_ERR_FATAL
,

	@core/net/mac/newmac.h

	@core/net/mac/nullmac.c

41 
	~"nuŒmac.h
"

42 
	~"∑ckëbuf.h
"

43 
	~"√t°ack.h
"

44 
	~"‰ame802154.h
"

45 
	~"b•.h
"

47 
mac_°©e_t
 
	gmac_°©e
;

48 
uöt8_t
 
mac_d¢
;

49 
uöt16_t
 
mac_d°_∑n_id
;

51 
uöt8_t
 
	gmac_bóc⁄_Êag
;

54 
£nd_∑ckë
(
mac_ˇŒback_t
 
£¡
, *
±r
);

55 
mac_°¨t_timî
(
uöt16_t
 
bóc⁄_öãrvÆ_m£c
);

56 
mac_°›_timî
();

57 #ifde‡
LOWPAN_COORDINATOR


59 
	$mac_£nd_bóc⁄
()

61 
uöt16_t
 
macBSN
 = 0x00;

62 
uöt8_t
 
∑ylﬂd
[10] = {0,0,0,0,0,0,0,0,0,0};

63 
‰ame802154_t
 
∑øms
;

64 
‰ame802154_bóc⁄_t
 
bóc⁄D©a
;

65 
uöt8_t
 
Àn
;

68 
	`mem£t
(&
∑øms
, 0, (params));

69 
	`mem£t
(&
bóc⁄D©a
, 0, (
‰ame802154_bóc⁄_t
));

72 
∑øms
.
fcf
.
‰ame_ty≥
 = 
FRAME802154_BEACONFRAME
;

73 
∑øms
.
fcf
.
£curôy_íabÀd
 = 0;

74 
∑øms
.
fcf
.
‰ame_≥ndög
 = 0;

75 
∑øms
.
fcf
.
ack_ªquúed
 = 0;

76 
∑øms
.
fcf
.
∑nid_com¥essi⁄
 = 0;

79 
∑øms
.
fcf
.
‰ame_vîsi⁄
 = 
FRAME802154_IEEE802154_2003
;

82 
∑øms
.
£q
 = 
macBSN
++;

89 
∑øms
.
fcf
.
§c_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

91 
∑øms
.
§c_pid
 = 
mac_d°_∑n_id
;

93 
∑øms
.
fcf
.
de°_addr_mode
 = 
FRAME802154_NOADDR
;

94 
∑øms
.
de°_pid
 = 0;

99 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

106 
	`rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
§c_addr
, &
rimóddr_node_addr
);

107 
	`rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
de°_addr
, &
rimóddr_nuŒ
);

110 
bóc⁄D©a
.
su≥rFrS≥c
 |= 0x000F;

111 
bóc⁄D©a
.
su≥rFrS≥c
 |= 0x00F0;

112 
bóc⁄D©a
.
su≥rFrS≥c
 |= 0x0F00;

113 
bóc⁄D©a
.
su≥rFrS≥c
 |
	`BV
(14);

114 
bóc⁄D©a
.
su≥rFrS≥c
 |
	`BV
(15);

116 
bóc⁄D©a
.
gtsInfo
.
gtsS≥c
 = 0;

118 
bóc⁄D©a
.
≥ndAddrInfo
.
≥ndAddrS≥c
 = 0;

120 
	`∑ckëbuf_˛ór
();

121 
Àn
 = 
	`‰ame802154_∑ckBóc⁄
((
uöt8_t
*)
	`∑ckëbuf_d©≠å
(),&
bóc⁄D©a
);

122 
	`∑ckëbuf_£t_d©Æí
(
Àn
);

123 
∑øms
.
∑ylﬂd
 = 
	`∑ckëbuf_d©≠å
();

124 
Àn
 = 
	`‰ame802154_hdæí
(&
∑øms
);

125 
	`‰ame802154_¸óã
(&
∑øms
, 
	`∑ckëbuf_hdΩå
(), 
Àn
);

126 
NETSTACK_RADIO
.
	`£nd
(
	`∑ckëbuf_hdΩå
(), 
	`∑ckëbuf_tŸÀn
());

128 
	}
}

131 
	$mac_¥oc_assoc_ªq
(
‰ame802154_t
 *
‰ame
)

134 if(
‰ame
->
∑ylﬂd
[1] == 0x00)

143 
	}
}

146 
	$mac_£nd_assoc_r•
(
rimóddr_t
 * 
nodeAddr
)

148 
uöt8_t
 * 
rime_±r
;

149 
uöt8_t
 
assoc_r•_pkt
[4];

154 
assoc_r•_pkt
[0] = 
MAC_ASSOC_RSP
;

158 
assoc_r•_pkt
[1] = 0xFF;

159 
assoc_r•_pkt
[2] = 0xFE;

162 
assoc_r•_pkt
[3] = 0x00;

165 
	`∑ckëbuf_c›y‰om
((c⁄° *)&
assoc_r•_pkt
[0], 4);

168 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_RELIABLE
,1);

169 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_RECEIVER
, 
nodeAddr
);

173 
	`£nd_∑ckë
((
mac_ˇŒback_t
)0,(*)0);

174 
	}
}

179 
	$mac_¥oc_bóc⁄
(
‰ame802154_t
 *
‰ame
)

182 
	`rimóddr_c›y
(&
rimóddr_∑nCo‹d_addr
, &
‰ame
->
§c_addr
);

183 
	}
}

186 
	$mac_£nd_assoc_ªq
()

188 
uöt8_t
 * 
rime_±r
;

189 
uöt8_t
 
assoc_ªq_pkt
[2];

194 
assoc_ªq_pkt
[0] = 
MAC_ASSOC_REQ
;

195 
assoc_ªq_pkt
[1] = 0x00;

198 
	`∑ckëbuf_c›y‰om
((c⁄° *)&
assoc_ªq_pkt
[0], 2);

201 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_RELIABLE
,1);

202 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_RECEIVER
, &
rimóddr_∑nCo‹d_addr
);

206 
	`£nd_∑ckë
((
mac_ˇŒback_t
)0,(*)0);

207 
	}
}

217 
	$mac_¥oc_assoc_r•
(
‰ame802154_t
 *
‰ame
)

220 if(
‰ame
->
∑ylﬂd
[3] == 0x00)

229 
	}
}

233 #ifde‡
LOWPAN_COORDINATOR


236 
	$mac_¥oc_pkt
(
‰ame802154_t
 *
‰ame
)

238 if((
‰ame
->
fcf
.
‰ame_ty≥
 =
MAC_CMD
) &&

239 (
‰ame
->
∑ylﬂd
[0] =
MAC_ASSOC_REQ
))

241 
b•ISèã_t
 
x
;

242 
	`BSP_ENTER_CRITICAL_SECTION
(
x
);

243 
	`mac_£nd_assoc_r•
(&
‰ame
->
de°_addr
);

244 
	`BSP_EXIT_CRITICAL_SECTION
(
x
);

246 if(
‰ame
->
fcf
.
‰ame_ty≥
 =
MAC_DATA
)

250 
	}
}

254 
	#MAX_HEAL_CNT
 5

	)

258 
	$mac_¥oc_°©e
(
‰ame802154_t
 *
‰ame
)

260 
uöt8_t
 
hólC¡
 = 0;

261 
hólC¡
 ++;

262 
mac_°©e
)

264 
MAC_INIT
:

266 
hólC¡
 = 0;

267 if(
‰ame
->
fcf
.
‰ame_ty≥
 =
MAC_BEACON
)

269 
	`mac_¥oc_bóc⁄
(
‰ame
);

270 
mac_°©e
 = 
MAC_BEACON_RCVD
;

278 
MAC_BEACON_RCVD
:

280 
	`mac_£nd_assoc_ªq
();

281 
mac_°©e
 = 
MAC_ASSOC_REQ_SENT
;

284 
MAC_ASSOC_REQ_SENT
:

286 if((
‰ame
->
fcf
.
‰ame_ty≥
 =
MAC_CMD
) &&

287 (
‰ame
->
∑ylﬂd
[0] =
MAC_ASSOC_RSP
))

289 
ªt
;

290 
ªt
 = 
	`mac_¥oc_assoc_r•
(
‰ame
);

291 if(0 =
ªt
)

293 
mac_°©e
 = 
MAC_CONNECTED
;

299 
mac_°©e
 = 
MAC_INIT
;

302 if(
hólC¡
 > 
MAX_HEAL_CNT
)

304 
mac_°©e
 = 
MAC_INIT
;

308 
MAC_CONNECTED
:

311 if(
‰ame
->
fcf
.
‰ame_ty≥
 =
MAC_DATA
)

313 
NETSTACK_NETWORK
.
	`öput
();

321 
	}
}

327 
	$£nd_∑ckë
(
mac_ˇŒback_t
 
£¡
, *
±r
)

329 
NETSTACK_RDC
.
	`£nd
(
£¡
, 
±r
);

330 
	}
}

333 
	$∑ckë_öput
()

335 
NETSTACK_NETWORK
.
	`öput
();

336 
	}
}

342 
	$low∑n_∑ckë_öput
()

345 
‰ame802154_t
 
‰ame
;

347 
	`‰ame802154_∑r£
(
	`∑ckëbuf_d©≠å
(), 
	`∑ckëbuf_d©Æí
(), &
‰ame
);

348 #ifde‡
LOWPAN_COORDINATOR


349 
	`mac_¥oc_pkt
(&
‰ame
);

351 
	`mac_¥oc_°©e
(&
‰ame
);

353 
	}
}

356 
	$⁄
()

358  
NETSTACK_RDC
.
	`⁄
();

359 
	}
}

362 
	$off
(
kìp_ødio_⁄
)

364  
NETSTACK_RDC
.
	`off
(
kìp_ødio_⁄
);

365 
	}
}

368 
	$ch™√l_check_öãrvÆ
()

371 
	}
}

375 
	$öô
()

377 
ªtVÆ
 = 
MAC_TX_ERR
;

378 
mac_°©e
 = 
MAC_INIT
;

379 #ifde‡
LOWPAN_COORDINATOR


382 
	`mac_°¨t_timî
(10);

385 #i‡
RIMEADDR_SIZE
 == 2

386 
rimóddr_t
 
addr_ãmp
 = { { 1, 2 } };

387 #ñi‡(
RIMEADDR_SIZE
 == 8)

388 
rimóddr_t
 
addr_ãmp
 = { { 0x12, 0x23, 0x34, 0x00, 0x00, 0x45, 0x00, 0x01 } };

391 
	`rimóddr_c›y
(&
rimóddr_node_addr
, &
addr_ãmp
);

393 
	}
}

395 c⁄° 
mac_drivî
 
nuŒmac_drivî
 = {

397 
öô
,

398 
£nd_∑ckë
,

399 
∑ckë_öput
,

400 
⁄
,

401 
off
,

402 
ch™√l_check_öãrvÆ
,

405 c⁄° 
mac_drivî
 
	gnuŒmac_802154_drivî
 = {

407 
öô
,

408 
£nd_∑ckë
,

409 
low∑n_∑ckë_öput
,

410 
⁄
,

411 
off
,

412 
ch™√l_check_öãrvÆ
,

415 #ifde‡
LOWPAN_COORDINATOR


418 
	$mac_°›_timî
()

421 
TA1CTL
 |
MC_0
;

422 
	}
}

425 
	$mac_°¨t_timî
(
uöt16_t
 
bóc⁄_öãrvÆ_m£c
)

428 
TA1CTL
 |
ID_3
;

430 
TA1EX0
 |= 0x7;

433 
TA1CTL
 |
TACLR
;

435 
TA1R
 = 0;

438 
TA1CCTL0
 |
CM1
;

439 
TA1CCTL0
 |
CAP
;

440 
TA1CCTL0
 |
CCIE
;

447 
TA1CTL
 |
MC_2
;

449 
TA1CTL
 |
TAIE
;

450 
	}
}

462 
	$BSP_ISR_FUNCTION
(
mac_timî_ISR
, 
TIMER0_A1_VECTOR
)

465 if(
TA1IV
 =
TA1IV_TA1IFG
)

467 
	`mac_£nd_bóc⁄
();

470 
TA1IV
 &~
TA1IV_TA1IFG
;

471 
	}
}

477 
‰ame802154_t
 
	g∑øms
;

478 
uöt8_t
 
	gÀn
;

481 
mem£t
(&
∑øms
, 0, (params));

484 
	g∑øms
.
	gfcf
.
	g‰ame_ty≥
 = 
FRAME802154_CMDFRAME
;

485 
	g∑øms
.
	gfcf
.
	g£curôy_íabÀd
 = 0;

486 
	g∑øms
.
	gfcf
.
	g‰ame_≥ndög
 = 0;

487 
	g∑øms
.
	gfcf
.
	gack_ªquúed
 = 1;

488 
	g∑øms
.
	gfcf
.
	g∑nid_com¥essi⁄
 = 0;

491 
	g∑øms
.
	gfcf
.
	g‰ame_vîsi⁄
 = 
FRAME802154_IEEE802154_2003
;

494 
	g∑øms
.
	g£q
 = 
mac_d¢
++;

501 
	g∑øms
.
	gfcf
.
	g§c_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

503 
	g∑øms
.
	g§c_pid
 = 
mac_§c_∑n_id
;

505 
	g∑øms
.
	gfcf
.
	gde°_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

506 
	g∑øms
.
	gde°_pid
 = 
mac_d°_∑n_id
;

512 
rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
§c_addr
, &
rimóddr_node_addr
);

513 
rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
de°_addr
, &
rimóddr_∑nCo‹d_addr
);

517 
	g∑ylﬂd
[8] = 
MAC_ASSOC_REQ
;

521 
	g∑ylﬂd
[9] |= 0x0;

522 
	g∑øms
.
	g∑ylﬂd
 = &
∑ylﬂd
[8];

523 
	g∑øms
.
	g∑ylﬂd_Àn
 = 2;

524 
	gÀn
 = 
‰ame802154_hdæí
(&
∑øms
);

525 if(
	gÀn
 <= 8) {

526 
‰ame802154_¸óã
(&
∑øms
, &
∑ylﬂd
[8-
Àn
],Üen);

528 
	gNETSTACK_RADIO
.
£nd
(&
∑ylﬂd
[8-
Àn
],Üen+2);

	@core/net/mac/nullmac.h

41 #i‚de‡
__NULLMAC_H__


42 
	#__NULLMAC_H__


	)

44 
	~"mac.h
"

45 
	~"ødio.h
"

46 
	~"∑ckëbuf.h
"

48 
	#BV
(
n
Ë(1 << (n))

	)

52 
	mMAC_INIT
 = 0,

53 
	mMAC_BEACON_RCVD
,

54 
	mMAC_ASSOC_REQ_SENT
,

55 
	mMAC_CONNECTED


56 }
	tmac_°©e_t
;

61 
	mMAC_BEACON
 = 0,

62 
	mMAC_DATA
 = 1,

63 
	mMAC_ACK
 = 2,

64 
	mMAC_CMD
 = 3,

65 
	mMAC_RANGING
 = 14,

66 
	mMAC_TYPE_NONE
 = 15

67 }
	tmac_‰ame_ty≥_t
;

71 
	mMAC_ASSOC_REQ
 = 0x01,

72 
	mMAC_ASSOC_RSP
 = 0x02,

73 
	mMAC_DISASSOC_NOT
 = 0x03,

74 
	mMAC_DATA_REQ
 = 0x04,

75 
	mMAC_PANID_CONFLICT
 = 0x05,

76 
	mMAC_ORPHAN_NOT
 = 0x06,

77 
	mMAC_BEACON_REQ
 = 0x07,

78 
	mMAC_COORD_REALIGN
 = 0x08,

79 
	mMAC_GTS_REQ
 = 0x09

80 }
	tmac_cmd_‰ame_t
;

82 c⁄° 
mac_drivî
 
nuŒmac_drivî
;

83 
uöt8_t
 
mac_bóc⁄_Êag
;

85 #ifde‡
LOWPAN_COORDINATOR


86 
mac_£nd_bóc⁄
();

	@core/net/mac/nullrdc.c

42 
	~"nuŒrdc.h
"

43 
	~"∑ckëbuf.h
"

44 
	~"queuebuf.h
"

45 
	~"√t°ack.h
"

46 
	~<°rög.h
>

48 
	#DEBUG
 0

	)

49 #i‡
DEBUG


50 
	~<°dio.h
>

51 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

53 
	#PRINTF
(...)

	)

56 #ifde‡
NULLRDC_CONF_ADDRESS_FILTER


57 
	#NULLRDC_ADDRESS_FILTER
 
NULLRDC_CONF_ADDRESS_FILTER


	)

59 
	#NULLRDC_ADDRESS_FILTER
 1

	)

62 #i‚de‡
NULLRDC_802154_AUTOACK


63 #ifde‡
NULLRDC_CONF_802154_AUTOACK


64 
	#NULLRDC_802154_AUTOACK
 
NULLRDC_CONF_802154_AUTOACK


	)

66 
	#NULLRDC_802154_AUTOACK
 0

	)

70 #i‚de‡
NULLRDC_802154_AUTOACK_HW


71 #ifde‡
NULLRDC_CONF_802154_AUTOACK_HW


72 
	#NULLRDC_802154_AUTOACK_HW
 
NULLRDC_CONF_802154_AUTOACK_HW


	)

74 
	#NULLRDC_802154_AUTOACK_HW
 0

	)

78 #i‡
NULLRDC_802154_AUTOACK


79 
	~"sys/πimî.h
"

80 
	~"dev/w©chdog.h
"

82 
	#ACK_WAIT_TIME
 
RTIMER_SECOND
 / 2500

	)

83 
	#AFTER_ACK_DETECTED_WAIT_TIME
 
RTIMER_SECOND
 / 1500

	)

84 
	#ACK_LEN
 3

	)

87 #i‡
NULLRDC_802154_AUTOACK
 || 
NULLRDC_802154_AUTOACK_HW


88 
	s£qno
 {

89 
rimóddr_t
 
	m£ndî
;

90 
uöt8_t
 
	m£qno
;

93 #ifde‡
NETSTACK_CONF_MAC_SEQNO_HISTORY


94 
	#MAX_SEQNOS
 
NETSTACK_CONF_MAC_SEQNO_HISTORY


	)

96 
	#MAX_SEQNOS
 16

	)

99 
£qno
 
	gª˚ived_£qnos
[
MAX_SEQNOS
];

104 
	$£nd_∑ckë
(
mac_ˇŒback_t
 
£¡
, *
±r
)

106 
ªt
;

107 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_SENDER
, &
rimóddr_node_addr
);

108 #i‡
NULLRDC_802154_AUTOACK
 || 
NULLRDC_802154_AUTOACK_HW


109 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_MAC_ACK
, 1);

112 if(
NETSTACK_FRAMER
.
	`¸óã
() < 0) {

114 
	`PRINTF
("nullrdc: send failed,ÅooÜarge header\n");

115 
ªt
 = 
MAC_TX_ERR_FATAL
;

118 #i‡
NULLRDC_802154_AUTOACK


119 
is_brﬂdˇ°
;

120 
uöt8_t
 
d¢
;

121 
d¢
 = ((
uöt8_t
 *)
	`∑ckëbuf_hdΩå
())[2] & 0xff;

123 
NETSTACK_RADIO
.
	`¥ï¨e
(
	`∑ckëbuf_hdΩå
(), 
	`∑ckëbuf_tŸÀn
());

125 
is_brﬂdˇ°
 = 
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
),

126 &
rimóddr_nuŒ
);

128 if(
NETSTACK_RADIO
.
	`ª˚ivög_∑ckë
() ||

129 (!
is_brﬂdˇ°
 && 
NETSTACK_RADIO
.
	`≥ndög_∑ckë
())) {

134 
ªt
 = 
MAC_TX_COLLISION
;

137 
NETSTACK_RADIO
.
	`å™smô
(
	`∑ckëbuf_tŸÀn
())) {

138 
RADIO_TX_OK
:

139 if(
is_brﬂdˇ°
) {

140 
ªt
 = 
MAC_TX_OK
;

142 
πimî_˛ock_t
 
wt
;

145 
wt
 = 
	`RTIMER_NOW
();

146 
	`w©chdog_≥riodic
();

147 
	`RTIMER_CLOCK_LT
(
	`RTIMER_NOW
(), 
wt
 + 
ACK_WAIT_TIME
));

149 
ªt
 = 
MAC_TX_NOACK
;

150 if(
NETSTACK_RADIO
.
	`ª˚ivög_∑ckë
() ||

151 
NETSTACK_RADIO
.
	`≥ndög_∑ckë
() ||

152 
NETSTACK_RADIO
.
	`ch™√l_˛ór
() == 0) {

153 
Àn
;

154 
uöt8_t
 
ackbuf
[
ACK_LEN
];

156 
wt
 = 
	`RTIMER_NOW
();

157 
	`w©chdog_≥riodic
();

158 
	`RTIMER_CLOCK_LT
(
	`RTIMER_NOW
(),

159 
wt
 + 
AFTER_ACK_DETECTED_WAIT_TIME
));

161 if(
NETSTACK_RADIO
.
	`≥ndög_∑ckë
()) {

162 
Àn
 = 
NETSTACK_RADIO
.
	`ªad
(
ackbuf
, 
ACK_LEN
);

163 if(
Àn
 =
ACK_LEN
 && 
ackbuf
[2] =
d¢
) {

165 
ªt
 = 
MAC_TX_OK
;

168 
ªt
 = 
MAC_TX_COLLISION
;

174 
RADIO_TX_COLLISION
:

175 
ªt
 = 
MAC_TX_COLLISION
;

178 
ªt
 = 
MAC_TX_ERR
;

185 
NETSTACK_RADIO
.
	`£nd
(
	`∑ckëbuf_hdΩå
(), 
	`∑ckëbuf_tŸÀn
())) {

186 
RADIO_TX_OK
:

187 
ªt
 = 
MAC_TX_OK
;

189 
RADIO_TX_COLLISION
:

190 
ªt
 = 
MAC_TX_COLLISION
;

192 
RADIO_TX_NOACK
:

193 
ªt
 = 
MAC_TX_NOACK
;

196 
ªt
 = 
MAC_TX_ERR
;

202 
	`mac_ˇŒ_£¡_ˇŒback
(
£¡
, 
±r
, 
ªt
, 1);

203 
	}
}

206 
	$£nd_li°
(
mac_ˇŒback_t
 
£¡
, *
±r
, 
rdc_buf_li°
 *
buf_li°
)

208 if(
buf_li°
 !
NULL
) {

209 
	`queuebuf_to_∑ckëbuf
(
buf_li°
->
buf
);

210 
	`£nd_∑ckë
(
£¡
, 
±r
);

212 
	}
}

215 
	$∑ckë_öput
()

217 #i‡
NULLRDC_802154_AUTOACK


218 if(
	`∑ckëbuf_d©Æí
(Ë=
ACK_LEN
) {

223 if(
NETSTACK_FRAMER
.
	`∑r£
() < 0) {

224 
	`PRINTF
("nuŒrdc: faûedÅÿ∑r£ %u\n", 
	`∑ckëbuf_d©Æí
());

225 #i‡
NULLRDC_ADDRESS_FILTER


226 } if(!
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
),

227 &
rimóddr_node_addr
) &&

228 !
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
),

229 &
rimóddr_nuŒ
)) {

230 
	`PRINTF
("nullrdc:Çot for us\n");

233 #i‡
NULLRDC_802154_AUTOACK
 || 
NULLRDC_802154_AUTOACK_HW


236 
i
;

237 
i
 = 0; i < 
MAX_SEQNOS
; ++i) {

238 if(
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_PACKET_ID
Ë=
ª˚ived_£qnos
[
i
].
£qno
 &&

239 
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
),

240 &
ª˚ived_£qnos
[
i
].
£ndî
)) {

242 
	`PRINTF
("nullrdc: drop duplicateÜinkÜayerÖacket %u\n",

243 
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_PACKET_ID
));

247 
i
 = 
MAX_SEQNOS
 - 1; i > 0; --i) {

248 
	`mem˝y
(&
ª˚ived_£qnos
[
i
], &received_seqnos[i - 1],

249 (
£qno
));

251 
ª˚ived_£qnos
[0].
£qno
 = 
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_PACKET_ID
);

252 
	`rimóddr_c›y
(&
ª˚ived_£qnos
[0].
£ndî
,

253 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

255 
NETSTACK_MAC
.
	`öput
();

257 
	}
}

260 
	$⁄
()

262  
NETSTACK_RADIO
.
	`⁄
();

263 
	}
}

266 
	$off
(
kìp_ødio_⁄
)

268 if(
kìp_ødio_⁄
) {

269  
NETSTACK_RADIO
.
	`⁄
();

271  
NETSTACK_RADIO
.
	`off
();

273 
	}
}

276 
	$ch™√l_check_öãrvÆ
()

279 
	}
}

282 
	$öô
()

284 
	`⁄
();

285 
	}
}

287 c⁄° 
rdc_drivî
 
	gnuŒrdc_drivî
 = {

289 
öô
,

290 
£nd_∑ckë
,

291 
£nd_li°
,

292 
∑ckë_öput
,

293 
⁄
,

294 
off
,

295 
ch™√l_check_öãrvÆ
,

	@core/net/mac/nullrdc.h

42 #i‚de‡
__NULLRDC_H__


43 
	#__NULLRDC_H__


	)

45 
	~"rdc.h
"

47 c⁄° 
rdc_drivî
 
nuŒrdc_drivî
;

	@core/net/mac/sicslowmac.c

47 
	~<°rög.h
>

48 
	~"sic¶owmac.h
"

49 
	~"‰ame802154.h
"

50 
	~"∑ckëbuf.h
"

51 
	~"queuebuf.h
"

52 
	~"√t°ack.h
"

53 
	~"øndom.h
"

55 
	#DEBUG
 0

	)

57 #i‡
DEBUG


58 
	~<°dio.h
>

59 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

60 
	#PRINTADDR
(
addr
Ë
	`PRINTF
(" %02x%02x:%02x%02x:%02x%02x:%02x%02x ", ((
uöt8_t
 *Ôddr)[0], ((uöt8_à*Ôddr)[1], ((uöt8_à*Ôddr)[2], ((uöt8_à*Ôddr)[3], ((uöt8_à*Ôddr)[4], ((uöt8_à*Ôddr)[5], ((uöt8_à*Ôddr)[6], ((uöt8_à*Ôddr)[7])

	)

62 
	#PRINTF
(...)

	)

63 
	#PRINTADDR
(
addr
)

	)

70 
uöt8_t
 
	gmac_d¢
;

76 
uöt16_t
 
	gmac_d°_∑n_id
 = 
IEEE802154_PANID
;

82 
uöt16_t
 
	gmac_§c_∑n_id
 = 
IEEE802154_PANID
;

86 
	$is_brﬂdˇ°_addr
(
uöt8_t
 
mode
, uöt8_à*
addr
)

88 
i
 = 
mode
 =
FRAME802154_SHORTADDRMODE
 ? 2 : 8;

89 
i
-- > 0) {

90 if(
addr
[
i
] != 0xff) {

95 
	}
}

98 
	$£nd_∑ckë
(
mac_ˇŒback_t
 
£¡
, *
±r
)

100 
‰ame802154_t
 
∑øms
;

101 
uöt8_t
 
Àn
;

104 
	`mem£t
(&
∑øms
, 0, (params));

107 
∑øms
.
fcf
.
‰ame_ty≥
 = 
FRAME802154_DATAFRAME
;

108 
∑øms
.
fcf
.
£curôy_íabÀd
 = 0;

109 
∑øms
.
fcf
.
‰ame_≥ndög
 = 0;

110 
∑øms
.
fcf
.
ack_ªquúed
 = 
	`∑ckëbuf_©å
(
PACKETBUF_ATTR_RELIABLE
);

111 
∑øms
.
fcf
.
∑nid_com¥essi⁄
 = 0;

114 
∑øms
.
fcf
.
‰ame_vîsi⁄
 = 
FRAME802154_IEEE802154_2003
;

117 
∑øms
.
£q
 = 
mac_d¢
++;

124 
∑øms
.
fcf
.
§c_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

125 
∑øms
.
de°_pid
 = 
mac_d°_∑n_id
;

131 if(
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
), &
rimóddr_nuŒ
)) {

133 
∑øms
.
fcf
.
de°_addr_mode
 = 
FRAME802154_SHORTADDRMODE
;

134 
∑øms
.
de°_addr
[0] = 0xFF;

135 
∑øms
.
de°_addr
[1] = 0xFF;

138 
	`rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
de°_addr
,

139 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

140 
∑øms
.
fcf
.
de°_addr_mode
 = 
FRAME802154_LONGADDRMODE
;

144 
∑øms
.
§c_pid
 = 
mac_§c_∑n_id
;

150 
	`rimóddr_c›y
((
rimóddr_t
 *)&
∑øms
.
§c_addr
, &
rimóddr_node_addr
);

152 
∑øms
.
∑ylﬂd
 = 
	`∑ckëbuf_d©≠å
();

153 
∑øms
.
∑ylﬂd_Àn
 = 
	`∑ckëbuf_d©Æí
();

154 
Àn
 = 
	`‰ame802154_hdæí
(&
∑øms
);

155 if(
	`∑ckëbuf_hdøŒoc
(
Àn
)) {

156 
ªt
;

157 
	`‰ame802154_¸óã
(&
∑øms
, 
	`∑ckëbuf_hdΩå
(), 
Àn
);

159 
	`PRINTF
("6MAC-UT: %2X", 
∑øms
.
fcf
.
‰ame_ty≥
);

160 
	`PRINTADDR
(
∑øms
.
de°_addr
.
u8
);

161 
	`PRINTF
("%u %u (%u)\n", 
Àn
, 
	`∑ckëbuf_d©Æí
(), 
	`∑ckëbuf_tŸÀn
());

163 
ªt
 = 
NETSTACK_RADIO
.
	`£nd
(
	`∑ckëbuf_hdΩå
(), 
	`∑ckëbuf_tŸÀn
());

164 if(
£¡
) {

165 
ªt
) {

166 
RADIO_TX_OK
:

167 
	`£¡
(
±r
, 
MAC_TX_OK
, 1);

169 
RADIO_TX_ERR
:

170 
	`£¡
(
±r
, 
MAC_TX_ERR
, 1);

175 
	`PRINTF
("6MAC-UT:Åoÿœrgêhódî: %u\n", 
Àn
);

177 
	}
}

182 
	$£nd_li°
(
mac_ˇŒback_t
 
£¡
, *
±r
, 
rdc_buf_li°
 *
buf_li°
)

184 if(
buf_li°
 !
NULL
) {

185 
	`queuebuf_to_∑ckëbuf
(
buf_li°
->
buf
);

186 
	`£nd_∑ckë
(
£¡
, 
±r
);

188 
	}
}

191 
	$öput_∑ckë
()

193 
‰ame802154_t
 
‰ame
;

194 
Àn
;

196 
Àn
 = 
	`∑ckëbuf_d©Æí
();

198 if(
	`‰ame802154_∑r£
(
	`∑ckëbuf_d©≠å
(), 
Àn
, &
‰ame
) &&

199 
	`∑ckëbuf_hdºedu˚
(
Àn
 - 
‰ame
.
∑ylﬂd_Àn
)) {

200 if(
‰ame
.
fcf
.
de°_addr_mode
) {

201 if(
‰ame
.
de°_pid
 !
mac_§c_∑n_id
 &&

202 
‰ame
.
de°_pid
 !
FRAME802154_BROADCASTPANDID
) {

204 
	`PRINTF
("6MAC: f‹ánŸhîÖ™ %u\n", 
‰ame
.
de°_pid
);

207 if(!
	`is_brﬂdˇ°_addr
(
‰ame
.
fcf
.
de°_addr_mode
, føme.
de°_addr
)) {

208 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_RECEIVER
, (
rimóddr_t
 *)&
‰ame
.
de°_addr
);

209 if(!
	`rimóddr_cmp
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
),

210 &
rimóddr_node_addr
)) {

212 
	`PRINTF
("6MAC:Çot for us\n");

217 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_SENDER
, (
rimóddr_t
 *)&
‰ame
.
§c_addr
);

219 
	`PRINTF
("6MAC-IN: %2X", 
‰ame
.
fcf
.
‰ame_ty≥
);

220 
	`PRINTADDR
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

221 
	`PRINTADDR
(
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

222 
	`PRINTF
("%u\n", 
	`∑ckëbuf_d©Æí
());

223 
NETSTACK_MAC
.
	`öput
();

225 
	`PRINTF
("6MAC: failedÅoÖarse hdr\n");

227 
	}
}

230 
	$⁄
()

232  
NETSTACK_RADIO
.
	`⁄
();

233 
	}
}

236 
	$off
(
kìp_ødio_⁄
)

238 if(
kìp_ødio_⁄
) {

239  
NETSTACK_RADIO
.
	`⁄
();

241  
NETSTACK_RADIO
.
	`off
();

243 
	}
}

246 
	$öô
()

248 
mac_d¢
 = 
	`øndom_ønd
() % 256;

250 
NETSTACK_RADIO
.
	`⁄
();

251 
	}
}

254 
	$ch™√l_check_öãrvÆ
()

257 
	}
}

259 c⁄° 
rdc_drivî
 
	gsic¶owmac_drivî
 = {

261 
öô
,

262 
£nd_∑ckë
,

263 
£nd_li°
,

264 
öput_∑ckë
,

265 
⁄
,

266 
off
,

267 
ch™√l_check_öãrvÆ


	@core/net/mac/sicslowmac.h

46 #i‚de‡
__SICSLOWMAC_H__


47 
	#__SICSLOWMAC_H__


	)

49 
	~"rdc.h
"

52 c⁄° 
rdc_drivî
 
sic¶owmac_drivî
;

	@core/net/neighbor-attr.c

34 
	~"c⁄tiki.h
"

36 
	~"lib/memb.h
"

37 
	~"lib/li°.h
"

38 
	~<°ddef.h
>

39 
	~<°rög.h
>

40 
	~"°döt.h
"

41 
	~"√ighb‹-©å.h
"

43 
	#DEBUG
 0

	)

45 #i‡
DEBUG


46 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

48 
	#PRINTF
(...)

	)

51 
uöt16_t
 
	gtimeout
 = 0;

53 
MEMB
(
√ighb‹_addr_mem
, 
√ighb‹_addr
, 
NEIGHBOR_ATTR_MAX_NEIGHBORS
);

55 
LIST
(
√ighb‹_addrs
);

56 
LIST
(
√ighb‹_©ås
);

58 
√ighb‹_addr
 *

59 
	$√ighb‹_addr_gë
(c⁄° 
rimóddr_t
 *
addr
)

61 
√ighb‹_addr
 *
ôem
;

64 if(
	`memb_ömemb
(&
√ighb‹_addr_mem
, (*)
addr
)) {

65  (
√ighb‹_addr
 *)

66 (((*)
addr
Ë- 
	`off£tof
(
√ighb‹_addr
,áddr));

69 
ôem
 = 
	`li°_hód
(
√ighb‹_addrs
);

70 
ôem
 !
NULL
) {

71 if(
	`rimóddr_cmp
(
addr
, &
ôem
->addr)) {

72  
ôem
;

74 
ôem
 = iãm->
√xt
;

76  
NULL
;

77 
	}
}

79 
√ighb‹_addr
 *

80 
	$√ighb‹_©å_li°_√ighb‹s
()

82  
	`li°_hód
(
√ighb‹_addrs
);

83 
	}
}

86 
	$£t_©å
(
√ighb‹_©å
 *
©å
, 
uöt16_t
 
ödex
)

88 if(
©å
->
deÁu…_vÆue
 !
NULL
) {

89 
	`mem˝y
((*)
©å
->
d©a
 + 
ödex
 *áâr->
size
,

90 
©å
->
deÁu…_vÆue
,áâr->
size
);

93 
	`mem£t
((*)
©å
->
d©a
 + 
ödex
 *áâr->
size
, 0,áttr->size);

95 
	}
}

98 
	$√ighb‹_©å_ªgi°î
(
√ighb‹_©å
 *
def
)

100 
√ighb‹_addr
 *
addr
;

102 
	`li°_push
(
√ighb‹_©ås
, 
def
);

105 
addr
 = 
	`li°_hód
(
√ighb‹_addrs
);ádd∏!
NULL
;ádd∏addr->
√xt
) {

106 
	`£t_©å
(
def
, 
addr
->
ödex
);

109 
	}
}

112 
	$√ighb‹_©å_has_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
)

114  
	`√ighb‹_addr_gë
(
addr
Ë!
NULL
;

115 
	}
}

118 
	$√ighb‹_©å_add_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
)

120 
√ighb‹_©å
 *
def
;

121 
√ighb‹_addr
 *
ôem
;

122 
√ighb‹_addr
 *
±r
;

123 
uöt16_t
 
i
;

125 if(
	`√ighb‹_©å_has_√ighb‹
(
addr
)) {

129 
ôem
 = 
	`memb_Æloc
(&
√ighb‹_addr_mem
);

130 if(
ôem
 =
NULL
) {

134 
	`li°_push
(
√ighb‹_addrs
, 
ôem
);

136 
ôem
->
time
 = 0;

137 
	`rimóddr_c›y
(&
ôem
->
addr
,áddr);

140 
±r
 = 
√ighb‹_addr_mem
.
mem
;

141 
i
 = 0; i < 
√ighb‹_addr_mem
.
num
; ++i) {

142 if(&
±r
[
i
] =
ôem
) {

147 
ôem
->
ödex
 = 
i
;

149 
def
 = 
	`li°_hód
(
√ighb‹_©ås
); de‡!
NULL
; de‡def->
√xt
) {

150 
	`£t_©å
(
def
, 
i
);

154 
	}
}

157 
	$√ighb‹_©å_ªmove_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
)

159 
√ighb‹_addr
 *
ôem
 = 
	`√ighb‹_addr_gë
(
addr
);

161 if(
ôem
 !
NULL
) {

162 
	`li°_ªmove
(
√ighb‹_addrs
, 
ôem
);

163 
	`memb_‰ì
(&
√ighb‹_addr_mem
, 
ôem
);

167 
	}
}

170 
	$√ighb‹_©å_gë_d©a
(
√ighb‹_©å
 *
def
, c⁄° 
rimóddr_t
 *
addr
)

172 
√ighb‹_addr
 *
©å
 = 
	`√ighb‹_addr_gë
(
addr
);

174 if(
©å
 !
NULL
) {

175  (*)
def
->
d©a
 + 
©å
->
ödex
 * def->
size
;

177  
NULL
;

178 
	}
}

181 
	$√ighb‹_©å_£t_d©a
(
√ighb‹_©å
 *
def
, c⁄° 
rimóddr_t
 *
addr
,

182 *
d©a
)

184 
√ighb‹_addr
 *
©å
 = 
	`√ighb‹_addr_gë
(
addr
);

186 if(
©å
 =
NULL
) {

187 if(
	`√ighb‹_©å_add_√ighb‹
(
addr
)) {

188 
©å
 = 
	`√ighb‹_addr_gë
(
addr
);

191 if(
©å
 !
NULL
) {

192 
©å
->
time
 = 0;

193 
	`mem˝y
((*)
def
->
d©a
 + 
©å
->
ödex
 * def->
size
, data, def->size);

197 
	}
}

200 
	$√ighb‹_©å_tick
(c⁄° 
rimóddr_t
 * 
addr
)

202 
√ighb‹_addr
 *
©å
 = 
	`√ighb‹_addr_gë
(
addr
);

204 if(
©å
 !
NULL
) {

205 
©å
->
time
 = 0;

207 
	}
}

209 
uöt16_t


210 
	$√ighb‹_©å_gë_timeout
()

212  
timeout
;

213 
	}
}

217 
	#TIMEOUT_SECONDS
 5

	)

222 
	$timeout_check
(*
±r
)

224 if(
timeout
 > 0) {

225 
√ighb‹_addr
 *
ôem
 = 
	`√ighb‹_©å_li°_√ighb‹s
();

227 
ôem
 !
NULL
) {

228 
ôem
->
time
 +
TIMEOUT_SECONDS
;

229 if(
ôem
->
time
 >
timeout
) {

230 
√ighb‹_addr
 *
√xt_ôem
 = 
ôem
->
√xt
;

232 
	`li°_ªmove
(
√ighb‹_addrs
, 
ôem
);

233 
	`memb_‰ì
(&
√ighb‹_addr_mem
, 
ôem
);

234 
ôem
 = 
√xt_ôem
;

236 
ôem
 = iãm->
√xt
;

241 
	}
}

246 
	$√ighb‹_©å_£t_timeout
(
uöt16_t
 
time
)

248 if(
timeout
 =0 && 
time
 > 0) {

250 } if(
timeout
 > 0 && 
time
 == 0) {

253 
timeout
 = 
time
;

254 
	}
}

	@core/net/neighbor-attr.h

33 #i‚de‡
NEIGHBORATTR_H_


34 
	#NEIGHBORATTR_H_


	)

36 
	~"mac.h
"

37 
	~"queuebuf.h
"

38 
	~"∑ckëbuf.h
"

43 #ifde‡
NEIGHBOR_CONF_MAX_NEIGHBORS


44 
	#NEIGHBOR_ATTR_MAX_NEIGHBORS
 
NEIGHBOR_CONF_MAX_NEIGHBORS


	)

46 
	#NEIGHBOR_ATTR_MAX_NEIGHBORS
 12

	)

52 
	s√ighb‹_addr
 {

53 
√ighb‹_addr
 *
	m√xt
;

54 
rimóddr_t
 
	maddr
;

55 
uöt16_t
 
	mtime
;

56 
uöt16_t
 
	mödex
;

62 
	s√ighb‹_©å
 {

63 
√ighb‹_©å
 *
	m√xt
;

64 
uöt16_t
 
	msize
;

65 *
	mdeÁu…_vÆue
;

66 *
	md©a
;

79 
	#NEIGHBOR_ATTRIBUTE
(
ty≥
, 
«me
, 
deÁu…_vÆue_±r
) \

80 
ty≥
 
_
##
«me
##
_mem
[
NEIGHBOR_ATTR_MAX_NEIGHBORS
]; \

81 
√ighb‹_©å
 
«me
 = \

82 {
NULL
, (
ty≥
), 
deÁu…_vÆue_±r
, (*)
_
##
«me
##
_mem
}

	)

88 
	#NEIGHBOR_ATTRIBUTE_GLOBAL
(
ty≥
, 
«me
, 
deÁu…_vÆue_±r
) \

89 
ty≥
 
_
##
«me
##
_mem
[
NEIGHBOR_ATTR_MAX_NEIGHBORS
]; \

90 
√ighb‹_©å
 
«me
 = \

91 {
NULL
, (
ty≥
), 
deÁu…_vÆue_±r
, (*)
_
##
«me
##
_mem
}

	)

93 
	#NEIGHBOR_ATTRIBUTE_DECLARE
(
«me
Ë
√ighb‹_©å
 
	)
name

99 
√ighb‹_©å_ªgi°î
(
√ighb‹_©å
 *);

104 
√ighb‹_addr
 *
√ighb‹_©å_li°_√ighb‹s
();

110 
√ighb‹_©å_has_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
);

117 
√ighb‹_©å_add_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
);

123 
√ighb‹_©å_ªmove_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
);

136 *
√ighb‹_©å_gë_d©a
(
√ighb‹_©å
 *, c⁄° 
rimóddr_t
 *
addr
);

146 
√ighb‹_©å_£t_d©a
(
√ighb‹_©å
 *, c⁄° 
rimóddr_t
 *
addr
,

147 *
d©a
);

153 
√ighb‹_©å_£t_timeout
(
uöt16_t
);

158 
uöt16_t
 
√ighb‹_©å_gë_timeout
();

163 
√ighb‹_©å_tick
(c⁄° 
rimóddr_t
 *);

	@core/net/neighbor-info.c

40 
	~"√t/√ighb‹-öfo.h
"

41 
	~"√t/√ighb‹-©å.h
"

42 
	~"√t/uù-ds6.h
"

43 
	~"√t/uù-nd6.h
"

44 
	~"°dio.h
"

47 
	#DEBUG
 
DEBUG_NONE


	)

50 
	#ETX_LIMIT
 15

	)

51 
	#ETX_SCALE
 100

	)

52 
	#ETX_ALPHA
 90

	)

53 
	#ETX_NOACK_PENALTY
 
ETX_LIMIT


	)

55 
NEIGHBOR_ATTRIBUTE_GLOBAL
(
lök_mëric_t
, 
©å_ëx
, 
NULL
);

56 
NEIGHBOR_ATTRIBUTE_GLOBAL
(, 
©å_time°amp
, 
NULL
);

58 
√ighb‹_öfo_subs¸ibî_t
 
	gsubs¸ibî_ˇŒback
;

61 
	$upd©e_mëric
(c⁄° 
rimóddr_t
 *
de°
, 
∑ckë_mëric
)

63 
lök_mëric_t
 *
mëri˝
;

64 
lök_mëric_t
 
ªc‹ded_mëric
, 
√w_mëric
;

65 
time
;

67 
mëri˝
 = (
lök_mëric_t
 *)
	`√ighb‹_©å_gë_d©a
(&
©å_ëx
, 
de°
);

68 
∑ckë_mëric
 = 
	`NEIGHBOR_INFO_ETX2FIX
(packet_metric);

69 if(
mëri˝
 =
NULL
 || *metricp == 0) {

70 
ªc‹ded_mëric
 = 
	`NEIGHBOR_INFO_ETX2FIX
(
ETX_LIMIT
);

71 
√w_mëric
 = 
∑ckë_mëric
;

73 
ªc‹ded_mëric
 = *
mëri˝
;

75 
√w_mëric
 = ((
uöt16_t
)
ªc‹ded_mëric
 * 
ETX_ALPHA
 +

76 (
uöt16_t
)
∑ckë_mëric
 * (
ETX_SCALE
 - 
ETX_ALPHA
)) / ETX_SCALE;

85 if(
	`√ighb‹_©å_has_√ighb‹
(
de°
)) {

86 
time
 = 
	`˛ock_£c⁄ds
();

87 
	`√ighb‹_©å_£t_d©a
(&
©å_ëx
, 
de°
, &
√w_mëric
);

88 
	`√ighb‹_©å_£t_d©a
(&
©å_time°amp
, 
de°
, &
time
);

89 if(
√w_mëric
 !
ªc‹ded_mëric
 && 
subs¸ibî_ˇŒback
 !
NULL
) {

90 
	`subs¸ibî_ˇŒback
(
de°
, 1, 
√w_mëric
);

93 
	}
}

94 #i‡
DEBUG


97 
	$add_√ighb‹
(c⁄° 
rimóddr_t
 *
addr
)

99 
	`√ighb‹_©å_add_√ighb‹
(
addr
)) {

101 
	`PRINTF
("neighbor-info: failedÅoáddáÇode.\n");

104 
	`PRINTF
("neighbor-info: TheÇeighbor isálready known\n");

109 
	}
}

114 
	$√ighb‹_öfo_∑ckë_£¡
(
°©us
, 
numtx
)

116 c⁄° 
rimóddr_t
 *
de°
;

117 
lök_mëric_t
 
∑ckë_mëric
;

118 #i‡
UIP_DS6_LL_NUD


119 
uù_ds6_nbr_t
 *
nbr
;

122 
de°
 = 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
);

123 if(
	`rimóddr_cmp
(
de°
, &
rimóddr_nuŒ
)) {

127 
∑ckë_mëric
 = 
numtx
;

129 
°©us
) {

130 
MAC_TX_OK
:

132 #i‡
UIP_DS6_LL_NUD


133 
nbr
 = 
	`uù_ds6_nbr_Œ_lookup
((
uù_Œaddr_t
 *)
de°
);

134 if(
nbr
 !
NULL
 &&

135 (
nbr
->
°©e
 =
STALE
 ||Çbr->°©ê=
DELAY
 ||Çbr->°©ê=
PROBE
)) {

136 
nbr
->
°©e
 = 
REACHABLE
;

137 
	`°imî_£t
(&
nbr
->
ªachabÀ
, 
UIP_ND6_REACHABLE_TIME
 / 1000);

138 
	`PRINTF
("neighbor-info :ÑeceivedáÜinkÜayer ACK : ");

139 
	`PRINTLLADDR
((
uù_Œaddr_t
 *)
de°
);

140 
	`PRINTF
(" isÑeachable.\n");

144 
MAC_TX_NOACK
:

145 
∑ckë_mëric
 = 
ETX_NOACK_PENALTY
;

153 
	`upd©e_mëric
(
de°
, 
∑ckë_mëric
);

154 
	}
}

157 
	$√ighb‹_öfo_∑ckë_ª˚ived
()

159 c⁄° 
rimóddr_t
 *
§c
;

161 
§c
 = 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
);

162 if(
	`rimóddr_cmp
(
§c
, &
rimóddr_nuŒ
)) {

170 
	}
}

173 
	$√ighb‹_öfo_subs¸ibe
(
√ighb‹_öfo_subs¸ibî_t
 
s
)

175 if(
subs¸ibî_ˇŒback
 =
NULL
) {

176 
	`√ighb‹_©å_ªgi°î
(&
©å_ëx
);

177 
	`√ighb‹_©å_ªgi°î
(&
©å_time°amp
);

178 
subs¸ibî_ˇŒback
 = 
s
;

183 
	}
}

185 
lök_mëric_t


186 
	$√ighb‹_öfo_gë_mëric
(c⁄° 
rimóddr_t
 *
addr
)

188 
lök_mëric_t
 *
mëri˝
;

190 
mëri˝
 = (
lök_mëric_t
 *)
	`√ighb‹_©å_gë_d©a
(&
©å_ëx
, 
addr
);

191  
mëri˝
 =
NULL
 ? 
ETX_LIMIT
 : *metricp;

192 
	}
}

	@core/net/neighbor-info.h

40 #i‚de‡
NEIGHBOR_INFO_H


41 
	#NEIGHBOR_INFO_H


	)

43 
	~"√ighb‹-©å.h
"

44 
	~<°döt.h
>

49 
	#NEIGHBOR_INFO_ETX_DIVISOR
 16

	)

53 
	#NEIGHBOR_INFO_ETX2FIX
(
ëx
Ë(”txË* 
NEIGHBOR_INFO_ETX_DIVISOR
)

	)

54 
	#NEIGHBOR_INFO_FIX2ETX
(
fix
Ë((fixË/ 
NEIGHBOR_INFO_ETX_DIVISOR
)

	)

56 (*
	t√ighb‹_öfo_subs¸ibî_t
)(c⁄° 
	trimóddr_t
 *, 
	tknown
, 
	tëx
);

57 
uöt8_t
 
	tlök_mëric_t
;

59 
	`NEIGHBOR_ATTRIBUTE_DECLARE
(
©å_ëx
);

60 
	`NEIGHBOR_ATTRIBUTE_DECLARE
(
©å_time°amp
);

70 
	`√ighb‹_öfo_∑ckë_£¡
(
°©us
, 
numtx
);

79 
	`√ighb‹_öfo_∑ckë_ª˚ived
();

86 
	`√ighb‹_öfo_subs¸ibe
(
√ighb‹_öfo_subs¸ibî_t
);

94 
lök_mëric_t
 
	`√ighb‹_öfo_gë_mëric
(c⁄° 
rimóddr_t
 *
addr
);

	@core/net/netstack.c

41 
	~"√t°ack.h
"

44 
	$√t°ack_öô
()

46 
NETSTACK_RADIO
.
	`öô
();

47 
NETSTACK_RDC
.
	`öô
();

48 
NETSTACK_MAC
.
	`öô
();

49 
NETSTACK_NETWORK
.
	`öô
();

50 
	}
}

	@core/net/netstack.h

41 #i‚de‡
NETSTACK_H


42 
	#NETSTACK_H


	)

44 
	~"c⁄tiki-c⁄f.h
"

46 #i‚de‡
NETSTACK_NETWORK


47 #ifde‡
NETSTACK_CONF_NETWORK


48 
	#NETSTACK_NETWORK
 
NETSTACK_CONF_NETWORK


	)

50 
	#NETSTACK_NETWORK
 
sic¶ow∑n_drivî


	)

54 #i‚de‡
NETSTACK_MAC


55 #ifde‡
NETSTACK_CONF_MAC


56 
	#NETSTACK_MAC
 
NETSTACK_CONF_MAC


	)

58 
	#NETSTACK_MAC
 
nuŒmac_drivî


	)

62 #i‚de‡
NETSTACK_RDC


63 #ifde‡
NETSTACK_CONF_RDC


64 
	#NETSTACK_RDC
 
NETSTACK_CONF_RDC


	)

66 
	#NETSTACK_RDC
 
nuŒrdc_drivî


	)

70 #i‚de‡
NETSTACK_RDC_CHANNEL_CHECK_RATE


71 #ifde‡
NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE


72 
	#NETSTACK_RDC_CHANNEL_CHECK_RATE
 
NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE


	)

74 
	#NETSTACK_RDC_CHANNEL_CHECK_RATE
 8

	)

78 #i‡(
NETSTACK_RDC_CHANNEL_CHECK_RATE
 & (NETSTACK_RDC_CHANNEL_CHECK_RATE - 1)) != 0

79 #îr‹ 
NETSTACK_RDC_CONF_CHANNEL_CHECK_RATE
 
mu°
 
be
 
a
 
powî
 
of
 
two
 (
i
.
e
., 1, 2, 4, 8, 16, 32, 64, ...).

80 #îr‹ 
Ch™ge
 
NETSTACK_RDC_CONF_CHANNEL_CHECK_RATE
 
ö
 
c⁄tiki
-
c⁄f
.
h
, 
¥oje˘
-c⁄f.h 
‹
 i¿
your
 
Makefûe
.

84 #i‚de‡
NETSTACK_RADIO


85 #ifde‡
NETSTACK_CONF_RADIO


86 
	#NETSTACK_RADIO
 
NETSTACK_CONF_RADIO


	)

88 
	#NETSTACK_RADIO
 
nuŒødio_drivî


	)

92 #i‚de‡
NETSTACK_FRAMER


93 #ifde‡
NETSTACK_CONF_FRAMER


94 
	#NETSTACK_FRAMER
 
NETSTACK_CONF_FRAMER


	)

96 
	#NETSTACK_FRAMER
 
‰amî_nuŒmac


	)

100 
	~"mac.h
"

101 
	~"rdc.h
"

102 
	~"‰amî.h
"

103 
	~"ødio.h
"

108 
	s√tw‹k_drivî
 {

109 *
	m«me
;

112 (* 
	möô
)();

115 (* 
	möput
)();

118 c⁄° 
√tw‹k_drivî
 
NETSTACK_NETWORK
;

119 c⁄° 
rdc_drivî
 
NETSTACK_RDC
;

120 c⁄° 
mac_drivî
 
NETSTACK_MAC
;

121 c⁄° 
ødio_drivî
 
NETSTACK_RADIO
;

122 c⁄° 
‰amî
 
NETSTACK_FRAMER
;

124 
√t°ack_öô
();

	@core/net/packetbuf.c

46 
	~<°rög.h
>

47 
	~"low∑n.h
"

49 
	~"∑ckëbuf.h
"

52 
∑ckëbuf_©å
 
	g∑ckëbuf_©ås
[
PACKETBUF_NUM_ATTRS
];

53 
∑ckëbuf_addr
 
	g∑ckëbuf_addrs
[
PACKETBUF_NUM_ADDRS
];

56 
uöt16_t
 
	gbuÊí
, 
	gbuÂå
;

57 
uöt8_t
 
	ghdΩå
;

63 
uöt16_t
 
	g∑ckëbuf_Æig√d
[(
PACKETBUF_SIZE
 + 
PACKETBUF_HDR_SIZE
) / 2 + 1];

64 
uöt8_t
 *
	g∑ckëbuf
 = (uöt8_à*)
∑ckëbuf_Æig√d
;

66 
uöt8_t
 *
	g∑ckëbuÂå
;

68 
	#DEBUG
 0

	)

70 #i‡
DEBUG


71 
	~<°dio.h
>

72 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

74 
	#PRINTF
(...)

	)

79 
	$∑ckëbuf_˛ór
()

81 
buÊí
 = 
buÂå
 = 0;

82 
hdΩå
 = 
PACKETBUF_HDR_SIZE
;

84 
∑ckëbuÂå
 = &
∑ckëbuf
[
PACKETBUF_HDR_SIZE
];

85 
	`∑ckëbuf_©å_˛ór
();

86 
	}
}

89 
	$∑ckëbuf_˛ór_hdr
()

91 
hdΩå
 = 
PACKETBUF_HDR_SIZE
;

92 
	}
}

95 
	$∑ckëbuf_c›y‰om
(c⁄° *
‰om
, 
uöt16_t
 
Àn
)

97 
uöt16_t
 
l
;

99 
	`∑ckëbuf_˛ór
();

100 
l
 = 
Àn
 > 
PACKETBUF_SIZE
? PACKETBUF_SIZE:Üen;

101 
	`mem˝y
(
∑ckëbuÂå
, 
‰om
, 
l
);

102 
buÊí
 = 
l
;

103  
l
;

104 
	}
}

107 
	$∑ckëbuf_com∑˘
()

109 
i
, 
Àn
;

111 if(
	`∑ckëbuf_is_ª„ªn˚
()) {

112 
	`mem˝y
(&
∑ckëbuf
[
PACKETBUF_HDR_SIZE
], 
	`∑ckëbuf_ª„ªn˚_±r
(),

113 
	`∑ckëbuf_d©Æí
());

114 } i‡(
buÂå
 > 0) {

115 
Àn
 = 
	`∑ckëbuf_d©Æí
(Ë+ 
PACKETBUF_HDR_SIZE
;

116 
i
 = 
PACKETBUF_HDR_SIZE
; i < 
Àn
; i++) {

117 
∑ckëbuf
[
i
] =Öackëbuf[
buÂå
 + i];

119 
buÂå
 = 0;

121 
	}
}

124 
	$∑ckëbuf_c›yto_hdr
(
uöt8_t
 *
to
)

126 #i‡
DEBUG_LEVEL
 > 0

128 
i
;

129 
	`PRINTF
("packetbuf_write_hdr: header:\n");

130 
i
 = 
hdΩå
; i < 
PACKETBUF_HDR_SIZE
; ++i) {

131 
	`PRINTF
("0x%02x, ", 
∑ckëbuf
[
i
]);

133 
	`PRINTF
("\n");

136 
	`mem˝y
(
to
, 
∑ckëbuf
 + 
hdΩå
, 
PACKETBUF_HDR_SIZE
 - hdrptr);

137  
PACKETBUF_HDR_SIZE
 - 
hdΩå
;

138 
	}
}

141 
	$∑ckëbuf_c›yto
(*
to
)

143 #i‡
DEBUG_LEVEL
 > 0

145 
i
;

146 
buf„r
[1000];

147 *
buf„Ωå
 = 
buf„r
;

149 
buf„Ωå
[0] = 0;

150 
i
 = 
hdΩå
; i < 
PACKETBUF_HDR_SIZE
; ++i) {

151 
buf„Ωå
 +
	`•rötf
(buf„Ωå, "0x%02x, ", 
∑ckëbuf
[
i
]);

153 
	`PRINTF
("∑ckëbuf_wrôe: hódî: %s\n", 
buf„r
);

154 
buf„Ωå
 = 
buf„r
;

155 
buf„Ωå
[0] = 0;

156 
i
 = 
buÂå
; i < 
buÊí
 + bufptr; ++i) {

157 
buf„Ωå
 +
	`•rötf
(buf„Ωå, "0x%02x, ", 
∑ckëbuÂå
[
i
]);

159 
	`PRINTF
("∑ckëbuf_wrôe: d©a: %s\n", 
buf„r
);

162 if(
PACKETBUF_HDR_SIZE
 - 
hdΩå
 + 
buÊí
 > 
PACKETBUF_SIZE
) {

166 
	`mem˝y
(
to
, 
∑ckëbuf
 + 
hdΩå
, 
PACKETBUF_HDR_SIZE
 - hdrptr);

167 
	`mem˝y
((
uöt8_t
 *)
to
 + 
PACKETBUF_HDR_SIZE
 - 
hdΩå
, 
∑ckëbuÂå
 + 
buÂå
,

168 
buÊí
);

169  
PACKETBUF_HDR_SIZE
 - 
hdΩå
 + 
buÊí
;

170 
	}
}

173 
	$∑ckëbuf_hdøŒoc
(
size
)

175 if(
hdΩå
 >
size
 && 
	`∑ckëbuf_tŸÀn
(Ë+ sizê<
PACKETBUF_SIZE
) {

176 
hdΩå
 -
size
;

180 
	}
}

183 
	$∑ckëbuf_hdr_ªmove
(
size
)

185 
hdΩå
 +
size
;

186 
	}
}

189 
	$∑ckëbuf_hdºedu˚
(
size
)

191 if(
buÊí
 < 
size
) {

195 
buÂå
 +
size
;

196 
buÊí
 -
size
;

198 
	}
}

201 
	$∑ckëbuf_£t_d©Æí
(
uöt16_t
 
Àn
)

203 
	`PRINTF
("∑ckëbuf_£t_Àn:Üí %d\n", 
Àn
);

204 
buÊí
 = 
Àn
;

205 
	}
}

208 
	$∑ckëbuf_d©≠å
()

210  (*)(&
∑ckëbuf
[
buÂå
 + 
PACKETBUF_HDR_SIZE
]);

211 
	}
}

214 
	$∑ckëbuf_hdΩå
()

216  (*)(&
∑ckëbuf
[
hdΩå
]);

217 
	}
}

220 
	$∑ckëbuf_ª„ªn˚
(*
±r
, 
uöt16_t
 
Àn
)

222 
	`∑ckëbuf_˛ór
();

223 
∑ckëbuÂå
 = 
±r
;

224 
buÊí
 = 
Àn
;

225 
	}
}

228 
	$∑ckëbuf_is_ª„ªn˚
()

230  
∑ckëbuÂå
 !&
∑ckëbuf
[
PACKETBUF_HDR_SIZE
];

231 
	}
}

234 
	$∑ckëbuf_ª„ªn˚_±r
()

236  
∑ckëbuÂå
;

237 
	}
}

239 
uöt16_t


240 
	$∑ckëbuf_d©Æí
()

242  
buÊí
;

243 
	}
}

245 
uöt8_t


246 
	$∑ckëbuf_hdæí
()

248  
PACKETBUF_HDR_SIZE
 - 
hdΩå
;

249 
	}
}

251 
uöt16_t


252 
	$∑ckëbuf_tŸÀn
()

254  
	`∑ckëbuf_hdæí
(Ë+ 
	`∑ckëbuf_d©Æí
();

255 
	}
}

258 
	$∑ckëbuf_©å_˛ór
()

260 
i
;

261 
i
 = 0; i < 
PACKETBUF_NUM_ATTRS
; ++i) {

262 
∑ckëbuf_©ås
[
i
].
vÆ
 = 0;

264 
i
 = 0; i < 
PACKETBUF_NUM_ADDRS
; ++i) {

265 
	`rimóddr_c›y
(&
∑ckëbuf_addrs
[
i
].
addr
, &
rimóddr_nuŒ
);

267 
	}
}

270 
	$∑ckëbuf_©å_c›yto
(
∑ckëbuf_©å
 *
©ås
,

271 
∑ckëbuf_addr
 *
addrs
)

273 
	`mem˝y
(
©ås
, 
∑ckëbuf_©ås
, (packetbuf_attrs));

274 
	`mem˝y
(
addrs
, 
∑ckëbuf_addrs
, (packetbuf_addrs));

275 
	}
}

278 
	$∑ckëbuf_©å_c›y‰om
(
∑ckëbuf_©å
 *
©ås
,

279 
∑ckëbuf_addr
 *
addrs
)

281 
	`mem˝y
(
∑ckëbuf_©ås
, 
©ås
, (packetbuf_attrs));

282 
	`mem˝y
(
∑ckëbuf_addrs
, 
addrs
, (packetbuf_addrs));

283 
	}
}

285 #i‡!
PACKETBUF_CONF_ATTRS_INLINE


287 
	$∑ckëbuf_£t_©å
(
uöt8_t
 
ty≥
, c⁄° 
∑ckëbuf_©å_t
 
vÆ
)

290 
∑ckëbuf_©ås
[
ty≥
].
vÆ
 = val;

292 
	}
}

294 
∑ckëbuf_©å_t


295 
	$∑ckëbuf_©å
(
uöt8_t
 
ty≥
)

297  
∑ckëbuf_©ås
[
ty≥
].
vÆ
;

298 
	}
}

301 
	$∑ckëbuf_£t_addr
(
uöt8_t
 
ty≥
, c⁄° 
rimóddr_t
 *
addr
)

304 
	`rimóddr_c›y
(&
∑ckëbuf_addrs
[
ty≥
 - 
PACKETBUF_ADDR_FIRST
].
addr
,áddr);

306 
	}
}

308 c⁄° 
rimóddr_t
 *

309 
	$∑ckëbuf_addr
(
uöt8_t
 
ty≥
)

311  &
∑ckëbuf_addrs
[
ty≥
 - 
PACKETBUF_ADDR_FIRST
].
addr
;

312 
	}
}

	@core/net/packetbuf.h

53 #i‚de‡
__PACKETBUF_H__


54 
	#__PACKETBUF_H__


	)

56 
	~"rimóddr.h
"

57 
	~"°döt.h
"

65 #ifde‡
PACKETBUF_CONF_SIZE


66 
	#PACKETBUF_SIZE
 
PACKETBUF_CONF_SIZE


	)

68 
	#PACKETBUF_SIZE
 128

	)

74 #ifde‡
PACKETBUF_CONF_HDR_SIZE


75 
	#PACKETBUF_HDR_SIZE
 
PACKETBUF_CONF_HDR_SIZE


	)

77 
	#PACKETBUF_HDR_SIZE
 48

	)

89 
∑ckëbuf_˛ór
();

102 
∑ckëbuf_˛ór_hdr
();

104 
∑ckëbuf_hdr_ªmove
(
byãs
);

124 *
∑ckëbuf_d©≠å
();

136 *
∑ckëbuf_hdΩå
();

149 
uöt8_t
 
∑ckëbuf_hdæí
();

168 
uöt16_t
 
∑ckëbuf_d©Æí
();

175 
uöt16_t
 
∑ckëbuf_tŸÀn
();

185 
∑ckëbuf_£t_d©Æí
(
uöt16_t
 
Àn
);

198 
∑ckëbuf_ª„ªn˚
(*
±r
, 
uöt16_t
 
Àn
);

210 
∑ckëbuf_is_ª„ªn˚
();

223 *
∑ckëbuf_ª„ªn˚_±r
();

239 
∑ckëbuf_com∑˘
();

254 
∑ckëbuf_c›y‰om
(c⁄° *
‰om
, 
uöt16_t
 
Àn
);

274 
∑ckëbuf_c›yto
(*
to
);

290 
∑ckëbuf_c›yto_hdr
(
uöt8_t
 *
to
);

304 
∑ckëbuf_hdøŒoc
(
size
);

318 
∑ckëbuf_hdºedu˚
(
size
);

322 
uöt16_t
 
	t∑ckëbuf_©å_t
;

324 
	s∑ckëbuf_©å
 {

326 
∑ckëbuf_©å_t
 
	mvÆ
;

328 
	s∑ckëbuf_addr
 {

330 
rimóddr_t
 
	maddr
;

333 
	#PACKETBUF_ATTR_PACKET_TYPE_DATA
 0

	)

334 
	#PACKETBUF_ATTR_PACKET_TYPE_ACK
 1

	)

335 
	#PACKETBUF_ATTR_PACKET_TYPE_STREAM
 2

	)

336 
	#PACKETBUF_ATTR_PACKET_TYPE_STREAM_END
 3

	)

337 
	#PACKETBUF_ATTR_PACKET_TYPE_TIMESTAMP
 4

	)

340 
	mPACKETBUF_ATTR_NONE
,

343 
	mPACKETBUF_ATTR_CHANNEL
,

344 
	mPACKETBUF_ATTR_NETWORK_ID
,

345 
	mPACKETBUF_ATTR_LINK_QUALITY
,

346 
	mPACKETBUF_ATTR_RSSI
,

347 
	mPACKETBUF_ATTR_TIMESTAMP
,

348 
	mPACKETBUF_ATTR_RADIO_TXPOWER
,

349 
	mPACKETBUF_ATTR_LISTEN_TIME
,

350 
	mPACKETBUF_ATTR_TRANSMIT_TIME
,

351 
	mPACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS
,

352 
	mPACKETBUF_ATTR_MAC_SEQNO
,

353 
	mPACKETBUF_ATTR_MAC_ACK
,

356 
	mPACKETBUF_ATTR_RELIABLE
,

357 
	mPACKETBUF_ATTR_PACKET_ID
,

358 
	mPACKETBUF_ATTR_PACKET_TYPE
,

359 
	mPACKETBUF_ATTR_REXMIT
,

360 
	mPACKETBUF_ATTR_MAX_REXMIT
,

361 
	mPACKETBUF_ATTR_NUM_REXMIT
,

362 
	mPACKETBUF_ATTR_PENDING
,

365 
	mPACKETBUF_ATTR_HOPS
,

366 
	mPACKETBUF_ATTR_TTL
,

367 
	mPACKETBUF_ATTR_EPACKET_ID
,

368 
	mPACKETBUF_ATTR_EPACKET_TYPE
,

369 
	mPACKETBUF_ATTR_ERELIABLE
,

372 
	mPACKETBUF_ADDR_SENDER
,

373 
	mPACKETBUF_ADDR_RECEIVER
,

374 
	mPACKETBUF_ADDR_ESENDER
,

375 
	mPACKETBUF_ADDR_ERECEIVER
,

377 
	mPACKETBUF_ATTR_MAX


380 
	#PACKETBUF_NUM_ADDRS
 4

	)

381 
	#PACKETBUF_NUM_ATTRS
 (
PACKETBUF_ATTR_MAX
 - 
PACKETBUF_NUM_ADDRS
)

	)

382 
	#PACKETBUF_ADDR_FIRST
 
PACKETBUF_ADDR_SENDER


	)

384 
	#PACKETBUF_IS_ADDR
(
ty≥
Ë(—y≥Ë>
PACKETBUF_ADDR_FIRST
)

	)

386 #i‡
PACKETBUF_CONF_ATTRS_INLINE


388 
∑ckëbuf_©å
 
∑ckëbuf_©ås
[];

389 
∑ckëbuf_addr
 
∑ckëbuf_addrs
[];

391 
∑ckëbuf_£t_©å
(
uöt8_t
 
ty≥
, c⁄° 
∑ckëbuf_©å_t
 
vÆ
);

392 
∑ckëbuf_©å_t
 
∑ckëbuf_©å
(
uöt8_t
 
ty≥
);

393 
∑ckëbuf_£t_addr
(
uöt8_t
 
ty≥
, c⁄° 
rimóddr_t
 *
addr
);

394 c⁄° 
rimóddr_t
 *
∑ckëbuf_addr
(
uöt8_t
 
ty≥
);

396 
ölöe
 

397 
	$∑ckëbuf_£t_©å
(
uöt8_t
 
ty≥
, c⁄° 
∑ckëbuf_©å_t
 
vÆ
)

400 
∑ckëbuf_©ås
[
ty≥
].
vÆ
 = val;

402 
	}
}

403 
ölöe
 
∑ckëbuf_©å_t


404 
	$∑ckëbuf_©å
(
uöt8_t
 
ty≥
)

406  
∑ckëbuf_©ås
[
ty≥
].
vÆ
;

407 
	}
}

409 
ölöe
 

410 
	$∑ckëbuf_£t_addr
(
uöt8_t
 
ty≥
, c⁄° 
rimóddr_t
 *
addr
)

413 
	`rimóddr_c›y
(&
∑ckëbuf_addrs
[
ty≥
 - 
PACKETBUF_ADDR_FIRST
].
addr
,áddr);

415 
	}
}

417 
ölöe
 c⁄° 
rimóddr_t
 *

418 
	$∑ckëbuf_addr
(
uöt8_t
 
ty≥
)

420  &
∑ckëbuf_addrs
[
ty≥
 - 
PACKETBUF_ADDR_FIRST
].
addr
;

421 
	}
}

423 
∑ckëbuf_£t_©å
(
uöt8_t
 
ty≥
, c⁄° 
∑ckëbuf_©å_t
 
vÆ
);

424 
∑ckëbuf_©å_t
 
∑ckëbuf_©å
(
uöt8_t
 
ty≥
);

425 
∑ckëbuf_£t_addr
(
uöt8_t
 
ty≥
, c⁄° 
rimóddr_t
 *
addr
);

426 c⁄° 
rimóddr_t
 *
∑ckëbuf_addr
(
uöt8_t
 
ty≥
);

429 
∑ckëbuf_©å_˛ór
();

431 
∑ckëbuf_©å_c›yto
(
∑ckëbuf_©å
 *
©ås
,

432 
∑ckëbuf_addr
 *
addrs
);

433 
∑ckëbuf_©å_c›y‰om
(
∑ckëbuf_©å
 *
©ås
,

434 
∑ckëbuf_addr
 *
addrs
);

436 
	#PACKETBUF_ATTRIBUTES
(...Ë{ 
__VA_ARGS__
 
PACKETBUF_ATTR_LAST
 }

	)

437 
	#PACKETBUF_ATTR_LAST
 { 
PACKETBUF_ATTR_NONE
, 0 }

	)

439 
	#PACKETBUF_ATTR_BIT
 1

	)

440 
	#PACKETBUF_ATTR_BYTE
 8

	)

441 
	#PACKETBUF_ADDRSIZE
 ((
rimóddr_t
Ë* 
PACKETBUF_ATTR_BYTE
)

	)

443 
	s∑ckëbuf_©åli°
 {

444 
uöt8_t
 
	mty≥
;

445 
uöt8_t
 
	mÀn
;

	@core/net/queuebuf.c

47 #i‡
WITH_SWAP


48 
	~"cfs/cfs.h
"

51 
	~<°döt.h
>

52 
	~<°rög.h
>

53 
	~"queuebuf.h
"

54 
	~"memb.h
"

56 #ifde‡
QUEUEBUF_CONF_REF_NUM


57 
	#QUEUEBUF_REF_NUM
 
QUEUEBUF_CONF_REF_NUM


	)

59 
	#QUEUEBUF_REF_NUM
 2

	)

64 
	squeuebuf
 {

65 #i‡
QUEUEBUF_DEBUG


66 
queuebuf
 *
	m√xt
;

67 c⁄° *
	mfûe
;

68 
	mlöe
;

69 
˛ock_time_t
 
	mtime
;

71 #i‡
WITH_SWAP


72 íum {
	mIN_RAM
, 
	mIN_CFS
} 
	mloˇti⁄
;

75 
queuebuf_d©a
 *
	møm_±r
;

76 #i‡
WITH_SWAP


77 
	msw≠_id
;

83 
	squeuebuf_d©a
 {

84 
uöt16_t
 
	mÀn
;

85 
uöt8_t
 
	md©a
[
PACKETBUF_SIZE
];

86 
∑ckëbuf_©å
 
	m©ås
[
PACKETBUF_NUM_ATTRS
];

87 
∑ckëbuf_addr
 
	maddrs
[
PACKETBUF_NUM_ADDRS
];

90 
	squeuebuf_ªf
 {

91 
uöt16_t
 
	mÀn
;

92 
uöt8_t
 *
	mªf
;

93 
uöt8_t
 
	mhdr
[
PACKETBUF_HDR_SIZE
];

94 
uöt8_t
 
	mhdæí
;

97 
MEMB
(
bufmem
, 
queuebuf
, 
QUEUEBUF_NUM
);

98 
MEMB
(
ªfbufmem
, 
queuebuf_ªf
, 
QUEUEBUF_REF_NUM
);

99 
MEMB
(
bu‰ammem
, 
queuebuf_d©a
, 
QUEUEBUFRAM_NUM
);

101 #i‡
WITH_SWAP


107 
	#NQBUF_FILES
 4

	)

108 
	#NQBUF_PER_FILE
 256

	)

109 
	#QBUF_FILE_SIZE
 (
NQBUF_PER_FILE
*(
queuebuf_d©a
))

	)

110 
	#NQBUF_ID
 (
NQBUF_PER_FILE
 * 
NQBUF_FILES
)

	)

112 
	sqbuf_fûe
 {

113 
	mfd
;

114 
	mußge
;

115 
	mª√wabÀ
;

119 
queuebuf_d©a
 
	gtmpd©a
;

121 
queuebuf
 *
	gtmpd©a_qbuf
 = 
NULL
;

123 
	g√xt_sw≠_id
 = 0;

125 
qbuf_fûe
 
	gqbuf_fûes
[
NQBUF_FILES
];

127 
˘imî
 
	gª√w_timî
;

131 #i‡
QUEUEBUF_DEBUG


132 
	~"lib/li°.h
"

133 
LIST
(
queuebuf_li°
);

136 
	#DEBUG
 0

	)

137 #i‡
DEBUG


138 
	~<°dio.h
>

139 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

141 
	#PRINTF
(...)

	)

144 #ifde‡
QUEUEBUF_CONF_STATS


145 
	#QUEUEBUF_STATS
 
QUEUEBUF_CONF_STATS


	)

147 
	#QUEUEBUF_STATS
 0

	)

150 #i‡
QUEUEBUF_STATS


151 
uöt8_t
 
	gqueuebuf_Àn
, 
	gqueuebuf_ªf_Àn
, 
	gqueuebuf_max_Àn
;

154 #i‡
WITH_SWAP


157 
	$qbuf_ª√w_fûe
(
fûe
)

159 
ªt
;

160 
«me
[2];

161 
«me
[0] = 'a' + 
fûe
;

162 
«me
[1] = '\0';

163 if(
qbuf_fûes
[
fûe
].
ª√wabÀ
 == 1) {

164 
	`PRINTF
("qbuf_ª√w_fûe:Ñemovög fûê%d\n", 
fûe
);

165 
	`cfs_ªmove
(
«me
);

167 
ªt
 = 
	`cfs_›í
(
«me
, 
CFS_READ
 | 
CFS_WRITE
);

168 if(
ªt
 == -1) {

169 
	`PRINTF
("qbuf_renew_file: cfs openÉrror\n");

171 
qbuf_fûes
[
fûe
].
fd
 = 
ªt
;

172 
qbuf_fûes
[
fûe
].
ußge
 = 0;

173 
qbuf_fûes
[
fûe
].
ª√wabÀ
 = 0;

174 
	}
}

178 
	$qbuf_ª√w_Æl
(*
unu£d
)

180 
i
;

181 
i
=0; i<
NQBUF_FILES
; i++) {

182 if(
qbuf_fûes
[
i
].
ª√wabÀ
 == 1) {

183 
	`qbuf_ª√w_fûe
(
i
);

186 
	}
}

190 
	$queuebuf_ªmove_‰om_fûe
(
sw≠_id
)

192 
fûeid
;

193 if(
sw≠_id
 != -1) {

194 
fûeid
 = 
sw≠_id
 / 
NQBUF_PER_FILE
;

195 
qbuf_fûes
[
fûeid
].
ußge
--;

198 if(
qbuf_fûes
[
fûeid
].
ußge
 =0 && fûeid !
√xt_sw≠_id
 / 
NQBUF_PER_FILE
) {

199 
qbuf_fûes
[
fûeid
].
ª√wabÀ
 = 1;

201 
	`˘imî_£t
(&
ª√w_timî
, 0, 
qbuf_ª√w_Æl
, 
NULL
);

204 if(
tmpd©a_qbuf
->
sw≠_id
 == swap_id) {

205 
tmpd©a_qbuf
->
sw≠_id
 = -1;

208 
	}
}

211 
	$gë_√w_sw≠_id
()

213 
fûeid
;

214 
sw≠_id
 = 
√xt_sw≠_id
;

215 
fûeid
 = 
sw≠_id
 / 
NQBUF_PER_FILE
;

216 if(
sw≠_id
 % 
NQBUF_PER_FILE
 == 0) {

217 if(
qbuf_fûes
[
fûeid
].
ª√wabÀ
) {

218 
	`qbuf_ª√w_fûe
(
fûeid
);

220 if(
qbuf_fûes
[
fûeid
].
ußge
>0) {

224 
qbuf_fûes
[
fûeid
].
ußge
++;

225 
√xt_sw≠_id
 = (√xt_sw≠_id+1Ë% 
NQBUF_ID
;

226  
sw≠_id
;

227 
	}
}

231 
	$queuebuf_Êush_tmpd©a
()

233 
fûeid
, 
fd
, 
ªt
;

234 
cfs_off£t_t
 
off£t
;

235 if(
tmpd©a_qbuf
) {

236 
	`queuebuf_ªmove_‰om_fûe
(
tmpd©a_qbuf
->
sw≠_id
);

237 
tmpd©a_qbuf
->
sw≠_id
 = 
	`gë_√w_sw≠_id
();

238 if(
tmpd©a_qbuf
->
sw≠_id
 == -1) {

241 
fûeid
 = 
tmpd©a_qbuf
->
sw≠_id
 / 
NQBUF_PER_FILE
;

242 
off£t
 = (
tmpd©a_qbuf
->
sw≠_id
 % 
NQBUF_PER_FILE
Ë* (
queuebuf_d©a
);

243 
fd
 = 
qbuf_fûes
[
fûeid
].fd;

244 
ªt
 = 
	`cfs_£ek
(
fd
, 
off£t
, 
CFS_SEEK_SET
);

245 if(
ªt
 == -1) {

246 
	`PRINTF
("queuebuf_flush_tmpdata: cfs seekÉrror\n");

249 
ªt
 = 
	`cfs_wrôe
(
fd
, &
tmpd©a
, (
queuebuf_d©a
));

250 if(
ªt
 == -1) {

251 
	`PRINTF
("queuebuf_flush_tmpdata: cfs writeÉrror\n");

256 
	}
}

259 
queuebuf_d©a
 *

260 
	$queuebuf_lﬂd_to_øm
(
queuebuf
 *
b
)

262 
fûeid
, 
fd
, 
ªt
;

263 
cfs_off£t_t
 
off£t
;

264 if(
b
->
loˇti⁄
 =
IN_RAM
) {

265  
b
->
øm_±r
;

267 if(
tmpd©a_qbuf
 &&Åmpd©a_qbuf->
sw≠_id
 =
b
->swap_id) {

268  &
tmpd©a
;

270 
tmpd©a_qbuf
 = 
b
;

272 
fûeid
 = 
b
->
sw≠_id
 / 
NQBUF_PER_FILE
;

273 
off£t
 = (
b
->
sw≠_id
 % 
NQBUF_PER_FILE
Ë* (
queuebuf_d©a
);

274 
fd
 = 
qbuf_fûes
[
fûeid
].fd;

275 
ªt
 = 
	`cfs_£ek
(
fd
, 
off£t
, 
CFS_SEEK_SET
);

276 if(
ªt
 == -1) {

277 
	`PRINTF
("queuebuf_load_to_ram: cfs seekÉrror\n");

279 
ªt
 = 
	`cfs_ªad
(
fd
, &
tmpd©a
, (
queuebuf_d©a
));

280 if(
ªt
 == -1) {

281 
	`PRINTF
("queuebuf_load_to_ram: cfsÑeadÉrror\n");

283  &
tmpd©a
;

286 
	}
}

289 
queuebuf_d©a
 *

290 
	$queuebuf_lﬂd_to_øm
(
queuebuf
 *
b
)

292  
b
->
øm_±r
;

293 
	}
}

297 
	$queuebuf_öô
()

299 #i‡
WITH_SWAP


300 
i
;

301 
i
=0; i<
NQBUF_FILES
; i++) {

302 
qbuf_fûes
[
i
].
ª√wabÀ
 = 1;

303 
	`qbuf_ª√w_fûe
(
i
);

306 
	`memb_öô
(&
bu‰ammem
);

307 
	`memb_öô
(&
bufmem
);

308 
	`memb_öô
(&
ªfbufmem
);

309 #i‡
QUEUEBUF_STATS


310 
queuebuf_max_Àn
 = 
QUEUEBUF_NUM
;

312 
	}
}

314 #i‡
QUEUEBUF_DEBUG


315 
queuebuf
 *

316 
	$queuebuf_√w_‰om_∑ckëbuf_debug
(c⁄° *
fûe
, 
löe
)

318 
queuebuf
 *

319 
	$queuebuf_√w_‰om_∑ckëbuf
()

322 
queuebuf
 *
buf
;

323 
queuebuf_ªf
 *
rbuf
;

325 if(
	`∑ckëbuf_is_ª„ªn˚
()) {

326 
rbuf
 = 
	`memb_Æloc
(&
ªfbufmem
);

327 if(
rbuf
 !
NULL
) {

328 #i‡
QUEUEBUF_STATS


329 ++
queuebuf_ªf_Àn
;

331 
rbuf
->
Àn
 = 
	`∑ckëbuf_d©Æí
();

332 
rbuf
->
ªf
 = 
	`∑ckëbuf_ª„ªn˚_±r
();

333 
rbuf
->
hdæí
 = 
	`∑ckëbuf_c›yto_hdr
‘buf->
hdr
);

335 
	`PRINTF
("queuebuf_new_from_packetbuf: couldÇotállocateáÑeference queuebuf\n");

337  (
queuebuf
 *)
rbuf
;

339 
queuebuf_d©a
 *
bu‰am±r
;

340 
buf
 = 
	`memb_Æloc
(&
bufmem
);

341 if(
buf
 !
NULL
) {

342 #i‡
QUEUEBUF_DEBUG


343 
	`li°_add
(
queuebuf_li°
, 
buf
);

344 
buf
->
fûe
 = file;

345 
buf
->
löe
 =Üine;

346 
buf
->
time
 = 
	`˛ock_time
();

348 
buf
->
øm_±r
 = 
	`memb_Æloc
(&
bu‰ammem
);

349 #i‡
WITH_SWAP


351 if(
buf
->
øm_±r
 !
NULL
) {

352 
buf
->
loˇti⁄
 = 
IN_RAM
;

353 
bu‰am±r
 = 
buf
->
øm_±r
;

355 
buf
->
loˇti⁄
 = 
IN_CFS
;

356 
buf
->
sw≠_id
 = -1;

357 
tmpd©a_qbuf
 = 
buf
;

358 
bu‰am±r
 = &
tmpd©a
;

361 if(
buf
->
øm_±r
 =
NULL
) {

362 
	`PRINTF
("queuebuf_new_from_packetbuf: couldÇot queuebuf data\n");

363  
NULL
;

365 
bu‰am±r
 = 
buf
->
øm_±r
;

368 
bu‰am±r
->
Àn
 = 
	`∑ckëbuf_c›yto
(bu‰am±r->
d©a
);

369 
	`∑ckëbuf_©å_c›yto
(
bu‰am±r
->
©ås
, bu‰am±r->
addrs
);

371 #i‡
WITH_SWAP


372 if(
buf
->
loˇti⁄
 =
IN_CFS
) {

373 if(
	`queuebuf_Êush_tmpd©a
() == -1) {

375 
	`memb_‰ì
(&
bufmem
, 
buf
);

376  
NULL
;

381 #i‡
QUEUEBUF_STATS


382 ++
queuebuf_Àn
;

383 
	`PRINTF
("queuebu‡À¿%d\n", 
queuebuf_Àn
);

384 
	`¥ötf
("#A q=%d\n", 
queuebuf_Àn
);

385 if(
queuebuf_Àn
 =
queuebuf_max_Àn
 + 1) {

386 
	`memb_‰ì
(&
bufmem
, 
buf
);

387 
queuebuf_Àn
--;

388  
NULL
;

393 
	`PRINTF
("queuebuf_new_from_packetbuf: couldÇotállocateá queuebuf\n");

395  
buf
;

397 
	}
}

400 
	$queuebuf_upd©e_©å_‰om_∑ckëbuf
(
queuebuf
 *
buf
)

402 
queuebuf_d©a
 *
bu‰am±r
 = 
	`queuebuf_lﬂd_to_øm
(
buf
);

403 
	`∑ckëbuf_©å_c›yto
(
bu‰am±r
->
©ås
, bu‰am±r->
addrs
);

404 #i‡
WITH_SWAP


405 if(
buf
->
loˇti⁄
 =
IN_CFS
) {

406 
	`queuebuf_Êush_tmpd©a
();

409 
	}
}

412 
	$queuebuf_‰ì
(
queuebuf
 *
buf
)

414 if(
	`memb_ömemb
(&
bufmem
, 
buf
)) {

415 #i‡
WITH_SWAP


416 if(
buf
->
loˇti⁄
 =
IN_RAM
) {

417 
	`memb_‰ì
(&
bu‰ammem
, 
buf
->
øm_±r
);

419 
	`queuebuf_ªmove_‰om_fûe
(
buf
->
sw≠_id
);

422 
	`memb_‰ì
(&
bu‰ammem
, 
buf
->
øm_±r
);

424 
	`memb_‰ì
(&
bufmem
, 
buf
);

425 #i‡
QUEUEBUF_STATS


426 --
queuebuf_Àn
;

427 
	`¥ötf
("#A q=%d\n", 
queuebuf_Àn
);

429 #i‡
QUEUEBUF_DEBUG


430 
	`li°_ªmove
(
queuebuf_li°
, 
buf
);

432 } if(
	`memb_ömemb
(&
ªfbufmem
, 
buf
)) {

433 
	`memb_‰ì
(&
ªfbufmem
, 
buf
);

434 #i‡
QUEUEBUF_STATS


435 --
queuebuf_ªf_Àn
;

438 
	}
}

441 
	$queuebuf_to_∑ckëbuf
(
queuebuf
 *
b
)

443 
queuebuf_ªf
 *
r
;

444 if(
	`memb_ömemb
(&
bufmem
, 
b
)) {

445 
queuebuf_d©a
 *
bu‰am±r
 = 
	`queuebuf_lﬂd_to_øm
(
b
);

446 
	`∑ckëbuf_c›y‰om
(
bu‰am±r
->
d©a
, bu‰am±r->
Àn
);

447 
	`∑ckëbuf_©å_c›y‰om
(
bu‰am±r
->
©ås
, bu‰am±r->
addrs
);

448 } if(
	`memb_ömemb
(&
ªfbufmem
, 
b
)) {

449 
r
 = (
queuebuf_ªf
 *)
b
;

450 
	`∑ckëbuf_˛ór
();

451 
	`∑ckëbuf_c›y‰om
(
r
->
ªf
,Ñ->
Àn
);

452 
	`∑ckëbuf_hdøŒoc
(
r
->
hdæí
);

453 
	`mem˝y
(
	`∑ckëbuf_hdΩå
(), 
r
->
hdr
,Ñ->
hdæí
);

455 
	}
}

458 
	$queuebuf_d©≠å
(
queuebuf
 *
b
)

460 
queuebuf_ªf
 *
r
;

462 if(
	`memb_ömemb
(&
bufmem
, 
b
)) {

463 
queuebuf_d©a
 *
bu‰am±r
 = 
	`queuebuf_lﬂd_to_øm
(
b
);

464  
bu‰am±r
->
d©a
;

465 } if(
	`memb_ömemb
(&
ªfbufmem
, 
b
)) {

466 
r
 = (
queuebuf_ªf
 *)
b
;

467  
r
->
ªf
;

469  
NULL
;

470 
	}
}

473 
	$queuebuf_d©Æí
(
queuebuf
 *
b
)

475 
queuebuf_d©a
 *
bu‰am±r
 = 
	`queuebuf_lﬂd_to_øm
(
b
);

476  
bu‰am±r
->
Àn
;

477 
	}
}

479 
rimóddr_t
 *

480 
	$queuebuf_addr
(
queuebuf
 *
b
, 
uöt8_t
 
ty≥
)

482 
queuebuf_d©a
 *
bu‰am±r
 = 
	`queuebuf_lﬂd_to_øm
(
b
);

483  &
bu‰am±r
->
addrs
[
ty≥
 - 
PACKETBUF_ADDR_FIRST
].
addr
;

484 
	}
}

486 
∑ckëbuf_©å_t


487 
	$queuebuf_©å
(
queuebuf
 *
b
, 
uöt8_t
 
ty≥
)

489 
queuebuf_d©a
 *
bu‰am±r
 = 
	`queuebuf_lﬂd_to_øm
(
b
);

490  
bu‰am±r
->
©ås
[
ty≥
].
vÆ
;

491 
	}
}

494 
	$queuebuf_debug_¥öt
()

496 #i‡
QUEUEBUF_DEBUG


497 
queuebuf
 *
q
;

498 
	`¥ötf
("queuebuf_list: ");

499 
q
 = 
	`li°_hód
(
queuebuf_li°
); q !
NULL
;

500 
q
 = 
	`li°_ôem_√xt
(q)) {

501 
	`¥ötf
("%s,%d,%lu ", 
q
->
fûe
, q->
löe
, q->
time
);

503 
	`¥ötf
("\n");

505 
	}
}

	@core/net/queuebuf.h

54 #i‚de‡
__QUEUEBUF_H__


55 
	#__QUEUEBUF_H__


	)

57 
	~"∑ckëbuf.h
"

60 #ifde‡
QUEUEBUF_CONF_NUM


61 
	#QUEUEBUF_NUM
 
QUEUEBUF_CONF_NUM


	)

63 
	#QUEUEBUF_NUM
 3

	)

71 #ifde‡
QUEUEBUFRAM_CONF_NUM


72 #i‡
QUEUEBUFRAM_CONF_NUM
>
QUEUEBUF_NUM


75 
	#QUEUEBUFRAM_NUM
 
QUEUEBUFRAM_CONF_NUM


	)

76 
	#WITH_SWAP
 (
QUEUEBUFRAM_NUM
 < 
QUEUEBUF_NUM
)

	)

79 
	#QUEUEBUFRAM_NUM
 
QUEUEBUF_NUM


	)

80 
	#WITH_SWAP
 0

	)

83 #ifde‡
QUEUEBUF_CONF_DEBUG


84 
	#QUEUEBUF_DEBUG
 
QUEUEBUF_CONF_DEBUG


	)

86 
	#QUEUEBUF_DEBUG
 0

	)

89 
	gqueuebuf
;

91 
queuebuf_öô
();

93 #i‡
QUEUEBUF_DEBUG


94 
queuebuf
 *
queuebuf_√w_‰om_∑ckëbuf_debug
(c⁄° *
fûe
, 
löe
);

95 
	#queuebuf_√w_‰om_∑ckëbuf
(Ë
	`queuebuf_√w_‰om_∑ckëbuf_debug
(
__FILE__
, 
__LINE__
)

	)

97 
queuebuf
 *
queuebuf_√w_‰om_∑ckëbuf
();

99 
queuebuf_upd©e_©å_‰om_∑ckëbuf
(
queuebuf
 *
b
);

101 
queuebuf_to_∑ckëbuf
(
queuebuf
 *
b
);

102 
queuebuf_‰ì
(
queuebuf
 *
b
);

104 *
queuebuf_d©≠å
(
queuebuf
 *
b
);

105 
queuebuf_d©Æí
(
queuebuf
 *
b
);

107 
rimóddr_t
 *
queuebuf_addr
(
queuebuf
 *
b
, 
uöt8_t
 
ty≥
);

108 
∑ckëbuf_©å_t
 
queuebuf_©å
(
queuebuf
 *
b
, 
uöt8_t
 
ty≥
);

110 
queuebuf_debug_¥öt
();

	@core/net/rdc.h

42 #i‚de‡
__RDC_H__


43 
	#__RDC_H__


	)

46 
	~"mac.h
"

49 
	srdc_buf_li°
 {

50 
rdc_buf_li°
 *
	m√xt
;

51 
queuebuf
 *
	mbuf
;

52 *
	m±r
;

58 
	srdc_drivî
 {

59 *
	m«me
;

62 (* 
	möô
)();

65 (* 
	m£nd
)(
mac_ˇŒback_t
 
	m£¡_ˇŒback
, *
	m±r
);

68 (* 
	m£nd_li°
)(
mac_ˇŒback_t
 
	m£¡_ˇŒback
, *
	m±r
, 
rdc_buf_li°
 *
	mli°
);

71 (* 
	möput
)();

74 (* 
	m⁄
)();

77 (* 
	moff
)(
	mkìp_ødio_⁄
);

80 (* 
	mch™√l_check_öãrvÆ
)();

	@core/net/rimeaddr.c

46 
	~"√t/rimóddr.h
"

48 
rimóddr_t
 
	grimóddr_node_addr
;

49 
rimóddr_t
 
	grimóddr_∑nCo‹d_addr
;

51 #i‡
RIMEADDR_SIZE
 == 2

52 c⁄° 
rimóddr_t
 
	grimóddr_nuŒ
 = { { 0, 0 } };

54 #i‡
RIMEADDR_SIZE
 == 8

55 c⁄° 
rimóddr_t
 
	grimóddr_nuŒ
 = { { 0, 0, 0, 0, 0, 0, 0, 0 } };

62 
	$rimóddr_c›y
(
rimóddr_t
 *
de°
, c⁄°Ñimóddr_à*
§c
)

64 
uöt8_t
 
i
;

65 
i
 = 0; i < 
RIMEADDR_SIZE
; i++) {

66 
de°
->
u8
[
i
] = 
§c
->u8[i];

68 
	}
}

71 
	$rimóddr_cmp
(c⁄° 
rimóddr_t
 *
addr1
, c⁄°Ñimóddr_à*
addr2
)

73 
uöt8_t
 
i
;

74 
i
 = 0; i < 
RIMEADDR_SIZE
; i++) {

75 if(
addr1
->
u8
[
i
] !
addr2
->u8[i]) {

80 
	}
}

83 
	$rimóddr_£t_node_addr
(
rimóddr_t
 *
t
)

85 
	`rimóddr_c›y
(&
rimóddr_node_addr
, 
t
);

86 
	}
}

	@core/net/rimeaddr.h

55 #i‚de‡
__RIMEADDR_H__


56 
	#__RIMEADDR_H__


	)

58 
	~"c⁄tiki-c⁄f.h
"

59 
	~"°döt.h
"

61 #ifde‡
RIMEADDR_CONF_SIZE


62 
	#RIMEADDR_SIZE
 
RIMEADDR_CONF_SIZE


	)

64 
	#RIMEADDR_SIZE
 2

	)

68 
	mu8
[
RIMEADDR_SIZE
];

69 } 
	trimóddr_t
;

81 
rimóddr_c›y
(
rimóddr_t
 *
de°
, c⁄°Ñimóddr_à*
‰om
);

95 
rimóddr_cmp
(c⁄° 
rimóddr_t
 *
addr1
, c⁄°Ñimóddr_à*
addr2
);

105 
rimóddr_£t_node_addr
(
rimóddr_t
 *
addr
);

116 
rimóddr_t
 
rimóddr_node_addr
;

125 
rimóddr_t
 
rimóddr_∑nCo‹d_addr
;

138 c⁄° 
rimóddr_t
 
rimóddr_nuŒ
;

	@core/net/sicslowpan.c

60 
	~<°rög.h
>

62 
	~"c⁄tiki.h
"

64 
	~"√t/t˝ù.h
"

65 
	~"√t/uù.h
"

66 
	~"√t/uù-ds6.h
"

68 
	~"√t/sic¶ow∑n.h
"

69 
	~"√t/√ighb‹-öfo.h
"

70 
	~"√t/√t°ack.h
"

72 
	#DEBUG
 0

	)

73 #i‡
DEBUG


75 
uöt8_t
 
	gp
;

76 
	~<°dio.h
>

77 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

78 
	#PRINTFI
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

79 
	#PRINTFO
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

80 
	#PRINT6ADDR
(
addr
Ë
	`PRINTF
(" %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x ", ((
uöt8_t
 *Ôddr)[0], ((uöt8_à*Ôddr)[1], ((uöt8_à*Ôddr)[2], ((uöt8_à*Ôddr)[3], ((uöt8_à*Ôddr)[4], ((uöt8_à*Ôddr)[5], ((uöt8_à*Ôddr)[6], ((uöt8_à*Ôddr)[7], ((uöt8_à*Ôddr)[8], ((uöt8_à*Ôddr)[9], ((uöt8_à*Ôddr)[10], ((uöt8_à*Ôddr)[11], ((uöt8_à*Ôddr)[12], ((uöt8_à*Ôddr)[13], ((uöt8_à*Ôddr)[14], ((uöt8_à*Ôddr)[15])

	)

81 
	#PRINTLLADDR
(
Œaddr
Ë
	`PRINTF
(" %02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x ",Œaddr->
addr
[0],Üœddr->addr[1],Üœddr->addr[2],Üœddr->addr[3],Œaddr->addr[4],Üœddr->addr[5],Œaddr->addr[6],Üœddr->addr[7])

	)

82 
	#PRINTPACKETBUF
(Ë
	`PRINTF
("RIME buf„r: "); 
p
 = 0;Ö < 
	`∑ckëbuf_d©Æí
();Ö++){PRINTF("%.2X", *(
rime_±r
 +Ö));} PRINTF("\n")

	)

83 
	#PRINTUIPBUF
(Ë
	`PRINTF
("UIP buf„r: "); 
p
 = 0;Ö < 
uù_Àn
;Ö++){PRINTF("%.2X", 
uù_buf
[p]);}PRINTF("\n")

	)

84 
	#PRINTSICSLOWPANBUF
(Ë
	`PRINTF
("SICSLOWPAN buf„r: "); 
p
 = 0;Ö < 
sic¶ow∑n_Àn
;Ö++){PRINTF("%.2X", 
sic¶ow∑n_buf
[p]);}PRINTF("\n")

	)

86 
	#PRINTF
(...)

	)

87 
	#PRINTFI
(...)

	)

88 
	#PRINTFO
(...)

	)

89 
	#PRINT6ADDR
(
addr
)

	)

90 
	#PRINTLLADDR
(
Œaddr
)

	)

91 
	#PRINTPACKETBUF
()

	)

92 
	#PRINTUIPBUF
()

	)

93 
	#PRINTSICSLOWPANBUF
()

	)

96 #i‡
UIP_LOGGING


97 
	~<°dio.h
>

98 
uù_log
(*
msg
);

99 
	#UIP_LOG
(
m
Ë
	`uù_log
(m)

	)

101 
	#UIP_LOG
(
m
)

	)

104 #ifde‡
SICSLOWPAN_CONF_MAX_MAC_TRANSMISSIONS


105 
	#SICSLOWPAN_MAX_MAC_TRANSMISSIONS
 
SICSLOWPAN_CONF_MAX_MAC_TRANSMISSIONS


	)

107 
	#SICSLOWPAN_MAX_MAC_TRANSMISSIONS
 4

	)

110 #i‚de‡
SICSLOWPAN_COMPRESSION


111 #ifde‡
SICSLOWPAN_CONF_COMPRESSION


112 
	#SICSLOWPAN_COMPRESSION
 
SICSLOWPAN_CONF_COMPRESSION


	)

114 
	#SICSLOWPAN_COMPRESSION
 
SICSLOWPAN_COMPRESSION_IPV6


	)

118 #i‚de‡
SICSLOWPAN_CONF_NEIGHBOR_INFO


120 
	#SICSLOWPAN_CONF_NEIGHBOR_INFO
 
UIP_CONF_IPV6_RPL


	)

123 
	#GET16
(
±r
,
ödex
Ë(((
uöt16_t
)(’å)[ödex] << 8)Ë| (’å)[(ödexË+ 1]))

	)

124 
	#SET16
(
±r
,
ödex
,
vÆue
) do { \

125 (
±r
)[
ödex
] = ((
vÆue
) >> 8) & 0xff; \

126 (
±r
)[
ödex
 + 1] = (
vÆue
) & 0xff; \

127 } 0)

	)

132 
	#RIME_FRAG_PTR
 (
rime_±r
)

	)

133 
	#RIME_FRAG_DISPATCH_SIZE
 0

	)

134 
	#RIME_FRAG_TAG
 2

	)

135 
	#RIME_FRAG_OFFSET
 4

	)

138 
	#RIME_IPHC_BUF
 ((
uöt8_t
 *)(
rime_±r
 + 
rime_hdr_Àn
))

	)

140 
	#RIME_HC1_PTR
 (
rime_±r
 + 
rime_hdr_Àn
)

	)

141 
	#RIME_HC1_DISPATCH
 0

	)

142 
	#RIME_HC1_ENCODING
 1

	)

143 
	#RIME_HC1_TTL
 2

	)

145 
	#RIME_HC1_HC_UDP_PTR
 (
rime_±r
 + 
rime_hdr_Àn
)

	)

146 
	#RIME_HC1_HC_UDP_DISPATCH
 0

	)

147 
	#RIME_HC1_HC_UDP_HC1_ENCODING
 1

	)

148 
	#RIME_HC1_HC_UDP_UDP_ENCODING
 2

	)

149 
	#RIME_HC1_HC_UDP_TTL
 3

	)

150 
	#RIME_HC1_HC_UDP_PORTS
 4

	)

151 
	#RIME_HC1_HC_UDP_CHKSUM
 5

	)

156 
	#SICSLOWPAN_IP_BUF
 ((
uù_ù_hdr
 *)&
sic¶ow∑n_buf
[
UIP_LLH_LEN
])

	)

157 
	#SICSLOWPAN_UDP_BUF
 ((
uù_udp_hdr
 *)&
sic¶ow∑n_buf
[
UIP_LLIPH_LEN
])

	)

159 
	#UIP_IP_BUF
 ((
uù_ù_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
])

	)

160 
	#UIP_UDP_BUF
 ((
uù_udp_hdr
 *)&
uù_buf
[
UIP_LLIPH_LEN
])

	)

161 
	#UIP_TCP_BUF
 ((
uù_t˝_hdr
 *)&
uù_buf
[
UIP_LLIPH_LEN
])

	)

162 
	#UIP_ICMP_BUF
 ((
uù_icmp_hdr
 *)&
uù_buf
[
UIP_LLIPH_LEN
])

	)

167 
	#MAC_MAX_PAYLOAD
 102

	)

173 #ifde‡
SICSLOWPAN_CONF_COMPRESSION_THRESHOLD


174 
	#COMPRESSION_THRESHOLD
 
SICSLOWPAN_CONF_COMPRESSION_THRESHOLD


	)

176 
	#COMPRESSION_THRESHOLD
 0

	)

182 #ifde‡
SICSLOWPAN_NH_COMPRESSOR


184 
sic¶ow∑n_nh_com¥ess‹
 
SICSLOWPAN_NH_COMPRESSOR
;

192 
uöt8_t
 *
	grime_±r
;

199 
uöt8_t
 
	grime_hdr_Àn
;

207 
uöt8_t
 
	grime_∑ylﬂd_Àn
;

213 
uöt8_t
 
	guncomp_hdr_Àn
;

218 
	gœ°_tx_°©us
;

221 #i‡
SICSLOWPAN_CONF_FRAG


226 
uöt16_t
 
	gsic¶ow∑n_Àn
;

233 
uù_buf_t
 
	gsic¶ow∑n_Æig√d_buf
;

234 
	#sic¶ow∑n_buf
 (
sic¶ow∑n_Æig√d_buf
.
u8
)

	)

242 
uöt16_t
 
	g¥o˚s£d_ù_ö_Àn
;

245 
uöt16_t
 
	gmy_èg
;

248 
uöt16_t
 
	gªass_èg
;

251 
rimóddr_t
 
	g‰ag_£ndî
;

254 
timî
 
	gªass_timî
;

260 
	#sic¶ow∑n_buf
 
uù_buf


	)

261 
	#sic¶ow∑n_Àn
 
uù_Àn


	)

268 
rime_¢if„r
 *
	gˇŒback
 = 
NULL
;

271 
	$rime_¢if„r_add
(
rime_¢if„r
 *
s
)

273 
ˇŒback
 = 
s
;

274 
	}
}

277 
	$rime_¢if„r_ªmove
(
rime_¢if„r
 *
s
)

279 
ˇŒback
 = 
NULL
;

280 
	}
}

285 
	$£t_∑ckë_©ås
()

287 
c
 = 0;

289 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_NETWORK_ID
, 
UIP_IP_BUF
->
¥Ÿo
);

292 if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_UDP
) {

293 
c
 = 
UIP_UDP_BUF
->
§˝‹t
;

294 if(
UIP_UDP_BUF
->
de°p‹t
 < 
c
) {

295 
c
 = 
UIP_UDP_BUF
->
de°p‹t
;

297 } if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_TCP
) {

298 
c
 = 
UIP_TCP_BUF
->
§˝‹t
;

299 if(
UIP_TCP_BUF
->
de°p‹t
 < 
c
) {

300 
c
 = 
UIP_TCP_BUF
->
de°p‹t
;

302 } if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_ICMP6
) {

303 
c
 = 
UIP_ICMP_BUF
->
ty≥
 << 8 | UIP_ICMP_BUF->
icode
;

306 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_CHANNEL
, 
c
);

312 
	}
}

316 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC06


322 #i‡
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 > 0

323 
sic¶ow∑n_addr_c⁄ãxt


324 
	gaddr_c⁄ãxts
[
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
];

328 
sic¶ow∑n_addr_c⁄ãxt
 *
	gc⁄ãxt
;

331 
uöt8_t
 *
	ghc06_±r
;

340 c⁄° 
uöt8_t
 
	gunc_Œc⁄f
[] = {0x0f,0x28,0x22,0x20};

347 c⁄° 
uöt8_t
 
	gunc_˘xc⁄f
[] = {0x00,0x88,0x82,0x80};

354 c⁄° 
uöt8_t
 
	gunc_mxc⁄f
[] = {0x0f, 0x25, 0x23, 0x21};

357 c⁄° 
uöt8_t
 
	gŒ¥efix
[] = {0xfe, 0x80};

360 c⁄° 
uöt8_t
 
	gâl_vÆues
[] = {0, 1, 64, 255};

367 
sic¶ow∑n_addr_c⁄ãxt
*

368 
	$addr_c⁄ãxt_lookup_by_¥efix
(
uù_ùaddr_t
 *
ùaddr
)

371 #i‡
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 > 0

372 
i
;

373 
i
 = 0; i < 
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
; i++) {

374 if((
addr_c⁄ãxts
[
i
].
u£d
 == 1) &&

375 
	`uù_ùaddr_¥efixcmp
(&
addr_c⁄ãxts
[
i
].
¥efix
, 
ùaddr
, 64)) {

376  &
addr_c⁄ãxts
[
i
];

380  
NULL
;

381 
	}
}

384 
sic¶ow∑n_addr_c⁄ãxt
*

385 
	$addr_c⁄ãxt_lookup_by_numbî
(
uöt8_t
 
numbî
)

388 #i‡
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 > 0

389 
i
;

390 
i
 = 0; i < 
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
; i++) {

391 if((
addr_c⁄ãxts
[
i
].
u£d
 == 1) &&

392 
addr_c⁄ãxts
[
i
].
numbî
 ==Çumber) {

393  &
addr_c⁄ãxts
[
i
];

397  
NULL
;

398 
	}
}

400 
uöt8_t


401 
	$com¥ess_addr_64
(
uöt8_t
 
bôpos
, 
uù_ùaddr_t
 *
ùaddr
, 
uù_Œaddr_t
 *
Œaddr
)

403 if(
	`uù_is_addr_mac_addr_ba£d
(
ùaddr
, 
Œaddr
)) {

404  3 << 
bôpos
;

405 } if(
	`sic¶ow∑n_is_iid_16_bô_com¥esßbÀ
(
ùaddr
)) {

407 
	`mem˝y
(
hc06_±r
, &
ùaddr
->
u16
[7], 2);

408 
hc06_±r
 += 2;

409  2 << 
bôpos
;

412 
	`mem˝y
(
hc06_±r
, &
ùaddr
->
u16
[4], 8);

413 
hc06_±r
 += 8;

414  1 << 
bôpos
;

416 
	}
}

426 
	$uncom¥ess_addr
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 c⁄° 
¥efix
[],

427 
uöt8_t
 
¥ef_po°_cou¡
, 
uù_Œaddr_t
 *
Œaddr
)

429 
uöt8_t
 
¥efcou¡
 = 
¥ef_po°_cou¡
 >> 4;

430 
uöt8_t
 
po°cou¡
 = 
¥ef_po°_cou¡
 & 0x0f;

432 
¥efcou¡
 =Örefcount == 15 ? 16 :Örefcount;

433 
po°cou¡
 =Öostcount == 15 ? 16 :Öostcount;

435 
	`PRINTF
("Uncom¥essög %d + %d => ", 
¥efcou¡
, 
po°cou¡
);

437 if(
¥efcou¡
 > 0) {

438 
	`mem˝y
(
ùaddr
, 
¥efix
, 
¥efcou¡
);

440 if(
¥efcou¡
 + 
po°cou¡
 < 16) {

441 
	`mem£t
(&
ùaddr
->
u8
[
¥efcou¡
], 0, 16 - (¥efcou¡ + 
po°cou¡
));

443 if(
po°cou¡
 > 0) {

444 
	`mem˝y
(&
ùaddr
->
u8
[16 - 
po°cou¡
], 
hc06_±r
,Öostcount);

445 if(
po°cou¡
 =2 && 
¥efcou¡
 < 11) {

447 
ùaddr
->
u8
[11] = 0xff;

448 
ùaddr
->
u8
[12] = 0xfe;

450 
hc06_±r
 +
po°cou¡
;

451 } i‡(
¥efcou¡
 > 0) {

453 
	`uù_ds6_£t_addr_iid
(
ùaddr
, 
Œaddr
);

456 
	`PRINT6ADDR
(
ùaddr
);

457 
	`PRINTF
("\n");

458 
	}
}

496 
	$com¥ess_hdr_hc06
(
rimóddr_t
 *
rime_de°addr
)

498 
uöt8_t
 
tmp
, 
ùhc0
, 
ùhc1
;

499 #i‡
DEBUG


500 { 
uöt16_t
 
ndx
;

501 
	`PRINTF
("bef‹êcom¥essi⁄ (%d): ", 
UIP_IP_BUF
->
Àn
[1]);

502 
ndx
 = 0;Çdx < 
UIP_IP_BUF
->
Àn
[1] + 40;Çdx++) {

503 
uöt8_t
 
d©a
 = ((uöt8_à*Ë(
UIP_IP_BUF
))[
ndx
];

504 
	`PRINTF
("%02x", 
d©a
);

506 
	`PRINTF
("\n");

510 
hc06_±r
 = 
rime_±r
 + 2;

518 
ùhc0
 = 
SICSLOWPAN_DISPATCH_IPHC
;

519 
ùhc1
 = 0;

520 
RIME_IPHC_BUF
[2] = 0;

532 if(
	`addr_c⁄ãxt_lookup_by_¥efix
(&
UIP_IP_BUF
->
de°ùaddr
Ë!
NULL
 ||

533 
	`addr_c⁄ãxt_lookup_by_¥efix
(&
UIP_IP_BUF
->
§cùaddr
Ë!
NULL
) {

535 
	`PRINTF
("IPHC: compressing dest or src ipaddr - setting CID\n");

536 
ùhc1
 |
SICSLOWPAN_IPHC_CID
;

537 
hc06_±r
++;

548 
tmp
 = (
UIP_IP_BUF
->
vtc
 << 4Ë| (UIP_IP_BUF->
tcÊow
 >> 4);

549 
tmp
 = ((tmp & 0x03) << 6) | (tmp >> 2);

551 if(((
UIP_IP_BUF
->
tcÊow
 & 0x0F) == 0) &&

552 (
UIP_IP_BUF
->
Êow
 == 0)) {

554 
ùhc0
 |
SICSLOWPAN_IPHC_FL_C
;

555 if(((
UIP_IP_BUF
->
vtc
 & 0x0F) == 0) &&

556 ((
UIP_IP_BUF
->
tcÊow
 & 0xF0) == 0)) {

558 
ùhc0
 |
SICSLOWPAN_IPHC_TC_C
;

561 *
hc06_±r
 = 
tmp
;

562 
hc06_±r
 += 1;

566 if(((
UIP_IP_BUF
->
vtc
 & 0x0F) == 0) &&

567 ((
UIP_IP_BUF
->
tcÊow
 & 0xF0) == 0)) {

569 
ùhc0
 |
SICSLOWPAN_IPHC_TC_C
;

570 *
hc06_±r
 = (
tmp
 & 0xc0) |

571 (
UIP_IP_BUF
->
tcÊow
 & 0x0F);

572 
	`mem˝y
(
hc06_±r
 + 1, &
UIP_IP_BUF
->
Êow
, 2);

573 
hc06_±r
 += 3;

576 
	`mem˝y
(
hc06_±r
, &
UIP_IP_BUF
->
vtc
, 4);

578 *
hc06_±r
 = 
tmp
;

579 
hc06_±r
 += 4;

586 #i‡
UIP_CONF_UDP
 || 
UIP_CONF_ROUTER


587 if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_UDP
) {

588 
ùhc0
 |
SICSLOWPAN_IPHC_NH_C
;

591 #ifde‡
SICSLOWPAN_NH_COMPRESSOR


592 if(
SICSLOWPAN_NH_COMPRESSOR
.
	`is_com¥esßbÀ
(
UIP_IP_BUF
->
¥Ÿo
)) {

593 
ùhc0
 |
SICSLOWPAN_IPHC_NH_C
;

596 i‡((
ùhc0
 & 
SICSLOWPAN_IPHC_NH_C
) == 0) {

597 *
hc06_±r
 = 
UIP_IP_BUF
->
¥Ÿo
;

598 
hc06_±r
 += 1;

608 
UIP_IP_BUF
->
âl
) {

610 
ùhc0
 |
SICSLOWPAN_IPHC_TTL_1
;

613 
ùhc0
 |
SICSLOWPAN_IPHC_TTL_64
;

616 
ùhc0
 |
SICSLOWPAN_IPHC_TTL_255
;

619 *
hc06_±r
 = 
UIP_IP_BUF
->
âl
;

620 
hc06_±r
 += 1;

625 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

626 
	`PRINTF
("IPHC: compressing unspecified - setting SAC\n");

627 
ùhc1
 |
SICSLOWPAN_IPHC_SAC
;

628 
ùhc1
 |
SICSLOWPAN_IPHC_SAM_00
;

629 } if((
c⁄ãxt
 = 
	`addr_c⁄ãxt_lookup_by_¥efix
(&
UIP_IP_BUF
->
§cùaddr
))

630 !
NULL
) {

632 
	`PRINTF
("IPHC: compressing src with context - setting CID & SAC ctx: %d\n",

633 
c⁄ãxt
->
numbî
);

634 
ùhc1
 |
SICSLOWPAN_IPHC_CID
 | 
SICSLOWPAN_IPHC_SAC
;

635 
RIME_IPHC_BUF
[2] |
c⁄ãxt
->
numbî
 << 4;

638 
ùhc1
 |
	`com¥ess_addr_64
(
SICSLOWPAN_IPHC_SAM_BIT
,

639 &
UIP_IP_BUF
->
§cùaddr
, &
uù_Œaddr
);

641 } if(
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
§cùaddr
) &&

642 
UIP_IP_BUF
->
de°ùaddr
.
u16
[1] == 0 &&

643 
UIP_IP_BUF
->
de°ùaddr
.
u16
[2] == 0 &&

644 
UIP_IP_BUF
->
de°ùaddr
.
u16
[3] == 0) {

645 
ùhc1
 |
	`com¥ess_addr_64
(
SICSLOWPAN_IPHC_SAM_BIT
,

646 &
UIP_IP_BUF
->
§cùaddr
, &
uù_Œaddr
);

649 
ùhc1
 |
SICSLOWPAN_IPHC_SAM_00
;

650 
	`mem˝y
(
hc06_±r
, &
UIP_IP_BUF
->
§cùaddr
.
u16
[0], 16);

651 
hc06_±r
 += 16;

655 if(
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
)) {

657 
ùhc1
 |
SICSLOWPAN_IPHC_M
;

658 if(
	`sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ8
(&
UIP_IP_BUF
->
de°ùaddr
)) {

659 
ùhc1
 |
SICSLOWPAN_IPHC_DAM_11
;

661 *
hc06_±r
 = 
UIP_IP_BUF
->
de°ùaddr
.
u8
[15];

662 
hc06_±r
 += 1;

663 } if(
	`sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ32
(&
UIP_IP_BUF
->
de°ùaddr
)) {

664 
ùhc1
 |
SICSLOWPAN_IPHC_DAM_10
;

666 *
hc06_±r
 = 
UIP_IP_BUF
->
de°ùaddr
.
u8
[1];

667 
	`mem˝y
(
hc06_±r
 + 1, &
UIP_IP_BUF
->
de°ùaddr
.
u8
[13], 3);

668 
hc06_±r
 += 4;

669 } if(
	`sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ48
(&
UIP_IP_BUF
->
de°ùaddr
)) {

670 
ùhc1
 |
SICSLOWPAN_IPHC_DAM_01
;

672 *
hc06_±r
 = 
UIP_IP_BUF
->
de°ùaddr
.
u8
[1];

673 
	`mem˝y
(
hc06_±r
 + 1, &
UIP_IP_BUF
->
de°ùaddr
.
u8
[11], 5);

674 
hc06_±r
 += 6;

676 
ùhc1
 |
SICSLOWPAN_IPHC_DAM_00
;

678 
	`mem˝y
(
hc06_±r
, &
UIP_IP_BUF
->
de°ùaddr
.
u8
[0], 16);

679 
hc06_±r
 += 16;

683 if((
c⁄ãxt
 = 
	`addr_c⁄ãxt_lookup_by_¥efix
(&
UIP_IP_BUF
->
de°ùaddr
)Ë!
NULL
) {

685 
ùhc1
 |
SICSLOWPAN_IPHC_DAC
;

686 
RIME_IPHC_BUF
[2] |
c⁄ãxt
->
numbî
;

689 
ùhc1
 |
	`com¥ess_addr_64
(
SICSLOWPAN_IPHC_DAM_BIT
,

690 &
UIP_IP_BUF
->
de°ùaddr
, (
uù_Œaddr_t
 *)
rime_de°addr
);

692 } if(
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
de°ùaddr
) &&

693 
UIP_IP_BUF
->
de°ùaddr
.
u16
[1] == 0 &&

694 
UIP_IP_BUF
->
de°ùaddr
.
u16
[2] == 0 &&

695 
UIP_IP_BUF
->
de°ùaddr
.
u16
[3] == 0) {

696 
ùhc1
 |
	`com¥ess_addr_64
(
SICSLOWPAN_IPHC_DAM_BIT
,

697 &
UIP_IP_BUF
->
de°ùaddr
, (
uù_Œaddr_t
 *)
rime_de°addr
);

700 
ùhc1
 |
SICSLOWPAN_IPHC_DAM_00
;

701 
	`mem˝y
(
hc06_±r
, &
UIP_IP_BUF
->
de°ùaddr
.
u16
[0], 16);

702 
hc06_±r
 += 16;

706 
uncomp_hdr_Àn
 = 
UIP_IPH_LEN
;

708 #i‡
UIP_CONF_UDP
 || 
UIP_CONF_ROUTER


710 if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_UDP
) {

711 
	`PRINTF
("IPHC: Uncompressed UDPÖorts on send side: %x, %x\n",

712 
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
), UIP_HTONS(UIP_UDP_BUF->
de°p‹t
));

714 if(((
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
Ë& 0xfff0Ë=
SICSLOWPAN_UDP_4_BIT_PORT_MIN
) &&

715 ((
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
Ë& 0xfff0Ë=
SICSLOWPAN_UDP_4_BIT_PORT_MIN
)) {

717 *
hc06_±r
 = 
SICSLOWPAN_NHC_UDP_CS_P_11
;

718 
	`PRINTF
("IPHC:Ñemove 12 b of both source & dest withÖrefix 0xFOB\n");

719 *(
hc06_±r
 + 1) =

720 (
uöt8_t
)((
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
) -

721 
SICSLOWPAN_UDP_4_BIT_PORT_MIN
) << 4) +

722 (
uöt8_t
)((
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
) -

723 
SICSLOWPAN_UDP_4_BIT_PORT_MIN
));

724 
hc06_±r
 += 2;

725 } if((
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
Ë& 0xff00Ë=
SICSLOWPAN_UDP_8_BIT_PORT_MIN
) {

727 *
hc06_±r
 = 
SICSLOWPAN_NHC_UDP_CS_P_01
;

728 
	`PRINTF
("IPHC:Üeave source,Ñemove 8 bits of dest withÖrefix 0xF0\n");

729 
	`mem˝y
(
hc06_±r
 + 1, &
UIP_UDP_BUF
->
§˝‹t
, 2);

730 *(
hc06_±r
 + 3) =

731 (
uöt8_t
)((
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
) -

732 
SICSLOWPAN_UDP_8_BIT_PORT_MIN
));

733 
hc06_±r
 += 4;

734 } if((
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
Ë& 0xff00Ë=
SICSLOWPAN_UDP_8_BIT_PORT_MIN
) {

736 *
hc06_±r
 = 
SICSLOWPAN_NHC_UDP_CS_P_10
;

737 
	`PRINTF
("IPHC:Ñemovê8 bô†o‡sour˚ wôhÖªfix 0xF0,Üóvêde°. hch: %i\n", *
hc06_±r
);

738 *(
hc06_±r
 + 1) =

739 (
uöt8_t
)((
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
) -

740 
SICSLOWPAN_UDP_8_BIT_PORT_MIN
));

741 
	`mem˝y
(
hc06_±r
 + 2, &
UIP_UDP_BUF
->
de°p‹t
, 2);

742 
hc06_±r
 += 4;

745 *
hc06_±r
 = 
SICSLOWPAN_NHC_UDP_CS_P_00
;

746 
	`PRINTF
("IPHC: cannot compress headers\n");

747 
	`mem˝y
(
hc06_±r
 + 1, &
UIP_UDP_BUF
->
§˝‹t
, 4);

748 
hc06_±r
 += 5;

752 
	`mem˝y
(
hc06_±r
, &
UIP_UDP_BUF
->
udpchksum
, 2);

753 
hc06_±r
 += 2;

755 
uncomp_hdr_Àn
 +
UIP_UDPH_LEN
;

759 #ifde‡
SICSLOWPAN_NH_COMPRESSOR


761 
hc06_±r
 +
SICSLOWPAN_NH_COMPRESSOR
.
	`com¥ess
(hc06_±r, &
uncomp_hdr_Àn
);

765 
RIME_IPHC_BUF
[0] = 
ùhc0
;

766 
RIME_IPHC_BUF
[1] = 
ùhc1
;

768 
rime_hdr_Àn
 = 
hc06_±r
 - 
rime_±r
;

770 
	}
}

789 
	$uncom¥ess_hdr_hc06
(
uöt16_t
 
ù_Àn
)

791 
uöt8_t
 
tmp
, 
ùhc0
, 
ùhc1
;

793 
hc06_±r
 = 
rime_±r
 + 
rime_hdr_Àn
 + 2;

795 
ùhc0
 = 
RIME_IPHC_BUF
[0];

796 
ùhc1
 = 
RIME_IPHC_BUF
[1];

799 if(
ùhc1
 & 
SICSLOWPAN_IPHC_CID
) {

800 
	`PRINTF
("IPHC: CID flag set - increase header with one\n");

801 
hc06_±r
++;

805 if((
ùhc0
 & 
SICSLOWPAN_IPHC_FL_C
) == 0) {

807 if((
ùhc0
 & 
SICSLOWPAN_IPHC_TC_C
) == 0) {

809 
	`mem˝y
(&
SICSLOWPAN_IP_BUF
->
tcÊow
, 
hc06_±r
 + 1, 3);

810 
tmp
 = *
hc06_±r
;

811 
hc06_±r
 += 4;

814 
SICSLOWPAN_IP_BUF
->
vtc
 = 0x60 | ((
tmp
 >> 2) & 0x0f);

816 
SICSLOWPAN_IP_BUF
->
tcÊow
 = ((
tmp
 >> 2) & 0x30) | (tmp << 6) |

817 (
SICSLOWPAN_IP_BUF
->
tcÊow
 & 0x0f);

820 
SICSLOWPAN_IP_BUF
->
vtc
 = 0x60;

822 
SICSLOWPAN_IP_BUF
->
tcÊow
 = (*
hc06_±r
 & 0x0F) |

823 ((*
hc06_±r
 >> 2) & 0x30);

824 
	`mem˝y
(&
SICSLOWPAN_IP_BUF
->
Êow
, 
hc06_±r
 + 1, 2);

825 
hc06_±r
 += 3;

830 if((
ùhc0
 & 
SICSLOWPAN_IPHC_TC_C
) == 0) {

832 
SICSLOWPAN_IP_BUF
->
vtc
 = 0x60 | ((*
hc06_±r
 >> 2) & 0x0f);

833 
SICSLOWPAN_IP_BUF
->
tcÊow
 = ((*
hc06_±r
 << 6) & 0xC0) | ((*hc06_ptr >> 2) & 0x30);

834 
SICSLOWPAN_IP_BUF
->
Êow
 = 0;

835 
hc06_±r
 += 1;

838 
SICSLOWPAN_IP_BUF
->
vtc
 = 0x60;

839 
SICSLOWPAN_IP_BUF
->
tcÊow
 = 0;

840 
SICSLOWPAN_IP_BUF
->
Êow
 = 0;

845 if((
ùhc0
 & 
SICSLOWPAN_IPHC_NH_C
) == 0) {

847 
SICSLOWPAN_IP_BUF
->
¥Ÿo
 = *
hc06_±r
;

848 
	`PRINTF
("IPHC:Çexàhódî i∆öe: %d\n", 
SICSLOWPAN_IP_BUF
->
¥Ÿo
);

849 
hc06_±r
 += 1;

853 if((
ùhc0
 & 0x03Ë!
SICSLOWPAN_IPHC_TTL_I
) {

854 
SICSLOWPAN_IP_BUF
->
âl
 = 
âl_vÆues
[
ùhc0
 & 0x03];

856 
SICSLOWPAN_IP_BUF
->
âl
 = *
hc06_±r
;

857 
hc06_±r
 += 1;

861 
tmp
 = ((
ùhc1
 & 
SICSLOWPAN_IPHC_SAM_11
Ë>> 
SICSLOWPAN_IPHC_SAM_BIT
) & 0x03;

864 if(
ùhc1
 & 
SICSLOWPAN_IPHC_SAC
) {

865 
uöt8_t
 
sci
 = (
ùhc1
 & 
SICSLOWPAN_IPHC_CID
) ?

866 
RIME_IPHC_BUF
[2] >> 4 : 0;

869 i‡(
tmp
 != 0) {

870 
c⁄ãxt
 = 
	`addr_c⁄ãxt_lookup_by_numbî
(
sci
);

871 if(
c⁄ãxt
 =
NULL
) {

872 
	`PRINTF
("sicslowpan uncompress_hdr:Érror contextÇot found\n");

877 
	`uncom¥ess_addr
(&
SICSLOWPAN_IP_BUF
->
§cùaddr
,

878 
tmp
 !0 ? 
c⁄ãxt
->
¥efix
 : 
NULL
, 
unc_˘xc⁄f
[tmp],

879 (
uù_Œaddr_t
 *)
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

882 
	`uncom¥ess_addr
(&
SICSLOWPAN_IP_BUF
->
§cùaddr
, 
Œ¥efix
, 
unc_Œc⁄f
[
tmp
],

883 (
uù_Œaddr_t
 *)
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

888 
tmp
 = ((
ùhc1
 & 
SICSLOWPAN_IPHC_DAM_11
Ë>> 
SICSLOWPAN_IPHC_DAM_BIT
) & 0x03;

891 if(
ùhc1
 & 
SICSLOWPAN_IPHC_M
) {

893 if(
ùhc1
 & 
SICSLOWPAN_IPHC_DAC
) {

901 
uöt8_t
 
¥efix
[] = {0xff, 0x02};

902 if(
tmp
 > 0 &&Åmp < 3) {

903 
¥efix
[1] = *
hc06_±r
;

904 
hc06_±r
++;

907 
	`uncom¥ess_addr
(&
SICSLOWPAN_IP_BUF
->
de°ùaddr
, 
¥efix
,

908 
unc_mxc⁄f
[
tmp
], 
NULL
);

913 if(
ùhc1
 & 
SICSLOWPAN_IPHC_DAC
) {

914 
uöt8_t
 
dci
 = (
ùhc1
 & 
SICSLOWPAN_IPHC_CID
) ?

915 
RIME_IPHC_BUF
[2] & 0x0f : 0;

916 
c⁄ãxt
 = 
	`addr_c⁄ãxt_lookup_by_numbî
(
dci
);

919 if(
c⁄ãxt
 =
NULL
) {

920 
	`PRINTF
("sicslowpan uncompress_hdr:Érror contextÇot found\n");

923 
	`uncom¥ess_addr
(&
SICSLOWPAN_IP_BUF
->
de°ùaddr
, 
c⁄ãxt
->
¥efix
,

924 
unc_˘xc⁄f
[
tmp
],

925 (
uù_Œaddr_t
 *)
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

928 
	`uncom¥ess_addr
(&
SICSLOWPAN_IP_BUF
->
de°ùaddr
, 
Œ¥efix
,

929 
unc_Œc⁄f
[
tmp
],

930 (
uù_Œaddr_t
 *)
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

933 
uncomp_hdr_Àn
 +
UIP_IPH_LEN
;

936 if((
ùhc0
 & 
SICSLOWPAN_IPHC_NH_C
)) {

938 if((*
hc06_±r
 & 
SICSLOWPAN_NHC_UDP_MASK
Ë=
SICSLOWPAN_NHC_UDP_ID
) {

939 
uöt8_t
 
checksum_com¥es£d
;

940 
SICSLOWPAN_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_UDP
;

941 
checksum_com¥es£d
 = *
hc06_±r
 & 
SICSLOWPAN_NHC_UDP_CHECKSUMC
;

942 
	`PRINTF
("IPHC: Incomög hódî vÆue: %i\n", *
hc06_±r
);

943 *
hc06_±r
 & 
SICSLOWPAN_NHC_UDP_CS_P_11
) {

944 
SICSLOWPAN_NHC_UDP_CS_P_00
:

946 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
§˝‹t
, 
hc06_±r
 + 1, 2);

947 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
de°p‹t
, 
hc06_±r
 + 3, 2);

948 
	`PRINTF
("IPHC: Uncompressed UDPÖorts (ptr+5): %x, %x\n",

949 
	`UIP_HTONS
(
SICSLOWPAN_UDP_BUF
->
§˝‹t
), UIP_HTONS(SICSLOWPAN_UDP_BUF->
de°p‹t
));

950 
hc06_±r
 += 5;

953 
SICSLOWPAN_NHC_UDP_CS_P_01
:

955 
	`PRINTF
("IPHC: Decompressing destination\n");

956 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
§˝‹t
, 
hc06_±r
 + 1, 2);

957 
SICSLOWPAN_UDP_BUF
->
de°p‹t
 = 
	`UIP_HTONS
(
SICSLOWPAN_UDP_8_BIT_PORT_MIN
 + (*(
hc06_±r
 + 3)));

958 
	`PRINTF
("IPHC: Uncompressed UDPÖorts (ptr+4): %x, %x\n",

959 
	`UIP_HTONS
(
SICSLOWPAN_UDP_BUF
->
§˝‹t
), UIP_HTONS(SICSLOWPAN_UDP_BUF->
de°p‹t
));

960 
hc06_±r
 += 4;

963 
SICSLOWPAN_NHC_UDP_CS_P_10
:

965 
	`PRINTF
("IPHC: Decompressing source\n");

966 
SICSLOWPAN_UDP_BUF
->
§˝‹t
 = 
	`UIP_HTONS
(
SICSLOWPAN_UDP_8_BIT_PORT_MIN
 +

967 (*(
hc06_±r
 + 1)));

968 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
de°p‹t
, 
hc06_±r
 + 2, 2);

969 
	`PRINTF
("IPHC: Uncompressed UDPÖorts (ptr+4): %x, %x\n",

970 
	`UIP_HTONS
(
SICSLOWPAN_UDP_BUF
->
§˝‹t
), UIP_HTONS(SICSLOWPAN_UDP_BUF->
de°p‹t
));

971 
hc06_±r
 += 4;

974 
SICSLOWPAN_NHC_UDP_CS_P_11
:

976 
SICSLOWPAN_UDP_BUF
->
§˝‹t
 = 
	`UIP_HTONS
(
SICSLOWPAN_UDP_4_BIT_PORT_MIN
 +

977 (*(
hc06_±r
 + 1) >> 4));

978 
SICSLOWPAN_UDP_BUF
->
de°p‹t
 = 
	`UIP_HTONS
(
SICSLOWPAN_UDP_4_BIT_PORT_MIN
 +

979 ((*(
hc06_±r
 + 1)) & 0x0F));

980 
	`PRINTF
("IPHC: Uncompressed UDPÖorts (ptr+2): %x, %x\n",

981 
	`UIP_HTONS
(
SICSLOWPAN_UDP_BUF
->
§˝‹t
), UIP_HTONS(SICSLOWPAN_UDP_BUF->
de°p‹t
));

982 
hc06_±r
 += 2;

986 
	`PRINTF
("sicslowpan uncompress_hdr:Érror unsupported UDP compression\n");

989 if(!
checksum_com¥es£d
) {

990 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
udpchksum
, 
hc06_±r
, 2);

991 
hc06_±r
 += 2;

992 
	`PRINTF
("IPHC: sicslowpan uncompress_hdr: checksum included\n");

994 
	`PRINTF
("IPHC: sicslowpan uncompress_hdr: checksum *NOT* included\n");

996 
uncomp_hdr_Àn
 +
UIP_UDPH_LEN
;

998 #ifde‡
SICSLOWPAN_NH_COMPRESSOR


1000 
hc06_±r
 +
SICSLOWPAN_NH_COMPRESSOR
.
	`uncom¥ess
(hc06_±r, 
sic¶ow∑n_buf
, &
uncomp_hdr_Àn
);

1005 
rime_hdr_Àn
 = 
hc06_±r
 - 
rime_±r
;

1008 if(
ù_Àn
 == 0) {

1010 
SICSLOWPAN_IP_BUF
->
Àn
[0] = 0;

1011 
SICSLOWPAN_IP_BUF
->
Àn
[1] = 
	`∑ckëbuf_d©Æí
(Ë- 
rime_hdr_Àn
 + 
uncomp_hdr_Àn
 - 
UIP_IPH_LEN
;

1014 
SICSLOWPAN_IP_BUF
->
Àn
[0] = (
ù_Àn
 - 
UIP_IPH_LEN
) >> 8;

1015 
SICSLOWPAN_IP_BUF
->
Àn
[1] = (
ù_Àn
 - 
UIP_IPH_LEN
) & 0x00FF;

1019 if(
SICSLOWPAN_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_UDP
) {

1020 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
ud∂í
, &
SICSLOWPAN_IP_BUF
->
Àn
[0], 2);

1024 
	}
}

1029 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC1


1083 
	$com¥ess_hdr_hc1
(
rimóddr_t
 *
rime_de°addr
)

1089 if(
UIP_IP_BUF
->
vtc
 != 0x60 ||

1090 
UIP_IP_BUF
->
tcÊow
 != 0 ||

1091 
UIP_IP_BUF
->
Êow
 != 0 ||

1092 !
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
§cùaddr
) ||

1093 !
	`uù_is_addr_mac_addr_ba£d
(&
UIP_IP_BUF
->
§cùaddr
, &
uù_Œaddr
) ||

1094 !
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
de°ùaddr
) ||

1095 !
	`uù_is_addr_mac_addr_ba£d
(&
UIP_IP_BUF
->
de°ùaddr
,

1096 (
uù_Œaddr_t
 *)
rime_de°addr
) ||

1097 (
UIP_IP_BUF
->
¥Ÿo
 !
UIP_PROTO_ICMP6
 &&

1098 
UIP_IP_BUF
->
¥Ÿo
 !
UIP_PROTO_UDP
 &&

1099 
UIP_IP_BUF
->
¥Ÿo
 !
UIP_PROTO_TCP
))

1106 *
rime_±r
 = 
SICSLOWPAN_DISPATCH_IPV6
;

1107 
rime_hdr_Àn
 +
SICSLOWPAN_IPV6_HDR_LEN
;

1108 
	`mem˝y
(
rime_±r
 + 
rime_hdr_Àn
, 
UIP_IP_BUF
, 
UIP_IPH_LEN
);

1109 
rime_hdr_Àn
 +
UIP_IPH_LEN
;

1110 
uncomp_hdr_Àn
 +
UIP_IPH_LEN
;

1118 
RIME_HC1_PTR
[
RIME_HC1_DISPATCH
] = 
SICSLOWPAN_DISPATCH_HC1
;

1119 
uncomp_hdr_Àn
 +
UIP_IPH_LEN
;

1120 
UIP_IP_BUF
->
¥Ÿo
) {

1121 
UIP_PROTO_ICMP6
:

1123 
RIME_HC1_PTR
[
RIME_HC1_ENCODING
] = 0xFC;

1124 
RIME_HC1_PTR
[
RIME_HC1_TTL
] = 
UIP_IP_BUF
->
âl
;

1125 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HDR_LEN
;

1127 #i‡
UIP_CONF_TCP


1128 
UIP_PROTO_TCP
:

1130 
RIME_HC1_PTR
[
RIME_HC1_ENCODING
] = 0xFE;

1131 
RIME_HC1_PTR
[
RIME_HC1_TTL
] = 
UIP_IP_BUF
->
âl
;

1132 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HDR_LEN
;

1135 #i‡
UIP_CONF_UDP


1136 
UIP_PROTO_UDP
:

1142 
	`PRINTF
("loˇl/ªmŸêp‹à%u/%u\n",
UIP_UDP_BUF
->
§˝‹t
,UIP_UDP_BUF->
de°p‹t
);

1143 if(
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
Ë>
SICSLOWPAN_UDP_PORT_MIN
 &&

1144 
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
Ë< 
SICSLOWPAN_UDP_PORT_MAX
 &&

1145 
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
Ë>
SICSLOWPAN_UDP_PORT_MIN
 &&

1146 
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
Ë< 
SICSLOWPAN_UDP_PORT_MAX
) {

1148 
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_HC1_ENCODING
] = 0xFB;

1151 
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_UDP_ENCODING
] = 0xE0;

1152 
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_TTL
] = 
UIP_IP_BUF
->
âl
;

1154 
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_PORTS
] =

1155 (
uöt8_t
)((
	`UIP_HTONS
(
UIP_UDP_BUF
->
§˝‹t
) -

1156 
SICSLOWPAN_UDP_PORT_MIN
) << 4) +

1157 (
uöt8_t
)((
	`UIP_HTONS
(
UIP_UDP_BUF
->
de°p‹t
Ë- 
SICSLOWPAN_UDP_PORT_MIN
));

1158 
	`mem˝y
(&
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_CHKSUM
], &
UIP_UDP_BUF
->
udpchksum
, 2);

1159 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HC_UDP_HDR_LEN
;

1160 
uncomp_hdr_Àn
 +
UIP_UDPH_LEN
;

1163 
RIME_HC1_PTR
[
RIME_HC1_ENCODING
] = 0xFA;

1164 
RIME_HC1_PTR
[
RIME_HC1_TTL
] = 
UIP_IP_BUF
->
âl
;

1165 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HDR_LEN
;

1172 
	}
}

1191 
	$uncom¥ess_hdr_hc1
(
uöt16_t
 
ù_Àn
)

1194 
SICSLOWPAN_IP_BUF
->
vtc
 = 0x60;

1195 
SICSLOWPAN_IP_BUF
->
tcÊow
 = 0;

1196 
SICSLOWPAN_IP_BUF
->
Êow
 = 0;

1199 
	`uù_ù6addr
(&
SICSLOWPAN_IP_BUF
->
§cùaddr
, 0xfe80, 0, 0, 0, 0, 0, 0, 0);

1200 
	`uù_ds6_£t_addr_iid
(&
SICSLOWPAN_IP_BUF
->
§cùaddr
,

1201 (
uù_Œaddr_t
 *)
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

1202 
	`uù_ù6addr
(&
SICSLOWPAN_IP_BUF
->
de°ùaddr
, 0xfe80, 0, 0, 0, 0, 0, 0, 0);

1203 
	`uù_ds6_£t_addr_iid
(&
SICSLOWPAN_IP_BUF
->
de°ùaddr
,

1204 (
uù_Œaddr_t
 *)
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_RECEIVER
));

1206 
uncomp_hdr_Àn
 +
UIP_IPH_LEN
;

1209 
RIME_HC1_PTR
[
RIME_HC1_ENCODING
] & 0x06) {

1210 
SICSLOWPAN_HC1_NH_ICMP6
:

1211 
SICSLOWPAN_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

1212 
SICSLOWPAN_IP_BUF
->
âl
 = 
RIME_HC1_PTR
[
RIME_HC1_TTL
];

1213 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HDR_LEN
;

1215 #i‡
UIP_CONF_TCP


1216 
SICSLOWPAN_HC1_NH_TCP
:

1217 
SICSLOWPAN_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_TCP
;

1218 
SICSLOWPAN_IP_BUF
->
âl
 = 
RIME_HC1_PTR
[
RIME_HC1_TTL
];

1219 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HDR_LEN
;

1222 #i‡
UIP_CONF_UDP


1223 
SICSLOWPAN_HC1_NH_UDP
:

1224 
SICSLOWPAN_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_UDP
;

1225 if(
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_HC1_ENCODING
] & 0x01) {

1227 if(
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_UDP_ENCODING
] !=

1228 
SICSLOWPAN_HC_UDP_ALL_C
) {

1229 
	`PRINTF
("sicslowpan (uncompress_hdr),ÖacketÇot supported");

1233 
SICSLOWPAN_IP_BUF
->
âl
 = 
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_TTL
];

1235 
SICSLOWPAN_UDP_BUF
->
§˝‹t
 =

1236 
	`UIP_HTONS
(
SICSLOWPAN_UDP_PORT_MIN
 +

1237 (
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_PORTS
] >> 4));

1238 
SICSLOWPAN_UDP_BUF
->
de°p‹t
 =

1239 
	`UIP_HTONS
(
SICSLOWPAN_UDP_PORT_MIN
 +

1240 (
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_PORTS
] & 0x0F));

1241 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
udpchksum
, &
RIME_HC1_HC_UDP_PTR
[
RIME_HC1_HC_UDP_CHKSUM
], 2);

1242 
uncomp_hdr_Àn
 +
UIP_UDPH_LEN
;

1243 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HC_UDP_HDR_LEN
;

1245 
rime_hdr_Àn
 +
SICSLOWPAN_HC1_HDR_LEN
;

1255 if(
ù_Àn
 == 0) {

1257 
SICSLOWPAN_IP_BUF
->
Àn
[0] = 0;

1258 
SICSLOWPAN_IP_BUF
->
Àn
[1] = 
	`∑ckëbuf_d©Æí
(Ë- 
rime_hdr_Àn
 + 
uncomp_hdr_Àn
 - 
UIP_IPH_LEN
;

1261 
SICSLOWPAN_IP_BUF
->
Àn
[0] = (
ù_Àn
 - 
UIP_IPH_LEN
) >> 8;

1262 
SICSLOWPAN_IP_BUF
->
Àn
[1] = (
ù_Àn
 - 
UIP_IPH_LEN
) & 0x00FF;

1265 if(
SICSLOWPAN_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_UDP
) {

1266 
	`mem˝y
(&
SICSLOWPAN_UDP_BUF
->
ud∂í
, &
SICSLOWPAN_IP_BUF
->
Àn
[0], 2);

1269 
	}
}

1292 
	$com¥ess_hdr_ùv6
(
rimóddr_t
 *
rime_de°addr
)

1294 *
rime_±r
 = 
SICSLOWPAN_DISPATCH_IPV6
;

1295 
rime_hdr_Àn
 +
SICSLOWPAN_IPV6_HDR_LEN
;

1296 
	`mem˝y
(
rime_±r
 + 
rime_hdr_Àn
, 
UIP_IP_BUF
, 
UIP_IPH_LEN
);

1297 
rime_hdr_Àn
 +
UIP_IPH_LEN
;

1298 
uncomp_hdr_Àn
 +
UIP_IPH_LEN
;

1300 
	}
}

1311 
	$∑ckë_£¡
(*
±r
, 
°©us
, 
å™smissi⁄s
)

1313 #i‡
SICSLOWPAN_CONF_NEIGHBOR_INFO


1314 
	`√ighb‹_öfo_∑ckë_£¡
(
°©us
, 
å™smissi⁄s
);

1317 if(
ˇŒback
 !
NULL
) {

1318 
ˇŒback
->
	`ouçut_ˇŒback
(
°©us
);

1321 
œ°_tx_°©us
 = 
°©us
;

1322 
	}
}

1330 
	$£nd_∑ckë
(
rimóddr_t
 *
de°
)

1336 
	`∑ckëbuf_£t_addr
(
PACKETBUF_ADDR_RECEIVER
, 
de°
);

1339 #i‡
SICSLOWPAN_CONF_ACK_ALL


1340 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_RELIABLE
, 1);

1345 
NETSTACK_MAC
.
	`£nd
(&
∑ckë_£¡
, 
NULL
);

1350 
	}
}

1361 
uöt8_t


1362 
	$ouçut
(
uù_Œaddr_t
 *
loˇlde°
)

1365 
rimóddr_t
 
de°
;

1371 
uncomp_hdr_Àn
 = 0;

1372 
rime_hdr_Àn
 = 0;

1375 
	`∑ckëbuf_˛ór
();

1376 
rime_±r
 = 
	`∑ckëbuf_d©≠å
();

1378 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS
,

1379 
SICSLOWPAN_MAX_MAC_TRANSMISSIONS
);

1382 if(
ˇŒback
) {

1385 
	`£t_∑ckë_©ås
();

1388 
	`£t_∑ckë_©ås
();

1391 
	#TCP_FIN
 0x01

	)

1392 
	#TCP_ACK
 0x10

	)

1393 
	#TCP_CTL
 0x3f

	)

1395 if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_TCP
 &&

1396 (
UIP_TCP_BUF
->
Êags
 & 
TCP_FIN
) == 0 &&

1397 (
UIP_TCP_BUF
->
Êags
 & 
TCP_CTL
Ë!
TCP_ACK
) {

1398 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_PACKET_TYPE
,

1399 
PACKETBUF_ATTR_PACKET_TYPE_STREAM
);

1400 } if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_TCP
 &&

1401 (
UIP_TCP_BUF
->
Êags
 & 
TCP_FIN
) == TCP_FIN) {

1402 
	`∑ckëbuf_£t_©å
(
PACKETBUF_ATTR_PACKET_TYPE
,

1403 
PACKETBUF_ATTR_PACKET_TYPE_STREAM_END
);

1411 if(
loˇlde°
 =
NULL
) {

1412 
	`rimóddr_c›y
(&
de°
, &
rimóddr_nuŒ
);

1414 
	`rimóddr_c›y
(&
de°
, (c⁄° 
rimóddr_t
 *)
loˇlde°
);

1417 
	`PRINTFO
("sic¶ow∑¿ouçut: sídögÖackëÜí %d\n", 
uù_Àn
);

1419 if(()
uù_Àn
 >
COMPRESSION_THRESHOLD
) {

1421 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC1


1422 
	`com¥ess_hdr_hc1
(&
de°
);

1424 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_IPV6


1425 
	`com¥ess_hdr_ùv6
(&
de°
);

1427 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC06


1428 
	`com¥ess_hdr_hc06
(&
de°
);

1431 
	`com¥ess_hdr_ùv6
(&
de°
);

1433 
	`PRINTFO
("sic¶ow∑¿ouçut: hódî o‡À¿%d\n", 
rime_hdr_Àn
);

1435 if(
uù_Àn
 - 
uncomp_hdr_Àn
 > 
MAC_MAX_PAYLOAD
 - 
rime_hdr_Àn
) {

1436 #i‡
SICSLOWPAN_CONF_FRAG


1437 
queuebuf
 *
q
;

1446 
	`PRINTFO
("Føgmíèti⁄ sídögÖackëÜí %d\n", 
uù_Àn
);

1449 
	`PRINTFO
("sicslowpan output: 1rst fragment ");

1452 
	`memmove
(
rime_±r
 + 
SICSLOWPAN_FRAG1_HDR_LEN
,Ñime_±r, 
rime_hdr_Àn
);

1460 
	`SET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_DISPATCH_SIZE
,

1461 ((
SICSLOWPAN_DISPATCH_FRAG1
 << 8Ë| 
uù_Àn
));

1463 
	`SET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_TAG
, 
my_èg
);

1464 
my_èg
++;

1467 
rime_hdr_Àn
 +
SICSLOWPAN_FRAG1_HDR_LEN
;

1468 
rime_∑ylﬂd_Àn
 = (
MAC_MAX_PAYLOAD
 - 
rime_hdr_Àn
) & 0xf8;

1469 
	`PRINTFO
("÷í %d,Åag %d)\n", 
rime_∑ylﬂd_Àn
, 
my_èg
);

1470 
	`mem˝y
(
rime_±r
 + 
rime_hdr_Àn
,

1471 (
uöt8_t
 *)
UIP_IP_BUF
 + 
uncomp_hdr_Àn
, 
rime_∑ylﬂd_Àn
);

1472 
	`∑ckëbuf_£t_d©Æí
(
rime_∑ylﬂd_Àn
 + 
rime_hdr_Àn
);

1473 
q
 = 
	`queuebuf_√w_‰om_∑ckëbuf
();

1474 if(
q
 =
NULL
) {

1475 
	`PRINTFO
("couldÇotállocate queuebuf for first fragment, droppingÖacket\n");

1478 
	`£nd_∑ckë
(&
de°
);

1479 
	`queuebuf_to_∑ckëbuf
(
q
);

1480 
	`queuebuf_‰ì
(
q
);

1481 
q
 = 
NULL
;

1484 if((
œ°_tx_°©us
 =
MAC_TX_COLLISION
) ||

1485 (
œ°_tx_°©us
 =
MAC_TX_ERR
) ||

1486 (
œ°_tx_°©us
 =
MAC_TX_ERR_FATAL
)) {

1487 
	`PRINTFO
("error in fragmentÅx, dropping subsequent fragments.\n");

1492 
¥o˚s£d_ù_out_Àn
 = 
rime_∑ylﬂd_Àn
 + 
uncomp_hdr_Àn
;

1499 
rime_hdr_Àn
 = 
SICSLOWPAN_FRAGN_HDR_LEN
;

1502 
	`SET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_DISPATCH_SIZE
,

1503 ((
SICSLOWPAN_DISPATCH_FRAGN
 << 8Ë| 
uù_Àn
));

1504 
rime_∑ylﬂd_Àn
 = (
MAC_MAX_PAYLOAD
 - 
rime_hdr_Àn
) & 0xf8;

1505 
¥o˚s£d_ù_out_Àn
 < 
uù_Àn
) {

1506 
	`PRINTFO
("sicslowpan output: fragment ");

1507 
RIME_FRAG_PTR
[
RIME_FRAG_OFFSET
] = 
¥o˚s£d_ù_out_Àn
 >> 3;

1510 if(
uù_Àn
 - 
¥o˚s£d_ù_out_Àn
 < 
rime_∑ylﬂd_Àn
) {

1512 
rime_∑ylﬂd_Àn
 = 
uù_Àn
 - 
¥o˚s£d_ù_out_Àn
;

1514 
	`PRINTFO
("(offset %d,Üen %d,Åag %d)\n",

1515 
¥o˚s£d_ù_out_Àn
 >> 3, 
rime_∑ylﬂd_Àn
, 
my_èg
);

1516 
	`mem˝y
(
rime_±r
 + 
rime_hdr_Àn
,

1517 (
uöt8_t
 *)
UIP_IP_BUF
 + 
¥o˚s£d_ù_out_Àn
, 
rime_∑ylﬂd_Àn
);

1518 
	`∑ckëbuf_£t_d©Æí
(
rime_∑ylﬂd_Àn
 + 
rime_hdr_Àn
);

1519 
q
 = 
	`queuebuf_√w_‰om_∑ckëbuf
();

1520 if(
q
 =
NULL
) {

1521 
	`PRINTFO
("couldÇotállocate queuebuf, dropping fragment\n");

1524 
	`£nd_∑ckë
(&
de°
);

1525 
	`queuebuf_to_∑ckëbuf
(
q
);

1526 
	`queuebuf_‰ì
(
q
);

1527 
q
 = 
NULL
;

1528 
¥o˚s£d_ù_out_Àn
 +
rime_∑ylﬂd_Àn
;

1531 if((
œ°_tx_°©us
 =
MAC_TX_COLLISION
) ||

1532 (
œ°_tx_°©us
 =
MAC_TX_ERR
) ||

1533 (
œ°_tx_°©us
 =
MAC_TX_ERR_FATAL
)) {

1534 
	`PRINTFO
("error in fragmentÅx, dropping subsequent fragments.\n");

1539 
	`PRINTFO
("sicslowpan output: PacketÅooÜargeÅo be sent without fragmentation support; droppingÖacket\n");

1547 
	`mem˝y
(
rime_±r
 + 
rime_hdr_Àn
, (
uöt8_t
 *)
UIP_IP_BUF
 + 
uncomp_hdr_Àn
,

1548 
uù_Àn
 - 
uncomp_hdr_Àn
);

1549 
	`∑ckëbuf_£t_d©Æí
(
uù_Àn
 - 
uncomp_hdr_Àn
 + 
rime_hdr_Àn
);

1550 
	`£nd_∑ckë
(&
de°
);

1553 
	}
}

1569 
	$öput
()

1572 
uöt16_t
 
‰ag_size
 = 0;

1574 
uöt8_t
 
‰ag_off£t
 = 0;

1575 #i‡
SICSLOWPAN_CONF_FRAG


1577 
uöt16_t
 
‰ag_èg
 = 0;

1578 
uöt8_t
 
fú°_‰agmít
 = 0, 
œ°_‰agmít
 = 0;

1582 
uncomp_hdr_Àn
 = 0;

1583 
rime_hdr_Àn
 = 0;

1586 
rime_±r
 = 
	`∑ckëbuf_d©≠å
();

1588 #i‡
SICSLOWPAN_CONF_FRAG


1590 if(
	`timî_expúed
(&
ªass_timî
)) {

1591 
sic¶ow∑n_Àn
 = 0;

1592 
¥o˚s£d_ù_ö_Àn
 = 0;

1598 (
	`GET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_DISPATCH_SIZE
) & 0xf800) >> 8) {

1599 
SICSLOWPAN_DISPATCH_FRAG1
:

1600 
	`PRINTFI
("sicslowpan input: FRAG1 ");

1601 
‰ag_off£t
 = 0;

1603 
‰ag_size
 = 
	`GET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_DISPATCH_SIZE
) & 0x07ff;

1605 
‰ag_èg
 = 
	`GET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_TAG
);

1606 
	`PRINTFI
("size %d,Åag %d, offset %d)\n",

1607 
‰ag_size
, 
‰ag_èg
, 
‰ag_off£t
);

1608 
rime_hdr_Àn
 +
SICSLOWPAN_FRAG1_HDR_LEN
;

1610 
fú°_‰agmít
 = 1;

1612 
SICSLOWPAN_DISPATCH_FRAGN
:

1617 
	`PRINTFI
("sicslowpan input: FRAGN ");

1618 
‰ag_off£t
 = 
RIME_FRAG_PTR
[
RIME_FRAG_OFFSET
];

1619 
‰ag_èg
 = 
	`GET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_TAG
);

1620 
‰ag_size
 = 
	`GET16
(
RIME_FRAG_PTR
, 
RIME_FRAG_DISPATCH_SIZE
) & 0x07ff;

1621 
	`PRINTFI
("size %d,Åag %d, offset %d)\n",

1622 
‰ag_size
, 
‰ag_èg
, 
‰ag_off£t
);

1623 
rime_hdr_Àn
 +
SICSLOWPAN_FRAGN_HDR_LEN
;

1627 
	`PRINTFI
("last_fragment?:Örocessed_ip_in_len %dÑime_payload_len %d frag_size %d\n",

1628 
¥o˚s£d_ù_ö_Àn
, 
	`∑ckëbuf_d©Æí
(Ë- 
rime_hdr_Àn
, 
‰ag_size
);

1630 if(
¥o˚s£d_ù_ö_Àn
 + 
	`∑ckëbuf_d©Æí
(Ë- 
rime_hdr_Àn
 >
‰ag_size
) {

1631 
œ°_‰agmít
 = 1;

1638 if(
¥o˚s£d_ù_ö_Àn
 > 0) {

1641 if((
‰ag_size
 > 0 &&

1642 (
‰ag_size
 !
sic¶ow∑n_Àn
 ||

1643 
ªass_èg
 !
‰ag_èg
 ||

1644 !
	`rimóddr_cmp
(&
‰ag_£ndî
, 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
)))) ||

1645 
‰ag_size
 == 0) {

1650 
	`PRINTFI
("sicslowpan input: Dropping 6lowpanÖacketÅhat isÇotá fragment ofÅheÖacket currently beingÑeassembled\n");

1658 if((
‰ag_size
 > 0Ë&& (‰ag_sizê<
UIP_BUFSIZE
)) {

1659 
sic¶ow∑n_Àn
 = 
‰ag_size
;

1660 
ªass_èg
 = 
‰ag_èg
;

1661 
	`timî_£t
(&
ªass_timî
, 
SICSLOWPAN_REASS_MAXAGE
*
CLOCK_SECOND
);

1662 
	`PRINTFI
("sicslowpan input: INIT FRAGMENTATION (len %d,Åag %d)\n",

1663 
sic¶ow∑n_Àn
, 
ªass_èg
);

1664 
	`rimóddr_c›y
(&
‰ag_£ndî
, 
	`∑ckëbuf_addr
(
PACKETBUF_ADDR_SENDER
));

1668 if(
rime_hdr_Àn
 =
SICSLOWPAN_FRAGN_HDR_LEN
) {

1670 
c›y∑ylﬂd
;

1675 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC06


1676 if((
RIME_HC1_PTR
[
RIME_HC1_DISPATCH
] & 0xe0Ë=
SICSLOWPAN_DISPATCH_IPHC
) {

1677 
	`PRINTFI
("sicslowpan input: IPHC\n");

1678 
	`uncom¥ess_hdr_hc06
(
‰ag_size
);

1681 
RIME_HC1_PTR
[
RIME_HC1_DISPATCH
]) {

1682 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC1


1683 
SICSLOWPAN_DISPATCH_HC1
:

1684 
	`PRINTFI
("sicslowpan input: HC1\n");

1685 
	`uncom¥ess_hdr_hc1
(
‰ag_size
);

1688 
SICSLOWPAN_DISPATCH_IPV6
:

1689 
	`PRINTFI
("sicslowpan input: IPV6\n");

1690 
rime_hdr_Àn
 +
SICSLOWPAN_IPV6_HDR_LEN
;

1693 
	`mem˝y
(
SICSLOWPAN_IP_BUF
, 
rime_±r
 + 
rime_hdr_Àn
, 
UIP_IPH_LEN
);

1696 
rime_hdr_Àn
 +
UIP_IPH_LEN
;

1697 
uncomp_hdr_Àn
 +
UIP_IPH_LEN
;

1701 
	`PRINTFI
("sicslowpan input: unknown dispatch: %u\n",

1702 
RIME_HC1_PTR
[
RIME_HC1_DISPATCH
]);

1707 #i‡
SICSLOWPAN_CONF_FRAG


1708 
c›y∑ylﬂd
:

1717 if(
	`∑ckëbuf_d©Æí
(Ë< 
rime_hdr_Àn
) {

1718 
	`PRINTF
("SICSLOWPAN:Öacket dropped dueÅo header >ÅotalÖacket\n");

1721 
rime_∑ylﬂd_Àn
 = 
	`∑ckëbuf_d©Æí
(Ë- 
rime_hdr_Àn
;

1722 
	`mem˝y
((
uöt8_t
 *)
SICSLOWPAN_IP_BUF
 + 
uncomp_hdr_Àn
 + (
uöt16_t
)(
‰ag_off£t
 << 3), 
rime_±r
 + 
rime_hdr_Àn
, 
rime_∑ylﬂd_Àn
);

1726 #i‡
SICSLOWPAN_CONF_FRAG


1727 if(
‰ag_size
 > 0) {

1729 if(
fú°_‰agmít
 != 0) {

1730 
¥o˚s£d_ù_ö_Àn
 +
uncomp_hdr_Àn
;

1734 if(
œ°_‰agmít
 != 0) {

1735 
¥o˚s£d_ù_ö_Àn
 = 
‰ag_size
;

1737 
¥o˚s£d_ù_ö_Àn
 +
rime_∑ylﬂd_Àn
;

1739 
	`PRINTF
("¥o˚s£d_ù_ö_À¿%d,Ñime_∑ylﬂd_À¿%d\n", 
¥o˚s£d_ù_ö_Àn
, 
rime_∑ylﬂd_Àn
);

1743 
sic¶ow∑n_Àn
 = 
rime_∑ylﬂd_Àn
 + 
uncomp_hdr_Àn
;

1744 #i‡
SICSLOWPAN_CONF_FRAG


1751 
	`PRINTF
("sicslowpan_initÖrocessed_ip_in_len %d, sicslowpan_len %d\n",

1752 
¥o˚s£d_ù_ö_Àn
, 
sic¶ow∑n_Àn
);

1753 if(
¥o˚s£d_ù_ö_Àn
 =0 || (¥o˚s£d_ù_ö_À¿=
sic¶ow∑n_Àn
)) {

1754 
	`PRINTFI
("sicslowpan input: IPÖacketÑeady (length %d)\n",

1755 
sic¶ow∑n_Àn
);

1756 
	`mem˝y
((
uöt8_t
 *)
UIP_IP_BUF
, (uöt8_à*)
SICSLOWPAN_IP_BUF
, 
sic¶ow∑n_Àn
);

1757 
uù_Àn
 = 
sic¶ow∑n_Àn
;

1758 
sic¶ow∑n_Àn
 = 0;

1759 
¥o˚s£d_ù_ö_Àn
 = 0;

1762 #i‡
DEBUG


1764 
uöt16_t
 
ndx
;

1765 
	`PRINTF
("a·î decom¥essi⁄ %u:", 
SICSLOWPAN_IP_BUF
->
Àn
[1]);

1766 
ndx
 = 0;Çdx < 
SICSLOWPAN_IP_BUF
->
Àn
[1] + 40;Çdx++) {

1767 
uöt8_t
 
d©a
 = ((uöt8_à*Ë(
SICSLOWPAN_IP_BUF
))[
ndx
];

1768 
	`PRINTF
("%02x", 
d©a
);

1770 
	`PRINTF
("\n");

1774 #i‡
SICSLOWPAN_CONF_NEIGHBOR_INFO


1775 
	`√ighb‹_öfo_∑ckë_ª˚ived
();

1780 if(
ˇŒback
) {

1781 
	`£t_∑ckë_©ås
();

1782 
ˇŒback
->
	`öput_ˇŒback
();

1785 
	`£t_∑ckë_©ås
();

1788 
	`t˝ù_öput
();

1789 #i‡
SICSLOWPAN_CONF_FRAG


1792 
	}
}

1799 
	$sic¶ow∑n_öô
()

1805 
	`t˝ù_£t_ouçutfunc
(
ouçut
);

1807 #i‡
SICSLOWPAN_COMPRESSION
 =
SICSLOWPAN_COMPRESSION_HC06


1813 #i‡
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 > 0

1814 
addr_c⁄ãxts
[0].
u£d
 = 1;

1815 
addr_c⁄ãxts
[0].
numbî
 = 0;

1816 #ifde‡
SICSLOWPAN_CONF_ADDR_CONTEXT_0


1817 
SICSLOWPAN_CONF_ADDR_CONTEXT_0
;

1819 
addr_c⁄ãxts
[0].
¥efix
[0] = 0xaa;

1820 
addr_c⁄ãxts
[0].
¥efix
[1] = 0xaa;

1824 #i‡
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 > 1

1826 
i
;

1827 
i
 = 1; i < 
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
; i++) {

1828 #ifde‡
SICSLOWPAN_CONF_ADDR_CONTEXT_1


1829 i‡(
i
==1) {

1830 
addr_c⁄ãxts
[1].
u£d
 = 1;

1831 
addr_c⁄ãxts
[1].
numbî
 = 1;

1832 
SICSLOWPAN_CONF_ADDR_CONTEXT_1
;

1833 #ifde‡
SICSLOWPAN_CONF_ADDR_CONTEXT_2


1834 } i‡(
i
==2) {

1835 
addr_c⁄ãxts
[2].
u£d
 = 1;

1836 
addr_c⁄ãxts
[2].
numbî
 = 2;

1837 
SICSLOWPAN_CONF_ADDR_CONTEXT_2
;

1840 
addr_c⁄ãxts
[
i
].
u£d
 = 0;

1843 
addr_c⁄ãxts
[
i
].
u£d
 = 0;

1851 
	}
}

1853 c⁄° 
√tw‹k_drivî
 
	gsic¶ow∑n_drivî
 = {

1855 
sic¶ow∑n_öô
,

1856 
öput


	@core/net/sicslowpan.h

49 #i‚de‡
__SICSLOWPAN_H__


50 
	#__SICSLOWPAN_H__


	)

51 
	~"√t/uù.h
"

52 
	~"√t/mac/mac.h
"

59 
	#SICSLOWPAN_UDP_4_BIT_PORT_MIN
 0xF0B0

	)

60 
	#SICSLOWPAN_UDP_4_BIT_PORT_MAX
 0xF0BF

	)

61 
	#SICSLOWPAN_UDP_8_BIT_PORT_MIN
 0xF000

	)

62 
	#SICSLOWPAN_UDP_8_BIT_PORT_MAX
 0xF0FF

	)

70 
	#SICSLOWPAN_COMPRESSION_IPV6
 0

	)

71 
	#SICSLOWPAN_COMPRESSION_HC1
 1

	)

72 
	#SICSLOWPAN_COMPRESSION_HC06
 2

	)

79 
	#SICSLOWPAN_DISPATCH_IPV6
 0x41

	)

80 
	#SICSLOWPAN_DISPATCH_HC1
 0x42

	)

81 
	#SICSLOWPAN_DISPATCH_IPHC
 0x60

	)

82 
	#SICSLOWPAN_DISPATCH_FRAG1
 0xc0

	)

83 
	#SICSLOWPAN_DISPATCH_FRAGN
 0xe0

	)

89 
	#SICSLOWPAN_HC1_NH_UDP
 0x02

	)

90 
	#SICSLOWPAN_HC1_NH_TCP
 0x06

	)

91 
	#SICSLOWPAN_HC1_NH_ICMP6
 0x04

	)

97 
	#SICSLOWPAN_HC_UDP_ALL_C
 0xE0

	)

108 
	#SICSLOWPAN_IPHC_FL_C
 0x10

	)

109 
	#SICSLOWPAN_IPHC_TC_C
 0x08

	)

110 
	#SICSLOWPAN_IPHC_NH_C
 0x04

	)

111 
	#SICSLOWPAN_IPHC_TTL_1
 0x01

	)

112 
	#SICSLOWPAN_IPHC_TTL_64
 0x02

	)

113 
	#SICSLOWPAN_IPHC_TTL_255
 0x03

	)

114 
	#SICSLOWPAN_IPHC_TTL_I
 0x00

	)

118 
	#SICSLOWPAN_IPHC_CID
 0x80

	)

120 
	#SICSLOWPAN_IPHC_SAC
 0x40

	)

121 
	#SICSLOWPAN_IPHC_SAM_00
 0x00

	)

122 
	#SICSLOWPAN_IPHC_SAM_01
 0x10

	)

123 
	#SICSLOWPAN_IPHC_SAM_10
 0x20

	)

124 
	#SICSLOWPAN_IPHC_SAM_11
 0x30

	)

126 
	#SICSLOWPAN_IPHC_SAM_BIT
 4

	)

128 
	#SICSLOWPAN_IPHC_M
 0x08

	)

129 
	#SICSLOWPAN_IPHC_DAC
 0x04

	)

130 
	#SICSLOWPAN_IPHC_DAM_00
 0x00

	)

131 
	#SICSLOWPAN_IPHC_DAM_01
 0x01

	)

132 
	#SICSLOWPAN_IPHC_DAM_10
 0x02

	)

133 
	#SICSLOWPAN_IPHC_DAM_11
 0x03

	)

135 
	#SICSLOWPAN_IPHC_DAM_BIT
 0

	)

138 
	#SICSLOWPAN_IPHC_ADDR_CONTEXT_LL
 0

	)

140 
	#SICSLOWPAN_IPHC_MCAST_RANGE
 0xA0

	)

144 
	#SICSLOWPAN_NHC_MASK
 0xF0

	)

145 
	#SICSLOWPAN_NHC_EXT_HDR
 0xE0

	)

155 
	#SICSLOWPAN_NHC_UDP_MASK
 0xF8

	)

156 
	#SICSLOWPAN_NHC_UDP_ID
 0xF0

	)

157 
	#SICSLOWPAN_NHC_UDP_CHECKSUMC
 0x04

	)

158 
	#SICSLOWPAN_NHC_UDP_CHECKSUMI
 0x00

	)

160 
	#SICSLOWPAN_NHC_UDP_CS_P_00
 0xF0

	)

161 
	#SICSLOWPAN_NHC_UDP_CS_P_01
 0xF1

	)

162 
	#SICSLOWPAN_NHC_UDP_CS_P_10
 0xF2

	)

163 
	#SICSLOWPAN_NHC_UDP_CS_P_11
 0xF3

	)

172 
	#SICSLOWPAN_IPV6_HDR_LEN
 1

	)

173 
	#SICSLOWPAN_HC1_HDR_LEN
 3

	)

174 
	#SICSLOWPAN_HC1_HC_UDP_HDR_LEN
 7

	)

175 
	#SICSLOWPAN_FRAG1_HDR_LEN
 4

	)

176 
	#SICSLOWPAN_FRAGN_HDR_LEN
 5

	)

221 
	ssic¶ow∑n_addr_c⁄ãxt
 {

222 
uöt8_t
 
	mu£d
;

223 
uöt8_t
 
	mnumbî
;

224 
uöt8_t
 
	m¥efix
[8];

239 
	#sic¶ow∑n_is_iid_16_bô_com¥esßbÀ
(
a
) \

240 ((((
a
)->
u16
[4]) == 0) && \

241 (((
a
)->
u8
[10]) == 0)&& \

242 (((
a
)->
u8
[11]) == 0xff)&& \

243 (((
a
)->
u8
[12]) == 0xfe)&& \

244 (((
a
)->
u8
[13]Ë=0))

	)

253 
	#sic¶ow∑n_is_mˇ°_addr_decom¥esßbÀ
(
a
) \

254 (((*
a
 & 0x01) == 0) && \

255 ((*(
a
 + 1Ë=0x01Ë|| (*◊ + 1Ë=0x02)))

	)

263 
	#sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ
(
a
) \

264 ((((
a
)->
u16
[1]) == 0) && \

265 (((
a
)->
u16
[2]) == 0) && \

266 (((
a
)->
u16
[3]) == 0) && \

267 (((
a
)->
u16
[4]) == 0) && \

268 (((
a
)->
u16
[5]) == 0) && \

269 (((
a
)->
u16
[6]) == 0) && \

270 (((
a
)->
u8
[14]) == 0) && \

271 ((((
a
)->
u8
[15]Ë=1Ë|| ((◊)->u8[15]Ë=2)))

	)

274 
	#sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ48
(
a
) \

275 ((((
a
)->
u16
[1]) == 0) && \

276 (((
a
)->
u16
[2]) == 0) && \

277 (((
a
)->
u16
[3]) == 0) && \

278 (((
a
)->
u16
[4]) == 0) && \

279 (((
a
)->
u8
[10]Ë=0))

	)

282 
	#sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ32
(
a
) \

283 ((((
a
)->
u16
[1]) == 0) && \

284 (((
a
)->
u16
[2]) == 0) && \

285 (((
a
)->
u16
[3]) == 0) && \

286 (((
a
)->
u16
[4]) == 0) && \

287 (((
a
)->
u16
[5]) == 0) && \

288 (((
a
)->
u8
[12]Ë=0))

	)

291 
	#sic¶ow∑n_is_mˇ°_addr_com¥esßbÀ8
(
a
) \

292 ((((
a
)->
u8
[1]) == 2) && \

293 (((
a
)->
u16
[1]) == 0) && \

294 (((
a
)->
u16
[2]) == 0) && \

295 (((
a
)->
u16
[3]) == 0) && \

296 (((
a
)->
u16
[4]) == 0) && \

297 (((
a
)->
u16
[5]) == 0) && \

298 (((
a
)->
u16
[6]) == 0) && \

299 (((
a
)->
u8
[14]Ë=0))

	)

308 
	ssic¶ow∑n_nh_com¥ess‹
 {

309 (* 
	mis_com¥esßbÀ
)(
uöt8_t
 
	m√xt_hódî
);

313 (* 
	mcom¥ess
)(
uöt8_t
 *
	mcom¥es£d
, uöt8_à*
	muncom¥es£d_Àn
);

317 (* 
	muncom¥ess
)(
uöt8_t
 *
	mcom¥es£d
, uöt8_à*
	mlow∑nbuf
, uöt8_à*
	muncom¥es£d_Àn
);

322 c⁄° 
√tw‹k_drivî
 
sic¶ow∑n_drivî
;

	@core/net/tcpip.c

44 
	~"t˝ù.h
"

45 
	~"uù.h
"

46 
	~"√t°ack.h
"

48 #i‡
UIP_CONF_IPV6


49 
	~"√t/uù-nd6.h
"

50 
	~"√t/uù-ds6.h
"

51 
	~"√t/uù-icmp6.h
"

54 
	~<°rög.h
>

56 
	#DEBUG
 
DEBUG_NONE


	)

59 #i‡
UIP_LOGGING


60 
	~<°dio.h
>

61 
uù_log
(*
msg
);

62 
	#UIP_LOG
(
m
Ë
	`uù_log
(m)

	)

64 
	#UIP_LOG
(
m
)

	)

67 
	#UIP_ICMP_BUF
 ((
uù_icmp_hdr
 *)&
uù_buf
[
UIP_LLIPH_LEN
 + 
uù_ext_Àn
])

	)

68 
	#UIP_IP_BUF
 ((
uù_ù_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
])

	)

69 
	#UIP_TCP_BUF
 ((
uù_t˝ù_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
])

	)

71 #ifde‡
UIP_FALLBACK_INTERFACE


72 
uù_ÁŒback_öãrÁ˚
 
UIP_FALLBACK_INTERFACE
;

75 #i‡
UIP_CONF_IPV6_RPL


76 
	~"Ωl/Ωl.h
"

82 
¥o˚ss_evít_t
 
	gt˝ù_icmp6_evít
;

88 #i‡
UIP_CONF_IPV6
 && 
UIP_CONF_IPV6_REASSEMBLY


90 
ëimî
 
uù_ªass_timî
;

93 #i‡
UIP_TCP


97 
	sli°íp‹t
 {

98 
uöt16_t
 
	mp‹t
;

99 
¥o˚ss
 *
	mp
;

102 
	söã∫Æ_°©e
 {

103 
li°íp‹t
 
	mli°íp‹ts
[
UIP_LISTENPORTS
];

104 
¥o˚ss
 *
	mp
;

105 } 
	gs
;

109 
	mTCP_POLL
,

110 
	mUDP_POLL
,

111 
	mPACKET_INPUT


115 #i‡
UIP_CONF_IPV6


117 
	$uöt8_t
 (* 
ouçutfunc
)(
uù_Œaddr_t
 *
a
);

119 
uöt8_t


120 
	$t˝ù_ouçut
(
uù_Œaddr_t
 *
a
)

122 
ªt
;

123 if(
ouçutfunc
 !
NULL
) {

124 
ªt
 = 
	`ouçutfunc
(
a
);

125  
ªt
;

127 
	`UIP_LOG
("tcpip_output: UseÅcpip_set_outputfunc()Åo setán output function");

129 
	}
}

132 
t˝ù_£t_ouçutfunc
(
	$uöt8_t
 (*
f
)(
uù_Œaddr_t
 *))

134 
ouçutfunc
 = 
f
;

135 
	}
}

138 
	$uöt8_t
 (* 
ouçutfunc
)();

139 
uöt8_t


140 
	$t˝ù_ouçut
()

142 if(
ouçutfunc
 !
NULL
) {

143  
	`ouçutfunc
();

145 
	`UIP_LOG
("tcpip_output: UseÅcpip_set_outputfunc()Åo setán output function");

147 
	}
}

150 
t˝ù_£t_ouçutfunc
(
	$uöt8_t
 (*
f
)())

152 
ouçutfunc
 = 
f
;

153 
	}
}

156 #i‡
UIP_CONF_IP_FORWARD


157 
	gt˝ù_is_f‹w¨dög
;

166 
	$°¨t_≥riodic_t˝_timî
()

168 if(
	`ëimî_expúed
(&
≥riodic
)) {

169 
	`ëimî_ª°¨t
(&
≥riodic
);

171 
	}
}

174 
	$check_f‹_t˝_syn
()

181 
	#TCP_SYN
 0x02

	)

182 if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_TCP
 &&

183 (
UIP_TCP_BUF
->
Êags
 & 
TCP_SYN
) == TCP_SYN) {

184 
	`°¨t_≥riodic_t˝_timî
();

186 
	}
}

191 
	$∑ckë_öput
()

193 #i‡
UIP_CONF_IP_FORWARD


194 if(
uù_Àn
 > 0) {

195 
t˝ù_is_f‹w¨dög
 = 1;

196 if(
	`uù_fw_f‹w¨d
(Ë=
UIP_FW_LOCAL
) {

197 
t˝ù_is_f‹w¨dög
 = 0;

198 
	`check_f‹_t˝_syn
();

199 
	`uù_öput
();

200 if(
uù_Àn
 > 0) {

201 #i‡
UIP_CONF_TCP_SPLIT


202 
	`uù_•lô_ouçut
();

204 #i‡
UIP_CONF_IPV6


205 
	`t˝ù_ùv6_ouçut
();

207 
	`PRINTF
("t˝ùÖackë_öpuàf‹w¨d ouçuàÀ¿%d\n", 
uù_Àn
);

208 
	`t˝ù_ouçut
();

213 
t˝ù_is_f‹w¨dög
 = 0;

216 if(
uù_Àn
 > 0) {

218 
	`uù_öput
();

219 if(
uù_Àn
 > 0) {

220 #i‡
UIP_CONF_TCP_SPLIT


221 
	`uù_•lô_ouçut
();

223 #i‡
UIP_CONF_IPV6


224 
	`t˝ù_ùv6_ouçut
();

226 
	`PRINTF
("t˝ùÖackë_öpuàouçuàÀ¿%d\n", 
uù_Àn
);

227 
	`t˝ù_ouçut
();

233 
	}
}

235 #i‡
UIP_TCP


236 #i‡
UIP_ACTIVE_OPEN


237 
uù_c⁄n
 *

238 
	$t˝_c⁄√˘
(
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
p‹t
, *
≠p°©e
)

240 
uù_c⁄n
 *
c
;

242 
c
 = 
	`uù_c⁄√˘
(
rùaddr
, 
p‹t
);

243 if(
c
 =
NULL
) {

244  
NULL
;

247 
c
->
≠p°©e
.
p
 = 
	`PROCESS_CURRENT
();

248 
c
->
≠p°©e
.
°©e
 =áppstate;

250 
	`t˝ù_pﬁl_t˝
(
c
);

252  
c
;

253 
	}
}

257 
	$t˝_u∆i°í
(
uöt16_t
 
p‹t
)

259 
i
;

260 
li°íp‹t
 *
l
;

262 
l
 = 
s
.
li°íp‹ts
;

263 
i
 = 0; i < 
UIP_LISTENPORTS
; ++i) {

264 if(
l
->
p‹t
 ==Öort &&

265 
l
->
p
 =
	`PROCESS_CURRENT
()) {

266 
l
->
p‹t
 = 0;

267 
	`uù_u∆i°í
(
p‹t
);

270 ++
l
;

272 
	}
}

275 
	$t˝_li°í
(
uöt16_t
 
p‹t
)

277 
i
;

278 
li°íp‹t
 *
l
;

280 
l
 = 
s
.
li°íp‹ts
;

281 
i
 = 0; i < 
UIP_LISTENPORTS
; ++i) {

282 if(
l
->
p‹t
 == 0) {

283 
l
->
p‹t
 =Öort;

284 
l
->
p
 = 
	`PROCESS_CURRENT
();

285 
	`uù_li°í
(
p‹t
);

288 ++
l
;

290 
	}
}

293 
	$t˝_©èch
(
uù_c⁄n
 *
c⁄n
,

294 *
≠p°©e
)

296 
uù_t˝_≠p°©e_t
 *
s
;

298 
s
 = &
c⁄n
->
≠p°©e
;

299 
s
->
p
 = 
	`PROCESS_CURRENT
();

300 
s
->
°©e
 = 
≠p°©e
;

301 
	}
}

305 #i‡
UIP_UDP


307 
	$udp_©èch
(
uù_udp_c⁄n
 *
c⁄n
,

308 *
≠p°©e
)

310 
uù_udp_≠p°©e_t
 *
s
;

312 
s
 = &
c⁄n
->
≠p°©e
;

313 
s
->
p
 = 
	`PROCESS_CURRENT
();

314 
s
->
°©e
 = 
≠p°©e
;

315 
	}
}

317 
uù_udp_c⁄n
 *

318 
	$udp_√w
(c⁄° 
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
p‹t
, *
≠p°©e
)

320 
uù_udp_c⁄n
 *
c
;

321 
uù_udp_≠p°©e_t
 *
s
;

323 
c
 = 
	`uù_udp_√w
(
rùaddr
, 
p‹t
);

324 if(
c
 =
NULL
) {

325  
NULL
;

328 
s
 = &
c
->
≠p°©e
;

329 
s
->
p
 = 
	`PROCESS_CURRENT
();

330 
s
->
°©e
 = 
≠p°©e
;

332  
c
;

333 
	}
}

335 
uù_udp_c⁄n
 *

336 
	$udp_brﬂdˇ°_√w
(
uöt16_t
 
p‹t
, *
≠p°©e
)

338 
uù_ùaddr_t
 
addr
;

339 
uù_udp_c⁄n
 *
c⁄n
;

341 #i‡
UIP_CONF_IPV6


342 
	`uù_¸óã_lökloˇl_Æ odes_mˇ°
(&
addr
);

344 
	`uù_ùaddr
(&
addr
, 255,255,255,255);

346 
c⁄n
 = 
	`udp_√w
(&
addr
, 
p‹t
, 
≠p°©e
);

347 if(
c⁄n
 !
NULL
) {

348 
	`udp_böd
(
c⁄n
, 
p‹t
);

350  
c⁄n
;

351 
	}
}

355 
uöt8_t


356 
	$icmp6_√w
(*
≠p°©e
) {

357 if(
uù_icmp6_c⁄ns
.
≠p°©e
.
p
 =
PROCESS_NONE
) {

358 
uù_icmp6_c⁄ns
.
≠p°©e
.
p
 = 
	`PROCESS_CURRENT
();

359 
uù_icmp6_c⁄ns
.
≠p°©e
.
°©e
 =áppstate;

363 
	}
}

366 
	$t˝ù_icmp6_ˇŒ
(
uöt8_t
 
ty≥
)

368 if(
uù_icmp6_c⁄ns
.
≠p°©e
.
p
 !
PROCESS_NONE
) {

371 
	`¥o˚ss_po°_synch
(
uù_icmp6_c⁄ns
.
≠p°©e
.
p
, 
t˝ù_icmp6_evít
, &
ty≥
);

374 
	}
}

381 
	$evíth™dÀr
(
¥o˚ss_evít_t
 
ev
, 
¥o˚ss_d©a_t
 
d©a
)

383 #i‡
UIP_TCP


384 
i
;

385 
li°íp‹t
 *
l
;

387 
¥o˚ss
 *
p
;

389 
ev
) {

390 
PROCESS_EVENT_EXITED
:

396 
p
 = (
¥o˚ss
 *)
d©a
;

397 #i‡
UIP_TCP


398 
l
 = 
s
.
li°íp‹ts
;

399 
i
 = 0; i < 
UIP_LISTENPORTS
; ++i) {

400 if(
l
->
p
 ==Ö) {

401 
	`uù_u∆i°í
(
l
->
p‹t
);

402 
l
->
p‹t
 = 0;

403 
l
->
p
 = 
PROCESS_NONE
;

405 ++
l
;

409 
uù_c⁄n
 *
˝å
;

411 
˝å
 = &
uù_c⁄ns
[0]; c±∏< &uù_c⁄ns[
UIP_CONNS
]; ++cptr) {

412 if(
˝å
->
≠p°©e
.
p
 ==Ö) {

413 
˝å
->
≠p°©e
.
p
 = 
PROCESS_NONE
;

414 
˝å
->
t˝°©eÊags
 = 
UIP_CLOSED
;

419 #i‡
UIP_UDP


421 
uù_udp_c⁄n
 *
˝å
;

423 
˝å
 = &
uù_udp_c⁄ns
[0];

424 
˝å
 < &
uù_udp_c⁄ns
[
UIP_UDP_CONNS
]; ++cptr) {

425 if(
˝å
->
≠p°©e
.
p
 ==Ö) {

426 
˝å
->
Õ‹t
 = 0;

433 
PROCESS_EVENT_TIMER
:

438 if(
d©a
 =&
≥riodic
 &&

439 
	`ëimî_expúed
(&
≥riodic
)) {

440 #i‡
UIP_TCP


441 
i
 = 0; i < 
UIP_CONNS
; ++i) {

442 if(
	`uù_c⁄n_a˘ive
(
i
)) {

445 
	`ëimî_ª°¨t
(&
≥riodic
);

446 
	`uù_≥riodic
(
i
);

447 #i‡
UIP_CONF_IPV6


448 
	`t˝ù_ùv6_ouçut
();

450 if(
uù_Àn
 > 0) {

451 
	`PRINTF
("t˝ù_ouçuà‰omÖîiodi¯À¿%d\n", 
uù_Àn
);

452 
	`t˝ù_ouçut
();

453 
	`PRINTF
("t˝ù_ouçuàa·îÖîiodi¯À¿%d\n", 
uù_Àn
);

459 #i‡
UIP_CONF_IP_FORWARD


460 
	`uù_fw_≥riodic
();

464 #i‡
UIP_CONF_IPV6


465 #i‡
UIP_CONF_IPV6_REASSEMBLY


469 if(
d©a
 =&
uù_ªass_timî
 &&

470 
	`ëimî_expúed
(&
uù_ªass_timî
)) {

471 
	`uù_ªass_ovî
();

472 
	`t˝ù_ùv6_ouçut
();

484 #i‡!
UIP_CONF_ROUTER


485 if(
d©a
 =&
uù_ds6_timî_rs
 &&

486 
	`ëimî_expúed
(&
uù_ds6_timî_rs
)){

487 
	`uù_ds6_£nd_rs
();

488 
	`t˝ù_ùv6_ouçut
();

491 if(
d©a
 =&
uù_ds6_timî_≥riodic
 &&

492 
	`ëimî_expúed
(&
uù_ds6_timî_≥riodic
)){

493 
	`uù_ds6_≥riodic
();

494 
	`t˝ù_ùv6_ouçut
();

500 #i‡
UIP_TCP


501 
TCP_POLL
:

502 if(
d©a
 !
NULL
) {

503 
	`uù_pﬁl_c⁄n
(
d©a
);

504 #i‡
UIP_CONF_IPV6


505 
	`t˝ù_ùv6_ouçut
();

507 if(
uù_Àn
 > 0) {

508 
	`PRINTF
("t˝ù_ouçuà‰omÅ˝Öﬁ»À¿%d\n", 
uù_Àn
);

509 
	`t˝ù_ouçut
();

513 
	`°¨t_≥riodic_t˝_timî
();

517 #i‡
UIP_UDP


518 
UDP_POLL
:

519 if(
d©a
 !
NULL
) {

520 
	`uù_udp_≥riodic_c⁄n
(
d©a
);

521 #i‡
UIP_CONF_IPV6


522 
	`t˝ù_ùv6_ouçut
();

524 if(
uù_Àn
 > 0) {

525 
	`t˝ù_ouçut
();

532 
PACKET_INPUT
:

533 
	`∑ckë_öput
();

536 
	}
}

540 
	$t˝ù_öput
()

543 
uù_Àn
 = 0;

544 #i‡
UIP_CONF_IPV6


545 
uù_ext_Àn
 = 0;

547 
	}
}

549 #i‡
UIP_CONF_IPV6


551 
	$t˝ù_ùv6_ouçut
()

553 
uù_ds6_nbr_t
 *
nbr
 = 
NULL
;

554 
uù_ùaddr_t
 *
√xth›
;

556 if(
uù_Àn
 == 0) {

560 if(
uù_Àn
 > 
UIP_LINK_MTU
) {

561 
	`UIP_LOG
("tcpip_ipv6_output: PacketÅo big");

562 
uù_Àn
 = 0;

566 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
de°ùaddr
)){

567 
	`UIP_LOG
("tcpip_ipv6_output: Destinationáddress unspecified");

568 
uù_Àn
 = 0;

572 if(!
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
)) {

574 
nbr
 = 
NULL
;

575 if(
	`uù_ds6_is_addr_⁄lök
(&
UIP_IP_BUF
->
de°ùaddr
)){

576 
√xth›
 = &
UIP_IP_BUF
->
de°ùaddr
;

578 
uù_ds6_rouã_t
* 
lo¸t
;

579 
lo¸t
 = 
	`uù_ds6_rouã_lookup
(&
UIP_IP_BUF
->
de°ùaddr
);

580 if(
lo¸t
 =
NULL
) {

581 if((
√xth›
 = 
	`uù_ds6_de‰t_choo£
()Ë=
NULL
) {

582 #ifde‡
UIP_FALLBACK_INTERFACE


583 
	`PRINTF
("FALLBACK:ÑemovingÉxt hdrs & settingÖroto %d %d\n",

584 
uù_ext_Àn
, *((
uöt8_t
 *)
UIP_IP_BUF
 + 40));

585 if(
uù_ext_Àn
 > 0) {

586 
	`ªmove_ext_hdr
();

587 
uöt8_t
 
¥Ÿo
 = *((uöt8_à*)
UIP_IP_BUF
 + 40);

588 
	`ªmove_ext_hdr
();

590 
UIP_IP_BUF
->
¥Ÿo
 =Öroto;

592 
UIP_FALLBACK_INTERFACE
.
	`ouçut
();

596 
uù_Àn
 = 0;

600 
√xth›
 = &
lo¸t
->nexthop;

604 #i‡
UIP_CONF_IPV6_RPL


605 if(
	`Ωl_upd©e_hódî_föÆ
(
√xth›
)) {

606 
uù_Àn
 = 0;

610 if((
nbr
 = 
	`uù_ds6_nbr_lookup
(
√xth›
)Ë=
NULL
) {

611 if((
nbr
 = 
	`uù_ds6_nbr_add
(
√xth›
, 
NULL
, 0, 
NBR_INCOMPLETE
)) == NULL) {

612 
uù_Àn
 = 0;

615 #i‡
UIP_CONF_IPV6_QUEUE_PKT


617 if(
	`uù_∑ckëqueue_Æloc
(&
nbr
->
∑ckëh™dÀ
, 
UIP_DS6_NBR_PACKET_LIFETIME
Ë!
NULL
) {

618 
	`mem˝y
(
	`uù_∑ckëqueue_buf
(&
nbr
->
∑ckëh™dÀ
), 
UIP_IP_BUF
, 
uù_Àn
);

619 
	`uù_∑ckëqueue_£t_buÊí
(&
nbr
->
∑ckëh™dÀ
, 
uù_Àn
);

628 if(
	`uù_ds6_is_my_addr
(&
UIP_IP_BUF
->
§cùaddr
)){

629 
	`uù_nd6_ns_ouçut
(&
UIP_IP_BUF
->
§cùaddr
, 
NULL
, &
nbr
->
ùaddr
);

631 
	`uù_nd6_ns_ouçut
(
NULL
, NULL, &
nbr
->
ùaddr
);

634 
	`°imî_£t
(&
nbr
->
£ndns
, 
uù_ds6_if
.
ªå™s_timî
 / 1000);

635 
nbr
->
nscou¡
 = 1;

638 if(
nbr
->
°©e
 =
NBR_INCOMPLETE
) {

640 #i‡
UIP_CONF_IPV6_QUEUE_PKT


643 if(
	`uù_∑ckëqueue_Æloc
(&
nbr
->
∑ckëh™dÀ
, 
UIP_DS6_NBR_PACKET_LIFETIME
Ë!
NULL
) {

644 
	`mem˝y
(
	`uù_∑ckëqueue_buf
(&
nbr
->
∑ckëh™dÀ
), 
UIP_IP_BUF
, 
uù_Àn
);

645 
	`uù_∑ckëqueue_£t_buÊí
(&
nbr
->
∑ckëh™dÀ
, 
uù_Àn
);

648 
uù_Àn
 = 0;

653 if(
nbr
->
°©e
 =
NBR_STALE
) {

654 
nbr
->
°©e
 = 
NBR_DELAY
;

655 
	`°imî_£t
(&
nbr
->
ªachabÀ
, 
UIP_ND6_DELAY_FIRST_PROBE_TIME
);

656 
nbr
->
nscou¡
 = 0;

660 
	`t˝ù_ouçut
(&
nbr
->
Œaddr
);

662 #i‡
UIP_CONF_IPV6_QUEUE_PKT


669 if(
	`uù_∑ckëqueue_buÊí
(&
nbr
->
∑ckëh™dÀ
) != 0) {

670 
uù_Àn
 = 
	`uù_∑ckëqueue_buÊí
(&
nbr
->
∑ckëh™dÀ
);

671 
	`mem˝y
(
UIP_IP_BUF
, 
	`uù_∑ckëqueue_buf
(&
nbr
->
∑ckëh™dÀ
), 
uù_Àn
);

672 
	`uù_∑ckëqueue_‰ì
(&
nbr
->
∑ckëh™dÀ
);

673 
	`t˝ù_ouçut
(&
nbr
->
Œaddr
);

677 
uù_Àn
 = 0;

683 
	`t˝ù_ouçut
(
NULL
);

684 
uù_Àn
 = 0;

685 
uù_ext_Àn
 = 0;

686 
	}
}

689 #i‡
UIP_UDP


691 
	$t˝ù_pﬁl_udp
(
uù_udp_c⁄n
 *
c⁄n
)

693 
	`¥o˚ss_po°
(&
t˝ù_¥o˚ss
, 
UDP_POLL
, 
c⁄n
);

694 
	}
}

697 #i‡
UIP_TCP


699 
	$t˝ù_pﬁl_t˝
(
uù_c⁄n
 *
c⁄n
)

701 
	`¥o˚ss_po°
(&
t˝ù_¥o˚ss
, 
TCP_POLL
, 
c⁄n
);

702 
	}
}

708 
	$t˝ù_uùˇŒ
()

710 
uù_udp_≠p°©e_t
 *
ts
;

712 #i‡
UIP_UDP


713 if(
uù_c⁄n
 !
NULL
) {

714 
ts
 = &
uù_c⁄n
->
≠p°©e
;

716 
ts
 = &
uù_udp_c⁄n
->
≠p°©e
;

719 
ts
 = &
uù_c⁄n
->
≠p°©e
;

722 #i‡
UIP_TCP


724 
i
;

725 
li°íp‹t
 *
l
;

729 if(
	`uù_c⁄√˘ed
()) {

730 
l
 = &
s
.
li°íp‹ts
[0];

731 
i
 = 0; i < 
UIP_LISTENPORTS
; ++i) {

732 if(
l
->
p‹t
 =
uù_c⁄n
->
Õ‹t
 &&

733 
l
->
p
 !
PROCESS_NONE
) {

734 
ts
->
p
 = 
l
->p;

735 
ts
->
°©e
 = 
NULL
;

738 ++
l
;

742 
	`°¨t_≥riodic_t˝_timî
();

747 if(
ts
->
p
 !
NULL
) {

748 
	`¥o˚ss_po°_synch
(
ts
->
p
, 
t˝ù_evít
,Ås->
°©e
);

750 
	}
}

755 
	$PROCESS_THREAD
(
t˝ù_¥o˚ss
, 
ev
, 
d©a
)

757 
	`PROCESS_BEGIN
();

759 #i‡
UIP_TCP


761 
i
;

763 
i
 = 0; i < 
UIP_LISTENPORTS
; ++i) {

764 
s
.
li°íp‹ts
[
i
].
p‹t
 = 0;

766 
s
.
p
 = 
	`PROCESS_CURRENT
();

770 
t˝ù_evít
 = 
	`¥o˚ss_Æloc_evít
();

771 #i‡
UIP_CONF_ICMP6


772 
t˝ù_icmp6_evít
 = 
	`¥o˚ss_Æloc_evít
();

774 
	`ëimî_£t
(&
≥riodic
, 
CLOCK_SECOND
 / 2);

776 
	`uù_öô
();

777 #ifde‡
UIP_FALLBACK_INTERFACE


778 
UIP_FALLBACK_INTERFACE
.
	`öô
();

781 #i‡
UIP_CONF_IPV6_RPL


782 
	`Ωl_öô
();

786 
	`PROCESS_YIELD
();

787 
	`evíth™dÀr
(
ev
, 
d©a
);

790 
	`PROCESS_END
();

791 
	}
}

	@core/net/tcpip.h

67 #i‚de‡
__TCPIP_H__


68 
	#__TCPIP_H__


	)

70 
	~"c⁄tiki.h
"

72 
	guù_c⁄n
;

74 
	st˝ù_uù°©e
 {

75 
¥o˚ss
 *
	mp
;

76 *
	m°©e
;

79 
	#UIP_APPCALL
 
t˝ù_uùˇŒ


	)

80 
	#UIP_UDP_APPCALL
 
t˝ù_uùˇŒ


	)

81 
	#UIP_ICMP6_APPCALL
 
t˝ù_icmp6_ˇŒ


	)

85 
t˝ù_uù°©e
 
	tuù_udp_≠p°©e_t
;

86 
t˝ù_uù°©e
 
	tuù_t˝_≠p°©e_t
;

87 
t˝ù_uù°©e
 
	tuù_icmp6_≠p°©e_t
;

88 
	~"√t/uù.h
"

89 
t˝ù_uùˇŒ
();

111 
CCIF
 
t˝_©èch
(
uù_c⁄n
 *
c⁄n
,

112 *
≠p°©e
);

113 
	#t˝_m¨kc⁄n
(
c⁄n
, 
≠p°©e
Ë
	`t˝_©èch
(c⁄n,áµ°©e)

	)

129 
CCIF
 
t˝_li°í
(
uöt16_t
 
p‹t
);

143 
CCIF
 
t˝_u∆i°í
(
uöt16_t
 
p‹t
);

168 
CCIF
 
uù_c⁄n
 *
t˝_c⁄√˘
(
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
p‹t
,

169 *
≠p°©e
);

182 
t˝ù_pﬁl_t˝
(
uù_c⁄n
 *
c⁄n
);

191 
	guù_udp_c⁄n
;

207 
udp_©èch
(
uù_udp_c⁄n
 *
c⁄n
,

208 *
≠p°©e
);

209 
	#udp_m¨kc⁄n
(
c⁄n
, 
≠p°©e
Ë
	`udp_©èch
(c⁄n,áµ°©e)

	)

229 
CCIF
 
uù_udp_c⁄n
 *
udp_√w
(c⁄° 
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
p‹t
,

230 *
≠p°©e
);

244 
uù_udp_c⁄n
 *
udp_brﬂdˇ°_√w
(
uöt16_t
 
p‹t
, *
≠p°©e
);

262 
	#udp_böd
(
c⁄n
, 
p‹t
Ë
	`uù_udp_böd
(c⁄n,Ö‹t)

	)

275 
CCIF
 
t˝ù_pﬁl_udp
(
uù_udp_c⁄n
 *
c⁄n
);

291 
CCIF
 
¥o˚ss_evít_t
 
t˝ù_icmp6_evít
;

305 
uöt8_t
 
icmp6_√w
(*
≠p°©e
);

312 
t˝ù_icmp6_ˇŒ
(
uöt8_t
 
ty≥
);

337 
CCIF
 
t˝ù_öput
();

343 #i‡
UIP_CONF_IPV6


344 
uöt8_t
 
t˝ù_ouçut
(
uù_Œaddr_t
 *);

345 
t˝ù_£t_ouçutfunc
(
	$uöt8_t
 (* 
f
)(
uù_Œaddr_t
 *));

347 
uöt8_t
 
	`t˝ù_ouçut
();

348 
	`t˝ù_£t_ouçutfunc
(
	$uöt8_t
 (* 
f
)());

354 #i‡
UIP_CONF_IPV6


355 
	`t˝ù_ùv6_ouçut
();

361 
t˝ù_do_f‹w¨dög
;

366 
t˝ù_is_f‹w¨dög
;

369 
	#t˝ù_£t_f‹w¨dög
(
f‹w¨dög
Ë
t˝ù_do_f‹w¨dög
 = (f‹w¨dög)

	)

	@core/net/uip-ds6.c

43 
	~<°rög.h
>

44 
	~<°dlib.h
>

45 
	~<°ddef.h
>

46 
	~"lib/øndom.h
"

47 
	~"√t/uù-nd6.h
"

48 
	~"√t/uù-ds6.h
"

51 
	$˛ock_time
()

54 
	}
}

56 
	#DEBUG
 
DEBUG_NONE


	)

59 #ifde‡
UIP_CONF_DS6_NEIGHBOR_STATE_CHANGED


60 
	#NEIGHBOR_STATE_CHANGED
(
n
Ë
	`UIP_CONF_DS6_NEIGHBOR_STATE_CHANGED
“)

	)

61 
NEIGHBOR_STATE_CHANGED
(
uù_ds6_nbr_t
 *
n
);

63 
	#NEIGHBOR_STATE_CHANGED
(
n
)

	)

68 #i‡
UIP_CONF_ROUTER


69 
°imî
 
	guù_ds6_timî_ø
;

70 #i‡
UIP_ND6_SEND_RA


71 
uöt8_t
 
	gøcou¡
;

72 
uöt16_t
 
	gønd_time
;

76 
uöt8_t
 
	grscou¡
;

81 
uù_ds6_√tif_t
 
	guù_ds6_if
;

82 
uù_ds6_nbr_t
 
	guù_ds6_nbr_ˇche
[
UIP_DS6_NBR_NB
];

83 
uù_ds6_de‰t_t
 
	guù_ds6_de‰t_li°
[
UIP_DS6_DEFRT_NB
];

84 
uù_ds6_¥efix_t
 
	guù_ds6_¥efix_li°
[
UIP_DS6_PREFIX_NB
];

85 
uù_ds6_rouã_t
 
	guù_ds6_routög_èbÀ
[
UIP_DS6_ROUTE_NB
];

88 
uöt8_t
 
	guù_ds6_addr_size
;

89 
uöt8_t
 
	guù_ds6_√tif_addr_li°_off£t
;

93 
uù_ùaddr_t
 
	gloc_fùaddr
;

96 
uù_ùaddr_t
 *
	glocùaddr
;

97 
uù_ds6_addr_t
 *
	gloˇddr
;

98 
uù_ds6_maddr_t
 *
	glocmaddr
;

99 
uù_ds6_Øddr_t
 *
	gloˇaddr
;

100 
uù_ds6_¥efix_t
 *
	glo˝ªfix
;

101 
uù_ds6_nbr_t
 *
	glo˙br
;

102 
uù_ds6_de‰t_t
 *
	glocde‰t
;

103 
uù_ds6_rouã_t
 *
	glo¸ouã
;

107 
	$uù_ds6_öô
()

109 
	`mem£t
(
uù_ds6_nbr_ˇche
, 0, (uip_ds6_nbr_cache));

110 
	`mem£t
(
uù_ds6_de‰t_li°
, 0, (uip_ds6_defrt_list));

111 
	`mem£t
(
uù_ds6_¥efix_li°
, 0, (uip_ds6_prefix_list));

112 
	`mem£t
(&
uù_ds6_if
, 0, (uip_ds6_if));

113 
	`mem£t
(
uù_ds6_routög_èbÀ
, 0, (uip_ds6_routing_table));

114 
uù_ds6_addr_size
 = (
uù_ds6_addr
);

115 
uù_ds6_√tif_addr_li°_off£t
 = 
	`off£tof
(
uù_ds6_√tif
, 
addr_li°
);

118 
uù_ds6_if
.
lök_mtu
 = 
UIP_LINK_MTU
;

119 
uù_ds6_if
.
cur_h›_limô
 = 
UIP_TTL
;

120 
uù_ds6_if
.
ba£_ªachabÀ_time
 = 
UIP_ND6_REACHABLE_TIME
;

121 
uù_ds6_if
.
ªachabÀ_time
 = 
	`uù_ds6_compuã_ªachabÀ_time
();

122 
uù_ds6_if
.
ªå™s_timî
 = 
UIP_ND6_RETRANS_TIMER
;

123 
uù_ds6_if
.
maxdadns
 = 
UIP_ND6_DEF_MAXDADNS
;

126 
	`uù_¸óã_lökloˇl_¥efix
(&
loc_fùaddr
);

127 #i‡
UIP_CONF_ROUTER


128 
	`uù_ds6_¥efix_add
(&
loc_fùaddr
, 
UIP_DEFAULT_PREFIX_LEN
, 0, 0, 0, 0);

130 
	`uù_ds6_¥efix_add
(&
loc_fùaddr
, 
UIP_DEFAULT_PREFIX_LEN
, 0);

132 
	`uù_ds6_£t_addr_iid
(&
loc_fùaddr
, &
uù_Œaddr
);

133 
	`uù_ds6_addr_add
(&
loc_fùaddr
, 0, 
ADDR_AUTOCONF
);

135 
	`uù_¸óã_lökloˇl_Æ odes_mˇ°
(&
loc_fùaddr
);

136 
	`uù_ds6_maddr_add
(&
loc_fùaddr
);

137 #i‡
UIP_CONF_ROUTER


138 
	`uù_¸óã_lökloˇl_ÆÃouãrs_mˇ°
(&
loc_fùaddr
);

139 
	`uù_ds6_maddr_add
(&
loc_fùaddr
);

140 #i‡
UIP_ND6_SEND_RA


141 
	`°imî_£t
(&
uù_ds6_timî_ø
, 2);

151 
	}
}

156 
	$uù_ds6_≥riodic
()

160 
loˇddr
 = 
uù_ds6_if
.
addr_li°
;

161 
loˇddr
 < 
uù_ds6_if
.
addr_li°
 + 
UIP_DS6_ADDR_NB
;Üocaddr++) {

162 if(
loˇddr
->
isu£d
) {

163 if((!
loˇddr
->
isöföôe
Ë&& (
	`°imî_expúed
(&loˇddr->
vli„time
))) {

164 
	`uù_ds6_addr_rm
(
loˇddr
);

165 #i‡
UIP_ND6_DEF_MAXDADNS
 > 0

166 } if((
loˇddr
->
°©e
 =
ADDR_TENTATIVE
)

167 && (
loˇddr
->
dadnscou¡
 <
uù_ds6_if
.
maxdadns
)

168 && (
	`timî_expúed
(&
loˇddr
->
dadtimî
))

169 && (
uù_Àn
 == 0)) {

170 
	`uù_ds6_dad
(
loˇddr
);

177 
locde‰t
 = 
uù_ds6_de‰t_li°
;

178 
locde‰t
 < 
uù_ds6_de‰t_li°
 + 
UIP_DS6_DEFRT_NB
;Üocdefrt++) {

179 if((
locde‰t
->
isu£d
Ë&& (!locde‰t->
isöföôe
) &&

180 (
	`°imî_expúed
(&(
locde‰t
->
li„time
)))) {

181 
	`uù_ds6_de‰t_rm
(
locde‰t
);

185 #i‡!
UIP_CONF_ROUTER


187 
lo˝ªfix
 = 
uù_ds6_¥efix_li°
;

188 
lo˝ªfix
 < 
uù_ds6_¥efix_li°
 + 
UIP_DS6_PREFIX_NB
;

189 
lo˝ªfix
++) {

190 if(
lo˝ªfix
->
isu£d
 && !lo˝ªfix->
isöföôe


191 && 
	`°imî_expúed
(&(
lo˝ªfix
->
vli„time
))) {

192 
	`uù_ds6_¥efix_rm
(
lo˝ªfix
);

198 
lo˙br
 = 
uù_ds6_nbr_ˇche
;

199 
lo˙br
 < 
uù_ds6_nbr_ˇche
 + 
UIP_DS6_NBR_NB
;

200 
lo˙br
++) {

201 if(
lo˙br
->
isu£d
) {

202 
lo˙br
->
°©e
) {

203 
NBR_INCOMPLETE
:

204 if(
lo˙br
->
nscou¡
 >
UIP_ND6_MAX_MULTICAST_SOLICIT
) {

205 
	`uù_ds6_nbr_rm
(
lo˙br
);

206 } if(
	`°imî_expúed
(&
lo˙br
->
£ndns
Ë&& (
uù_Àn
 == 0)) {

207 
lo˙br
->
nscou¡
++;

208 
	`uù_nd6_ns_ouçut
(
NULL
, NULL, &
lo˙br
->
ùaddr
);

209 
	`°imî_£t
(&
lo˙br
->
£ndns
, 
uù_ds6_if
.
ªå™s_timî
 / 1000);

212 
NBR_REACHABLE
:

213 if(
	`°imî_expúed
(&
lo˙br
->
ªachabÀ
)) {

214 
lo˙br
->
°©e
 = 
NBR_STALE
;

217 
NBR_DELAY
:

218 if(
	`°imî_expúed
(&
lo˙br
->
ªachabÀ
)) {

219 
lo˙br
->
°©e
 = 
NBR_PROBE
;

220 
lo˙br
->
nscou¡
 = 0;

221 
	`°imî_£t
(&
lo˙br
->
£ndns
, 0);

224 
NBR_PROBE
:

225 if(
lo˙br
->
nscou¡
 >
UIP_ND6_MAX_UNICAST_SOLICIT
) {

226 if((
locde‰t
 = 
	`uù_ds6_de‰t_lookup
(&
lo˙br
->
ùaddr
)Ë!
NULL
) {

227 i‡(!
locde‰t
->
isöföôe
) {

228 
	`uù_ds6_de‰t_rm
(
locde‰t
);

231 
	`uù_ds6_nbr_rm
(
lo˙br
);

232 } if(
	`°imî_expúed
(&
lo˙br
->
£ndns
Ë&& (
uù_Àn
 == 0)) {

233 
lo˙br
->
nscou¡
++;

234 
	`uù_nd6_ns_ouçut
(
NULL
, &
lo˙br
->
ùaddr
, &locnbr->ipaddr);

235 
	`°imî_£t
(&
lo˙br
->
£ndns
, 
uù_ds6_if
.
ªå™s_timî
 / 1000);

244 #i‡
UIP_CONF_ROUTER
 & 
UIP_ND6_SEND_RA


246 if(
	`°imî_expúed
(&
uù_ds6_timî_ø
Ë&& (
uù_Àn
 == 0)) {

247 
	`uù_ds6_£nd_ø_≥riodic
();

252 
	}
}

255 
uöt8_t


256 
	$uù_ds6_li°_lo›
(
uù_ds6_ñemít_t
 *
li°
, 
uöt8_t
 
size
,

257 
uöt16_t
 
ñemítsize
, 
uù_ùaddr_t
 *
ùaddr
,

258 
uöt8_t
 
ùaddæí
, 
uù_ds6_ñemít_t
 **
out_ñemít
)

260 
uù_ds6_ñemít_t
 *
ñemít
;

262 *
out_ñemít
 = 
NULL
;

264 
ñemít
 = 
li°
;

265 
ñemít
 <

266 (
uù_ds6_ñemít_t
 *)((
uöt8_t
 *)
li°
 + (
size
 * 
ñemítsize
));

267 
ñemít
 = (
uù_ds6_ñemít_t
 *)((
uöt8_t
 *ÎÀmíà+ 
ñemítsize
)) {

268 if(
ñemít
->
isu£d
) {

269 if(
	`uù_ùaddr_¥efixcmp
(&
ñemít
->
ùaddr
, i∑ddr, 
ùaddæí
)) {

270 *
out_ñemít
 = 
ñemít
;

271  
FOUND
;

274 *
out_ñemít
 = 
ñemít
;

278  *
out_ñemít
 !
NULL
 ? 
FREESPACE
 : 
NOSPACE
;

279 
	}
}

282 
uù_ds6_nbr_t
 *

283 
	$uù_ds6_nbr_add
(
uù_ùaddr_t
 *
ùaddr
, 
uù_Œaddr_t
 *
Œaddr
,

284 
uöt8_t
 
i§ouãr
, uöt8_à
°©e
)

286 
r
;

288 
r
 = 
uù_ds6_li°_lo›


289 ((
uù_ds6_ñemít_t
 *)
uù_ds6_nbr_ˇche
, 
UIP_DS6_NBR_NB
,

290 (
uù_ds6_nbr_t
), 
ùaddr
, 128,

291 (
uù_ds6_ñemít_t
 **)&
lo˙br
);

293 if(
r
 =
FREESPACE
) {

294 
lo˙br
->
isu£d
 = 1;

295 
	`uù_ùaddr_c›y
(&
lo˙br
->
ùaddr
, ipaddr);

296 if(
Œaddr
 !
NULL
) {

297 
	`mem˝y
(&
lo˙br
->
Œaddr
,Üœddr, 
UIP_LLADDR_LEN
);

299 
	`mem£t
(&
lo˙br
->
Œaddr
, 0, 
UIP_LLADDR_LEN
);

301 
lo˙br
->
i§ouãr
 = isrouter;

302 
lo˙br
->
°©e
 = state;

303 #i‡
UIP_CONF_IPV6_QUEUE_PKT


304 
	`uù_∑ckëqueue_√w
(&
lo˙br
->
∑ckëh™dÀ
);

307 
	`°imî_£t
(&
lo˙br
->
ªachabÀ
, 0);

308 
	`°imî_£t
(&
lo˙br
->
£ndns
, 0);

309 
lo˙br
->
nscou¡
 = 0;

310 
	`NEIGHBOR_STATE_CHANGED
(
lo˙br
);

312 
lo˙br
->
œ°_lookup
 = 
	`˛ock_time
();

313  
lo˙br
;

314 } if(
r
 =
NOSPACE
) {

317 
uù_ds6_nbr_t
 *
n
, *
ﬁde°
;

318 
˛ock_time_t
 
ﬁde°_time
;

320 
ﬁde°
 = 
NULL
;

321 
ﬁde°_time
 = 
	`˛ock_time
();

323 
n
 = 
uù_ds6_nbr_ˇche
;

324 
n
 < &
uù_ds6_nbr_ˇche
[
UIP_DS6_NBR_NB
];

325 
n
++) {

326 if(
n
->
isu£d
) {

327 if(
n
->
œ°_lookup
 < 
ﬁde°_time
) {

328 
ﬁde°
 = 
n
;

329 
ﬁde°_time
 = 
n
->
œ°_lookup
;

333 if(
ﬁde°
 !
NULL
) {

334 
	`uù_ds6_nbr_rm
(
ﬁde°
);

335  
	`uù_ds6_nbr_add
(
ùaddr
, 
Œaddr
, 
i§ouãr
, 
°©e
);

338  
NULL
;

339 
	}
}

343 
	$uù_ds6_nbr_rm
(
uù_ds6_nbr_t
 *
nbr
)

345 if(
nbr
 !
NULL
) {

346 
nbr
->
isu£d
 = 0;

347 #i‡
UIP_CONF_IPV6_QUEUE_PKT


348 
	`uù_∑ckëqueue_‰ì
(&
nbr
->
∑ckëh™dÀ
);

350 
	`NEIGHBOR_STATE_CHANGED
(
nbr
);

353 
	}
}

356 
uù_ds6_nbr_t
 *

357 
	$uù_ds6_nbr_lookup
(
uù_ùaddr_t
 *
ùaddr
)

359 if(
uù_ds6_li°_lo›


360 ((
uù_ds6_ñemít_t
 *)
uù_ds6_nbr_ˇche
, 
UIP_DS6_NBR_NB
,

361 (
uù_ds6_nbr_t
), 
ùaddr
, 128,

362 (
uù_ds6_ñemít_t
 **)&
lo˙br
Ë=
FOUND
) {

363 
lo˙br
->
œ°_lookup
 = 
	`˛ock_time
();

364  
lo˙br
;

366  
NULL
;

367 
	}
}

370 
uù_ds6_nbr_t
 *

371 
	$uù_ds6_nbr_Œ_lookup
(
uù_Œaddr_t
 *
Œaddr
)

373 
uù_ds6_nbr_t
 *
fö
;

375 
lo˙br
 = 
uù_ds6_nbr_ˇche
, 
fö
 =Üo˙b∏+ 
UIP_DS6_NBR_NB
;

376 
lo˙br
 < 
fö
;

377 ++
lo˙br
) {

378 if(
lo˙br
->
isu£d
) {

379 if(!
	`memcmp
(
Œaddr
, &
lo˙br
->Œaddr, 
UIP_LLADDR_LEN
)) {

380  
lo˙br
;

384  
NULL
;

385 
	}
}

388 
uù_ds6_de‰t_t
 *

389 
	$uù_ds6_de‰t_add
(
uù_ùaddr_t
 *
ùaddr
, 
öãrvÆ
)

391 if(
uù_ds6_li°_lo›


392 ((
uù_ds6_ñemít_t
 *)
uù_ds6_de‰t_li°
, 
UIP_DS6_DEFRT_NB
,

393 (
uù_ds6_de‰t_t
), 
ùaddr
, 128,

394 (
uù_ds6_ñemít_t
 **)&
locde‰t
Ë=
FREESPACE
) {

395 
locde‰t
->
isu£d
 = 1;

396 
	`uù_ùaddr_c›y
(&
locde‰t
->
ùaddr
, ipaddr);

397 if(
öãrvÆ
 != 0) {

398 
	`°imî_£t
(&
locde‰t
->
li„time
, 
öãrvÆ
);

399 
locde‰t
->
isöföôe
 = 0;

401 
locde‰t
->
isöföôe
 = 1;

403  
locde‰t
;

405  
NULL
;

406 
	}
}

410 
	$uù_ds6_de‰t_rm
(
uù_ds6_de‰t_t
 *
de‰t
)

412 if(
de‰t
 !
NULL
) {

413 
de‰t
->
isu£d
 = 0;

416 
	}
}

419 
uù_ds6_de‰t_t
 *

420 
	$uù_ds6_de‰t_lookup
(
uù_ùaddr_t
 *
ùaddr
)

422 if(
	`uù_ds6_li°_lo›
((
uù_ds6_ñemít_t
 *)
uù_ds6_de‰t_li°
,

423 
UIP_DS6_DEFRT_NB
, (
uù_ds6_de‰t_t
), 
ùaddr
, 128,

424 (
uù_ds6_ñemít_t
 **)&
locde‰t
Ë=
FOUND
) {

425  
locde‰t
;

427  
NULL
;

428 
	}
}

431 
uù_ùaddr_t
 *

432 
	$uù_ds6_de‰t_choo£
()

434 
uù_ds6_nbr_t
 *
be°nbr
;

436 
locùaddr
 = 
NULL
;

437 
locde‰t
 = 
uù_ds6_de‰t_li°
;

438 
locde‰t
 < 
uù_ds6_de‰t_li°
 + 
UIP_DS6_DEFRT_NB
;Üocdefrt++) {

439 if(
locde‰t
->
isu£d
) {

440 
be°nbr
 = 
	`uù_ds6_nbr_lookup
(&
locde‰t
->
ùaddr
);

441 if(
be°nbr
 !
NULL
 && be°nbr->
°©e
 !
NBR_INCOMPLETE
) {

442  &
locde‰t
->
ùaddr
;

444 
locùaddr
 = &
locde‰t
->
ùaddr
;

448  
locùaddr
;

449 
	}
}

451 #i‡
UIP_CONF_ROUTER


453 
uù_ds6_¥efix_t
 *

454 
	$uù_ds6_¥efix_add
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
ùaddæí
,

455 
uöt8_t
 
advîti£
, uöt8_à
Êags
, 
vtime
,

456 
±ime
)

458 if(
uù_ds6_li°_lo›


459 ((
uù_ds6_ñemít_t
 *)
uù_ds6_¥efix_li°
, 
UIP_DS6_PREFIX_NB
,

460 (
uù_ds6_¥efix_t
), 
ùaddr
, 
ùaddæí
,

461 (
uù_ds6_ñemít_t
 **)&
lo˝ªfix
Ë=
FREESPACE
) {

462 
lo˝ªfix
->
isu£d
 = 1;

463 
	`uù_ùaddr_c›y
(&
lo˝ªfix
->
ùaddr
, ipaddr);

464 
lo˝ªfix
->
Àngth
 = 
ùaddæí
;

465 
lo˝ªfix
->
advîti£
 =ádvertise;

466 
lo˝ªfix
->
l_a_ª£rved
 = 
Êags
;

467 
lo˝ªfix
->
vli„time
 = 
vtime
;

468 
lo˝ªfix
->
∂i„time
 = 
±ime
;

469 
	`PRINTF
("AddingÖrefix ");

470 
	`PRINT6ADDR
(&
lo˝ªfix
->
ùaddr
);

471 
	`PRINTF
("length %u, flags %x, ValidÜifetime %lx, PrefferedÜifetime %lx\n",

472 
ùaddæí
, 
Êags
, 
vtime
, 
±ime
);

473  
lo˝ªfix
;

475 
	`PRINTF
("No more space in PrefixÜist\n");

477  
NULL
;

478 
	}
}

482 
uù_ds6_¥efix_t
 *

483 
	$uù_ds6_¥efix_add
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
ùaddæí
,

484 
öãrvÆ
)

486 if(
uù_ds6_li°_lo›


487 ((
uù_ds6_ñemít_t
 *)
uù_ds6_¥efix_li°
, 
UIP_DS6_PREFIX_NB
,

488 (
uù_ds6_¥efix_t
), 
ùaddr
, 
ùaddæí
,

489 (
uù_ds6_ñemít_t
 **)&
lo˝ªfix
Ë=
FREESPACE
) {

490 
lo˝ªfix
->
isu£d
 = 1;

491 
	`uù_ùaddr_c›y
(&
lo˝ªfix
->
ùaddr
, ipaddr);

492 
lo˝ªfix
->
Àngth
 = 
ùaddæí
;

493 if(
öãrvÆ
 != 0) {

494 
	`°imî_£t
(&(
lo˝ªfix
->
vli„time
), 
öãrvÆ
);

495 
lo˝ªfix
->
isöföôe
 = 0;

497 
lo˝ªfix
->
isöföôe
 = 1;

500  
NULL
;

501 
	}
}

506 
	$uù_ds6_¥efix_rm
(
uù_ds6_¥efix_t
 *
¥efix
)

508 if(
¥efix
 !
NULL
) {

509 
¥efix
->
isu£d
 = 0;

512 
	}
}

514 
uù_ds6_¥efix_t
 *

515 
	$uù_ds6_¥efix_lookup
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
ùaddæí
)

517 if(
	`uù_ds6_li°_lo›
((
uù_ds6_ñemít_t
 *)
uù_ds6_¥efix_li°
,

518 
UIP_DS6_PREFIX_NB
, (
uù_ds6_¥efix_t
),

519 
ùaddr
, 
ùaddæí
,

520 (
uù_ds6_ñemít_t
 **)&
lo˝ªfix
Ë=
FOUND
) {

521  
lo˝ªfix
;

523  
NULL
;

524 
	}
}

527 
uöt8_t


528 
	$uù_ds6_is_addr_⁄lök
(
uù_ùaddr_t
 *
ùaddr
)

530 
lo˝ªfix
 = 
uù_ds6_¥efix_li°
;

531 
lo˝ªfix
 < 
uù_ds6_¥efix_li°
 + 
UIP_DS6_PREFIX_NB
;Üocprefix++) {

532 if(
lo˝ªfix
->
isu£d
 &&

533 
	`uù_ùaddr_¥efixcmp
(&
lo˝ªfix
->
ùaddr
, i∑ddr,Üo˝ªfix->
Àngth
)) {

538 
	}
}

541 
uù_ds6_addr_t
 *

542 
	$uù_ds6_addr_add
(
uù_ùaddr_t
 *
ùaddr
, 
vli„time
, 
uöt8_t
 
ty≥
)

544 if(
uù_ds6_li°_lo›


545 ((
uù_ds6_ñemít_t
 *)
uù_ds6_if
.
addr_li°
, 
UIP_DS6_ADDR_NB
,

546 (
uù_ds6_addr_t
), 
ùaddr
, 128,

547 (
uù_ds6_ñemít_t
 **)&
loˇddr
Ë=
FREESPACE
) {

548 
loˇddr
->
isu£d
 = 1;

549 
	`uù_ùaddr_c›y
(&
loˇddr
->
ùaddr
, ipaddr);

550 
loˇddr
->
ty≥
 =Åype;

551 if(
vli„time
 == 0) {

552 
loˇddr
->
isöföôe
 = 1;

554 
loˇddr
->
isöföôe
 = 0;

555 
	`°imî_£t
(&(
loˇddr
->
vli„time
), vlifetime);

557 #i‡
UIP_ND6_DEF_MAXDADNS
 > 0

558 
loˇddr
->
°©e
 = 
ADDR_TENTATIVE
;

559 
	`timî_£t
(&
loˇddr
->
dadtimî
,

560 
	`øndom_ønd
(Ë% (
UIP_ND6_MAX_RTR_SOLICITATION_DELAY
 *

561 
CLOCK_SECOND
));

562 
loˇddr
->
dadnscou¡
 = 0;

564 
loˇddr
->
°©e
 = 
ADDR_PREFERRED
;

566 
	`uù_¸óã_sﬁicôed_node
(
ùaddr
, &
loc_fùaddr
);

567 
	`uù_ds6_maddr_add
(&
loc_fùaddr
);

568  
loˇddr
;

570  
NULL
;

571 
	}
}

575 
	$uù_ds6_addr_rm
(
uù_ds6_addr_t
 *
addr
)

577 if(
addr
 !
NULL
) {

578 
	`uù_¸óã_sﬁicôed_node
(&
addr
->
ùaddr
, &
loc_fùaddr
);

579 if((
locmaddr
 = 
	`uù_ds6_maddr_lookup
(&
loc_fùaddr
)Ë!
NULL
) {

580 
	`uù_ds6_maddr_rm
(
locmaddr
);

582 
addr
->
isu£d
 = 0;

585 
	}
}

588 
uù_ds6_addr_t
 *

589 
	$uù_ds6_addr_lookup
(
uù_ùaddr_t
 *
ùaddr
)

591 if(
uù_ds6_li°_lo›


592 ((
uù_ds6_ñemít_t
 *)
uù_ds6_if
.
addr_li°
, 
UIP_DS6_ADDR_NB
,

593 (
uù_ds6_addr_t
), 
ùaddr
, 128,

594 (
uù_ds6_ñemít_t
 **)&
loˇddr
Ë=
FOUND
) {

595  
loˇddr
;

597  
NULL
;

598 
	}
}

606 
uù_ds6_addr_t
 *

607 
	$uù_ds6_gë_lök_loˇl
(
öt8_t
 
°©e
)

609 
loˇddr
 = 
uù_ds6_if
.
addr_li°
;

610 
loˇddr
 < 
uù_ds6_if
.
addr_li°
 + 
UIP_DS6_ADDR_NB
;Üocaddr++) {

611 if(
loˇddr
->
isu£d
 && (
°©e
 == -1 ||Üocaddr->state == state)

612 && (
	`uù_is_addr_lök_loˇl
(&
loˇddr
->
ùaddr
))) {

613  
loˇddr
;

616  
NULL
;

617 
	}
}

625 
uù_ds6_addr_t
 *

626 
	$uù_ds6_gë_globÆ
(
öt8_t
 
°©e
)

628 
loˇddr
 = 
uù_ds6_if
.
addr_li°
;

629 
loˇddr
 < 
uù_ds6_if
.
addr_li°
 + 
UIP_DS6_ADDR_NB
;Üocaddr++) {

630 if(
loˇddr
->
isu£d
 && (
°©e
 == -1 ||Üocaddr->state == state)

631 && !(
	`uù_is_addr_lök_loˇl
(&
loˇddr
->
ùaddr
))) {

632  
loˇddr
;

635  
NULL
;

636 
	}
}

639 
uù_ds6_maddr_t
 *

640 
	$uù_ds6_maddr_add
(
uù_ùaddr_t
 *
ùaddr
)

642 if(
uù_ds6_li°_lo›


643 ((
uù_ds6_ñemít_t
 *)
uù_ds6_if
.
maddr_li°
, 
UIP_DS6_MADDR_NB
,

644 (
uù_ds6_maddr_t
), 
ùaddr
, 128,

645 (
uù_ds6_ñemít_t
 **)&
locmaddr
Ë=
FREESPACE
) {

646 
locmaddr
->
isu£d
 = 1;

647 
	`uù_ùaddr_c›y
(&
locmaddr
->
ùaddr
, ipaddr);

648  
locmaddr
;

650  
NULL
;

651 
	}
}

655 
	$uù_ds6_maddr_rm
(
uù_ds6_maddr_t
 *
maddr
)

657 if(
maddr
 !
NULL
) {

658 
maddr
->
isu£d
 = 0;

661 
	}
}

664 
uù_ds6_maddr_t
 *

665 
	$uù_ds6_maddr_lookup
(
uù_ùaddr_t
 *
ùaddr
)

667 if(
uù_ds6_li°_lo›


668 ((
uù_ds6_ñemít_t
 *)
uù_ds6_if
.
maddr_li°
, 
UIP_DS6_MADDR_NB
,

669 (
uù_ds6_maddr_t
), 
ùaddr
, 128,

670 (
uù_ds6_ñemít_t
 **)&
locmaddr
Ë=
FOUND
) {

671  
locmaddr
;

673  
NULL
;

674 
	}
}

678 
uù_ds6_Øddr_t
 *

679 
	$uù_ds6_Øddr_add
(
uù_ùaddr_t
 *
ùaddr
)

681 if(
uù_ds6_li°_lo›


682 ((
uù_ds6_ñemít_t
 *)
uù_ds6_if
.
Øddr_li°
, 
UIP_DS6_AADDR_NB
,

683 (
uù_ds6_Øddr_t
), 
ùaddr
, 128,

684 (
uù_ds6_ñemít_t
 **)&
loˇaddr
Ë=
FREESPACE
) {

685 
loˇaddr
->
isu£d
 = 1;

686 
	`uù_ùaddr_c›y
(&
loˇaddr
->
ùaddr
, ipaddr);

687  
loˇaddr
;

689  
NULL
;

690 
	}
}

694 
	$uù_ds6_Øddr_rm
(
uù_ds6_Øddr_t
 *
Øddr
)

696 if(
Øddr
 !
NULL
) {

697 
Øddr
->
isu£d
 = 0;

700 
	}
}

703 
uù_ds6_Øddr_t
 *

704 
	$uù_ds6_Øddr_lookup
(
uù_ùaddr_t
 *
ùaddr
)

706 if(
	`uù_ds6_li°_lo›
((
uù_ds6_ñemít_t
 *)
uù_ds6_if
.
Øddr_li°
,

707 
UIP_DS6_AADDR_NB
, (
uù_ds6_Øddr_t
), 
ùaddr
, 128,

708 (
uù_ds6_ñemít_t
 **)&
loˇaddr
Ë=
FOUND
) {

709  
loˇaddr
;

711  
NULL
;

712 
	}
}

715 
uù_ds6_rouã_t
 *

716 
	$uù_ds6_rouã_lookup
(
uù_ùaddr_t
 *
de°ùaddr
)

718 
uù_ds6_rouã_t
 *
lo¸t
 = 
NULL
;

719 
uöt8_t
 
l⁄ge°m©ch
 = 0;

721 
lo¸ouã
 = 
uù_ds6_routög_èbÀ
;

722 
lo¸ouã
 < 
uù_ds6_routög_èbÀ
 + 
UIP_DS6_ROUTE_NB
;Üocroute++) {

723 if((
lo¸ouã
->
isu£d
Ë&& (lo¸ouã->
Àngth
 >
l⁄ge°m©ch
)

725 (
uù_ùaddr_¥efixcmp


726 (
de°ùaddr
, &
lo¸ouã
->
ùaddr
,Üo¸ouã->
Àngth
))) {

727 
l⁄ge°m©ch
 = 
lo¸ouã
->
Àngth
;

728 
lo¸t
 = 
lo¸ouã
;

732  
lo¸t
;

733 
	}
}

736 
uù_ds6_rouã_t
 *

737 
	$uù_ds6_rouã_add
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
Àngth
, uù_ùaddr_à*
√xth›
,

738 
uöt8_t
 
mëric
)

740 if(
uù_ds6_li°_lo›


741 ((
uù_ds6_ñemít_t
 *)
uù_ds6_routög_èbÀ
, 
UIP_DS6_ROUTE_NB
,

742 (
uù_ds6_rouã_t
), 
ùaddr
, 
Àngth
,

743 (
uù_ds6_ñemít_t
 **)&
lo¸ouã
Ë=
FREESPACE
) {

744 
lo¸ouã
->
isu£d
 = 1;

745 
	`uù_ùaddr_c›y
(&(
lo¸ouã
->
ùaddr
), ipaddr);

746 
lo¸ouã
->
Àngth
 =Üength;

747 
	`uù_ùaddr_c›y
(&(
lo¸ouã
->
√xth›
),Çexthop);

748 
lo¸ouã
->
mëric
 = metric;

750 #ifde‡
UIP_DS6_ROUTE_STATE_TYPE


751 
	`mem£t
(&
lo¸ouã
->
°©e
, 0, (
UIP_DS6_ROUTE_STATE_TYPE
));

756  
lo¸ouã
;

757 
	}
}

761 
	$uù_ds6_rouã_rm
(
uù_ds6_rouã_t
 *
rouã
)

763 
rouã
->
isu£d
 = 0;

764 #i‡(
DEBUG
 & 
DEBUG_ANNOTATE
) == DEBUG_ANNOTATE

767 
lo¸ouã
 = 
uù_ds6_routög_èbÀ
;

768 
lo¸ouã
 < 
uù_ds6_routög_èbÀ
 + 
UIP_DS6_ROUTE_NB
;

769 
lo¸ouã
++) {

770 if(
lo¸ouã
->
isu£d
 && 
	`uù_ùaddr_cmp
(&lo¸ouã->
√xth›
, &
rouã
->nexthop)) {

776 
	}
}

779 
	$uù_ds6_rouã_rm_by_√xth›
(
uù_ùaddr_t
 *
√xth›
)

781 
lo¸ouã
 = 
uù_ds6_routög_èbÀ
;

782 
lo¸ouã
 < 
uù_ds6_routög_èbÀ
 + 
UIP_DS6_ROUTE_NB
;

783 
lo¸ouã
++) {

784 if(
lo¸ouã
->
isu£d
 && 
	`uù_ùaddr_cmp
(&lo¸ouã->
√xth›
,Çexthop)) {

785 
lo¸ouã
->
isu£d
 = 0;

788 
	}
}

792 
	$uù_ds6_£À˘_§c
(
uù_ùaddr_t
 *
§c
, uù_ùaddr_à*
d°
)

794 
uöt8_t
 
be°
 = 0;

795 
uöt8_t
 
n
 = 0;

796 
uù_ds6_addr_t
 *
m©chaddr
 = 
NULL
;

798 if(!
	`uù_is_addr_lök_loˇl
(
d°
Ë&& !
	`uù_is_addr_mˇ°
(dst)) {

800 
loˇddr
 = 
uù_ds6_if
.
addr_li°
;

801 
loˇddr
 < 
uù_ds6_if
.
addr_li°
 + 
UIP_DS6_ADDR_NB
;Üocaddr++) {

803 if(
loˇddr
->
isu£d
 &&Üoˇddr->
°©e
 =
ADDR_PREFERRED
 &&

804 !
	`uù_is_addr_lök_loˇl
(&
loˇddr
->
ùaddr
)) {

805 
n
 = 
	`gë_m©ch_Àngth
(
d°
, &
loˇddr
->
ùaddr
);

806 if(
n
 >
be°
) {

807 
be°
 = 
n
;

808 
m©chaddr
 = 
loˇddr
;

813 
m©chaddr
 = 
	`uù_ds6_gë_lök_loˇl
(
ADDR_PREFERRED
);

817 if(
m©chaddr
 =
NULL
) {

818 
	`uù_¸óã_un•ecifõd
(
§c
);

820 
	`uù_ùaddr_c›y
(
§c
, &
m©chaddr
->
ùaddr
);

822 
	}
}

826 
	$uù_ds6_£t_addr_iid
(
uù_ùaddr_t
 *
ùaddr
, 
uù_Œaddr_t
 *
Œaddr
)

830 #i‡(
UIP_LLADDR_LEN
 == 8)

831 
	`mem˝y
(
ùaddr
->
u8
 + 8, 
Œaddr
, 
UIP_LLADDR_LEN
);

832 
ùaddr
->
u8
[8] ^= 0x02;

833 #ñi‡(
UIP_LLADDR_LEN
 == 6)

834 
	`mem˝y
(
ùaddr
->
u8
 + 8, 
Œaddr
, 3);

835 
ùaddr
->
u8
[11] = 0xff;

836 
ùaddr
->
u8
[12] = 0xfe;

837 
	`mem˝y
(
ùaddr
->
u8
 + 13, (
uöt8_t
 *)
Œaddr
 + 3, 3);

838 
ùaddr
->
u8
[8] ^= 0x02;

840 #îr‹ 
uù
-
ds6
.
c
 
ˇ¬Ÿ
 
buûd
 
öãrÁ˚
 
addªss
 
whí
 
UIP_LLADDR_LEN
 
is
 
nŸ
 6 
‹
 8

842 
	}
}

845 
uöt8_t


846 
	$gë_m©ch_Àngth
(
uù_ùaddr_t
 *
§c
, uù_ùaddr_à*
d°
)

848 
uöt8_t
 
j
, 
k
, 
x_‹
;

849 
uöt8_t
 
Àn
 = 0;

851 
j
 = 0; j < 16; j++) {

852 if(
§c
->
u8
[
j
] =
d°
->u8[j]) {

853 
Àn
 += 8;

855 
x_‹
 = 
§c
->
u8
[
j
] ^ 
d°
->u8[j];

856 
k
 = 0; k < 8; k++) {

857 if((
x_‹
 & 0x80) == 0) {

858 
Àn
++;

859 
x_‹
 <<= 1;

867  
Àn
;

868 
	}
}

871 #i‡
UIP_ND6_DEF_MAXDADNS
 > 0

873 
	$uù_ds6_dad
(
uù_ds6_addr_t
 *
addr
)

876 if(
addr
->
dadnscou¡
 < 
uù_ds6_if
.
maxdadns
) {

877 
	`uù_nd6_ns_ouçut
(
NULL
, NULL, &
addr
->
ùaddr
);

878 
addr
->
dadnscou¡
++;

879 
	`timî_£t
(&
addr
->
dadtimî
,

880 
uù_ds6_if
.
ªå™s_timî
 / 1000 * 
CLOCK_SECOND
);

887 
	`PRINTF
("DAD succeeded, ipaddr:");

888 
	`PRINT6ADDR
(&
addr
->
ùaddr
);

889 
	`PRINTF
("\n");

891 
addr
->
°©e
 = 
ADDR_PREFERRED
;

893 
	}
}

901 
	$uù_ds6_dad_Áûed
(
uù_ds6_addr_t
 *
addr
)

903 if(
	`uù_is_addr_lök_loˇl
(&
addr
->
ùaddr
)) {

904 
	`PRINTF
("Contiki shutdown, DAD forÜinkÜocaláddress failed\n");

907 
	`uù_ds6_addr_rm
(
addr
);

909 
	}
}

913 #i‡
UIP_CONF_ROUTER


914 #i‡
UIP_ND6_SEND_RA


916 
	$uù_ds6_£nd_ø_sﬁlicôed
()

924 
ønd_time
 = 0;

925 
	`PRINTF
("Sﬁicôed RA,Ñ™domÅimê%u\n", 
ønd_time
);

927 if(
	`°imî_ªmaöög
(&
uù_ds6_timî_ø
Ë> 
ønd_time
) {

928 if(
	`°imî_ñ≠£d
(&
uù_ds6_timî_ø
Ë< 
UIP_ND6_MIN_DELAY_BETWEEN_RAS
) {

934 
	`°imî_£t
(&
uù_ds6_timî_ø
, 
ønd_time
);

937 
	}
}

941 
	$uù_ds6_£nd_ø_≥riodic
()

943 if(
øcou¡
 > 0) {

945 
	`uù_nd6_ø_ouçut
(
NULL
);

946 
	`PRINTF
("SendingÖeriodic RA\n");

949 
ønd_time
 = 
UIP_ND6_MIN_RA_INTERVAL
 + 
	`øndom_ønd
() %

950 (
uöt16_t
Ë(
UIP_ND6_MAX_RA_INTERVAL
 - 
UIP_ND6_MIN_RA_INTERVAL
);

951 
	`PRINTF
("R™domÅimê1 = %u\n", 
ønd_time
);

953 if(
øcou¡
 < 
UIP_ND6_MAX_INITIAL_RAS
) {

954 if(
ønd_time
 > 
UIP_ND6_MAX_INITIAL_RA_INTERVAL
) {

955 
ønd_time
 = 
UIP_ND6_MAX_INITIAL_RA_INTERVAL
;

956 
	`PRINTF
("R™domÅimê2 = %u\n", 
ønd_time
);

958 
øcou¡
++;

960 
	`PRINTF
("R™domÅimê3 = %u\n", 
ønd_time
);

961 
	`°imî_£t
(&
uù_ds6_timî_ø
, 
ønd_time
);

962 
	}
}

968 
	$uù_ds6_£nd_rs
()

970 if((
	`uù_ds6_de‰t_choo£
(Ë=
NULL
)

971 && (
rscou¡
 < 
UIP_ND6_MAX_RTR_SOLICITATIONS
)) {

972 
	`uù_nd6_rs_ouçut
();

973 
rscou¡
++;

980 
	}
}

984 
uöt32_t


985 
	$uù_ds6_compuã_ªachabÀ_time
()

987  (
uöt32_t
Ë(
UIP_ND6_MIN_RANDOM_FACTOR


988 (
uù_ds6_if
.
ba£_ªachabÀ_time
)) +

989 ((
uöt16_t
Ë(
	`øndom_ønd
() << 8) +

990 (
uöt16_t
Ë
	`øndom_ønd
()) %

991 (
uöt32_t
Ë(
	`UIP_ND6_MAX_RANDOM_FACTOR
(
uù_ds6_if
.
ba£_ªachabÀ_time
) -

992 
	`UIP_ND6_MIN_RANDOM_FACTOR
(
uù_ds6_if
.
ba£_ªachabÀ_time
));

993 
	}
}

	@core/net/uip-ds6.h

42 #i‚de‡
__UIP_DS6_H__


43 
	#__UIP_DS6_H__


	)

45 
	~"√t/uù.h
"

46 
	~"sys/°imî.h
"

48 
	~"√t/uù-nd6.h
"

59 
	#UIP_DS6_NBR_NBS
 0

	)

60 #i‚de‡
UIP_CONF_DS6_NBR_NBU


61 
	#UIP_DS6_NBR_NBU
 4

	)

63 
	#UIP_DS6_NBR_NBU
 
UIP_CONF_DS6_NBR_NBU


	)

65 
	#UIP_DS6_NBR_NB
 
UIP_DS6_NBR_NBS
 + 
UIP_DS6_NBR_NBU


	)

68 
	#UIP_DS6_DEFRT_NBS
 0

	)

69 #i‚de‡
UIP_CONF_DS6_DEFRT_NBU


70 
	#UIP_DS6_DEFRT_NBU
 2

	)

72 
	#UIP_DS6_DEFRT_NBU
 
UIP_CONF_DS6_DEFRT_NBU


	)

74 
	#UIP_DS6_DEFRT_NB
 
UIP_DS6_DEFRT_NBS
 + 
UIP_DS6_DEFRT_NBU


	)

77 
	#UIP_DS6_PREFIX_NBS
 1

	)

78 #i‚de‡
UIP_CONF_DS6_PREFIX_NBU


79 
	#UIP_DS6_PREFIX_NBU
 2

	)

81 
	#UIP_DS6_PREFIX_NBU
 
UIP_CONF_DS6_PREFIX_NBU


	)

83 
	#UIP_DS6_PREFIX_NB
 
UIP_DS6_PREFIX_NBS
 + 
UIP_DS6_PREFIX_NBU


	)

86 
	#UIP_DS6_ROUTE_NBS
 0

	)

87 #i‚de‡
UIP_CONF_DS6_ROUTE_NBU


88 
	#UIP_DS6_ROUTE_NBU
 4

	)

90 
	#UIP_DS6_ROUTE_NBU
 
UIP_CONF_DS6_ROUTE_NBU


	)

92 
	#UIP_DS6_ROUTE_NB
 
UIP_DS6_ROUTE_NBS
 + 
UIP_DS6_ROUTE_NBU


	)

95 
	#UIP_DS6_ADDR_NBS
 1

	)

96 #i‚de‡
UIP_CONF_DS6_ADDR_NBU


97 
	#UIP_DS6_ADDR_NBU
 2

	)

99 
	#UIP_DS6_ADDR_NBU
 
UIP_CONF_DS6_ADDR_NBU


	)

101 
	#UIP_DS6_ADDR_NB
 
UIP_DS6_ADDR_NBS
 + 
UIP_DS6_ADDR_NBU


	)

104 #i‡
UIP_CONF_ROUTER


105 
	#UIP_DS6_MADDR_NBS
 2 + 
UIP_DS6_ADDR_NB


	)

107 
	#UIP_DS6_MADDR_NBS
 1 + 
UIP_DS6_ADDR_NB


	)

109 #i‚de‡
UIP_CONF_DS6_MADDR_NBU


110 
	#UIP_DS6_MADDR_NBU
 0

	)

112 
	#UIP_DS6_MADDR_NBU
 
UIP_CONF_DS6_MADDR_NBU


	)

114 
	#UIP_DS6_MADDR_NB
 
UIP_DS6_MADDR_NBS
 + 
UIP_DS6_MADDR_NBU


	)

117 #i‡
UIP_CONF_ROUTER


118 
	#UIP_DS6_AADDR_NBS
 
UIP_DS6_PREFIX_NB
 - 1

	)

120 
	#UIP_DS6_AADDR_NBS
 0

	)

122 #i‚de‡
UIP_CONF_DS6_AADDR_NBU


123 
	#UIP_DS6_AADDR_NBU
 0

	)

125 
	#UIP_DS6_AADDR_NBU
 
UIP_CONF_DS6_AADDR_NBU


	)

127 
	#UIP_DS6_AADDR_NB
 
UIP_DS6_AADDR_NBS
 + 
UIP_DS6_AADDR_NBU


	)

131 #i‚de‡
UIP_CONF_DS6_LL_NUD


132 
	#UIP_DS6_LL_NUD
 0

	)

134 
	#UIP_DS6_LL_NUD
 
UIP_CONF_DS6_LL_NUD


	)

139 
	#NBR_INCOMPLETE
 0

	)

140 
	#NBR_REACHABLE
 1

	)

141 
	#NBR_STALE
 2

	)

142 
	#NBR_DELAY
 3

	)

143 
	#NBR_PROBE
 4

	)

146 
	#ADDR_TENTATIVE
 0

	)

147 
	#ADDR_PREFERRED
 1

	)

148 
	#ADDR_DEPRECATED
 2

	)

151 
	#ADDR_ANYTYPE
 0

	)

152 
	#ADDR_AUTOCONF
 1

	)

153 
	#ADDR_DHCP
 2

	)

154 
	#ADDR_MANUAL
 3

	)

157 
	#UIP_DS6_PERIOD
 (
CLOCK_SECOND
/10Ë

	)

158 
	#FOUND
 0

	)

159 
	#FREESPACE
 1

	)

160 
	#NOSPACE
 2

	)

164 #i‡
UIP_CONF_IPV6_QUEUE_PKT


165 
	~"√t/uù-∑ckëqueue.h
"

168 
	suù_ds6_nbr
 {

169 
uöt8_t
 
	misu£d
;

170 
uù_ùaddr_t
 
	mùaddr
;

171 
uù_Œaddr_t
 
	mŒaddr
;

172 
°imî
 
	mªachabÀ
;

173 
°imî
 
	m£ndns
;

174 
˛ock_time_t
 
	mœ°_lookup
;

175 
uöt8_t
 
	mnscou¡
;

176 
uöt8_t
 
	mi§ouãr
;

177 
uöt8_t
 
	m°©e
;

178 #i‡
UIP_CONF_IPV6_QUEUE_PKT


179 
uù_∑ckëqueue_h™dÀ
 
	m∑ckëh™dÀ
;

180 
	#UIP_DS6_NBR_PACKET_LIFETIME
 
CLOCK_SECOND
 * 4

	)

182 } 
	tuù_ds6_nbr_t
;

185 
	suù_ds6_de‰t
 {

186 
uöt8_t
 
	misu£d
;

187 
uù_ùaddr_t
 
	mùaddr
;

188 
°imî
 
	mli„time
;

189 
uöt8_t
 
	misöföôe
;

190 } 
	tuù_ds6_de‰t_t
;

193 #i‡
UIP_CONF_ROUTER


194 
	suù_ds6_¥efix
 {

195 
uöt8_t
 
	misu£d
;

196 
uù_ùaddr_t
 
	mùaddr
;

197 
uöt8_t
 
	mÀngth
;

198 
uöt8_t
 
	madvîti£
;

199 
uöt32_t
 
	mvli„time
;

200 
uöt32_t
 
	m∂i„time
;

201 
uöt8_t
 
	ml_a_ª£rved
;

202 } 
	tuù_ds6_¥efix_t
;

204 
	suù_ds6_¥efix
 {

205 
uöt8_t
 
	misu£d
;

206 
uù_ùaddr_t
 
	mùaddr
;

207 
uöt8_t
 
	mÀngth
;

208 
°imî
 
	mvli„time
;

209 
uöt8_t
 
	misöföôe
;

210 } 
	tuù_ds6_¥efix_t
;

214 
	suù_ds6_addr
 {

215 
uöt8_t
 
	misu£d
;

216 
uù_ùaddr_t
 
	mùaddr
;

217 
uöt8_t
 
	m°©e
;

218 
uöt8_t
 
	mty≥
;

219 
uöt8_t
 
	misöföôe
;

220 
°imî
 
	mvli„time
;

221 #i‡
UIP_ND6_DEF_MAXDADNS
 > 0

222 
timî
 
	mdadtimî
;

223 
uöt8_t
 
	mdadnscou¡
;

225 } 
	tuù_ds6_addr_t
;

228 
	suù_ds6_Øddr
 {

229 
uöt8_t
 
	misu£d
;

230 
uù_ùaddr_t
 
	mùaddr
;

231 } 
	tuù_ds6_Øddr_t
;

234 
	suù_ds6_maddr
 {

235 
uöt8_t
 
	misu£d
;

236 
uù_ùaddr_t
 
	mùaddr
;

237 } 
	tuù_ds6_maddr_t
;

241 #i‚de‡
UIP_DS6_ROUTE_STATE_TYPE


242 
	#UIP_DS6_ROUTE_STATE_TYPE
 
Ωl_rouã_íåy_t


	)

244 
	sΩl_rouã_íåy
 {

245 
uöt32_t
 
	mli„time
;

246 
uöt32_t
 
	mßved_li„time
;

247 *
	mdag
;

248 
uöt8_t
 
	mÀ¨√d_‰om
;

249 } 
	tΩl_rouã_íåy_t
;

253 #i‡
UIP_CONF_IPV6_RPL


254 #i‚de‡
UIP_CONF_DS6_NEIGHBOR_STATE_CHANGED


255 
	#UIP_CONF_DS6_NEIGHBOR_STATE_CHANGED
 
Ωl_ùv6_√ighb‹_ˇŒback


	)

262 
	suù_ds6_rouã
 {

263 
uöt8_t
 
	misu£d
;

264 
uù_ùaddr_t
 
	mùaddr
;

265 
uöt8_t
 
	mÀngth
;

266 
uöt8_t
 
	mmëric
;

267 
uù_ùaddr_t
 
	m√xth›
;

268 #ifde‡
UIP_DS6_ROUTE_STATE_TYPE


269 
UIP_DS6_ROUTE_STATE_TYPE
 
	m°©e
;

271 } 
	tuù_ds6_rouã_t
;

274 
	suù_ds6_√tif
 {

275 
uöt32_t
 
	mlök_mtu
;

276 
uöt8_t
 
	mcur_h›_limô
;

277 
uöt32_t
 
	mba£_ªachabÀ_time
;

278 
uöt32_t
 
	mªachabÀ_time
;

279 
uöt32_t
 
	mªå™s_timî
;

280 
uöt8_t
 
	mmaxdadns
;

281 
uù_ds6_addr_t
 
	maddr_li°
[
UIP_DS6_ADDR_NB
];

282 
uù_ds6_Øddr_t
 
	mØddr_li°
[
UIP_DS6_AADDR_NB
];

283 
uù_ds6_maddr_t
 
	mmaddr_li°
[
UIP_DS6_MADDR_NB
];

284 } 
	tuù_ds6_√tif_t
;

287 
	suù_ds6_ñemít
 {

288 
uöt8_t
 
	misu£d
;

289 
uù_ùaddr_t
 
	mùaddr
;

290 } 
	tuù_ds6_ñemít_t
;

294 
uù_ds6_√tif_t
 
uù_ds6_if
;

297 #i‡
UIP_CONF_ROUTER


298 
uù_ds6_¥efix_t
 
uù_ds6_¥efix_li°
[
UIP_DS6_PREFIX_NB
];

306 
uù_ds6_öô
();

309 
uù_ds6_≥riodic
();

313 
uöt8_t
 
uù_ds6_li°_lo›
(
uù_ds6_ñemít_t
 *
li°
, uöt8_à
size
,

314 
uöt16_t
 
ñemítsize
, 
uù_ùaddr_t
 *
ùaddr
,

315 
uöt8_t
 
ùaddæí
,

316 
uù_ds6_ñemít_t
 **
out_ñemít
);

320 
uù_ds6_nbr_t
 *
uù_ds6_nbr_add
(
uù_ùaddr_t
 *
ùaddr
, 
uù_Œaddr_t
 *
Œaddr
,

321 
uöt8_t
 
i§ouãr
, uöt8_à
°©e
);

322 
uù_ds6_nbr_rm
(
uù_ds6_nbr_t
 *
nbr
);

323 
uù_ds6_nbr_t
 *
uù_ds6_nbr_lookup
(
uù_ùaddr_t
 *
ùaddr
);

324 
uù_ds6_nbr_t
 *
uù_ds6_nbr_Œ_lookup
(
uù_Œaddr_t
 *
Œaddr
);

330 
uù_ds6_de‰t_t
 *
uù_ds6_de‰t_add
(
uù_ùaddr_t
 *
ùaddr
,

331 
öãrvÆ
);

332 
uù_ds6_de‰t_rm
(
uù_ds6_de‰t_t
 *
de‰t
);

333 
uù_ds6_de‰t_t
 *
uù_ds6_de‰t_lookup
(
uù_ùaddr_t
 *
ùaddr
);

334 
uù_ùaddr_t
 *
uù_ds6_de‰t_choo£
();

340 #i‡
UIP_CONF_ROUTER


341 
uù_ds6_¥efix_t
 *
uù_ds6_¥efix_add
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
Àngth
,

342 
uöt8_t
 
advîti£
, uöt8_à
Êags
,

343 
vtime
,

344 
±ime
);

346 
uù_ds6_¥efix_t
 *
uù_ds6_¥efix_add
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
Àngth
,

347 
öãrvÆ
);

349 
uù_ds6_¥efix_rm
(
uù_ds6_¥efix_t
 *
¥efix
);

350 
uù_ds6_¥efix_t
 *
uù_ds6_¥efix_lookup
(
uù_ùaddr_t
 *
ùaddr
,

351 
uöt8_t
 
ùaddæí
);

352 
uöt8_t
 
uù_ds6_is_addr_⁄lök
(
uù_ùaddr_t
 *
ùaddr
);

358 
uù_ds6_addr_t
 *
uù_ds6_addr_add
(
uù_ùaddr_t
 *
ùaddr
,

359 
vli„time
, 
uöt8_t
 
ty≥
);

360 
uù_ds6_addr_rm
(
uù_ds6_addr_t
 *
addr
);

361 
uù_ds6_addr_t
 *
uù_ds6_addr_lookup
(
uù_ùaddr_t
 *
ùaddr
);

362 
uù_ds6_addr_t
 *
uù_ds6_gë_lök_loˇl
(
öt8_t
 
°©e
);

363 
uù_ds6_addr_t
 *
uù_ds6_gë_globÆ
(
öt8_t
 
°©e
);

369 
uù_ds6_maddr_t
 *
uù_ds6_maddr_add
(
uù_ùaddr_t
 *
ùaddr
);

370 
uù_ds6_maddr_rm
(
uù_ds6_maddr_t
 *
maddr
);

371 
uù_ds6_maddr_t
 *
uù_ds6_maddr_lookup
(
uù_ùaddr_t
 *
ùaddr
);

377 
uù_ds6_Øddr_t
 *
uù_ds6_Øddr_add
(
uù_ùaddr_t
 *
ùaddr
);

378 
uù_ds6_Øddr_rm
(
uù_ds6_Øddr_t
 *
Øddr
);

379 
uù_ds6_Øddr_t
 *
uù_ds6_Øddr_lookup
(
uù_ùaddr_t
 *
ùaddr
);

386 
uù_ds6_rouã_t
 *
uù_ds6_rouã_lookup
(
uù_ùaddr_t
 *
de°ùaddr
);

387 
uù_ds6_rouã_t
 *
uù_ds6_rouã_add
(
uù_ùaddr_t
 *
ùaddr
, 
uöt8_t
 
Àngth
,

388 
uù_ùaddr_t
 *
√xt_h›
, 
uöt8_t
 
mëric
);

389 
uù_ds6_rouã_rm
(
uù_ds6_rouã_t
 *
rouã
);

390 
uù_ds6_rouã_rm_by_√xth›
(
uù_ùaddr_t
 *
√xth›
);

395 
uù_ds6_£t_addr_iid
(
uù_ùaddr_t
 *
ùaddr
, 
uù_Œaddr_t
 *
Œaddr
);

398 
uöt8_t
 
gë_m©ch_Àngth
(
uù_ùaddr_t
 *
§c
, uù_ùaddr_à*
d°
);

400 #i‡
UIP_ND6_DEF_MAXDADNS
 >0

402 
uù_ds6_dad
(
uù_ds6_addr_t
 *
iÁddr
);

405 
uù_ds6_dad_Áûed
(
uù_ds6_addr_t
 *
iÁddr
);

409 
uù_ds6_£À˘_§c
(
uù_ùaddr_t
 *
§c
, uù_ùaddr_à*
d°
);

411 #i‡
UIP_CONF_ROUTER


412 #i‡
UIP_ND6_SEND_RA


414 
uù_ds6_£nd_ø_sﬁlicôed
();

417 
uù_ds6_£nd_ø_≥riodic
();

421 
uù_ds6_£nd_rs
();

425 
uöt32_t
 
uù_ds6_compuã_ªachabÀ_time
();

429 
	#uù_ds6_is_my_addr
(
addr
Ë(
	`uù_ds6_addr_lookup
◊ddrË!
NULL
)

	)

430 
	#uù_ds6_is_my_maddr
(
addr
Ë(
	`uù_ds6_maddr_lookup
◊ddrË!
NULL
)

	)

431 
	#uù_ds6_is_my_Øddr
(
addr
Ë(
	`uù_ds6_Øddr_lookup
◊ddrË!
NULL
)

	)

	@core/net/uip-icmp6.c

45 
	~<°rög.h
>

46 
	~"√t/uù-ds6.h
"

47 
	~"√t/uù-icmp6.h
"

48 
	~"t˝ù.h
"

49 
	#DEBUG
 0

	)

50 #i‡
DEBUG


51 
	~<°dio.h
>

52 
	#PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

53 
	#PRINT6ADDR
(
addr
Ë
	`PRINTF
(" %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x ", ((
uöt8_t
 *Ôddr)[0], ((uöt8_à*Ôddr)[1], ((uöt8_à*Ôddr)[2], ((uöt8_à*Ôddr)[3], ((uöt8_à*Ôddr)[4], ((uöt8_à*Ôddr)[5], ((uöt8_à*Ôddr)[6], ((uöt8_à*Ôddr)[7], ((uöt8_à*Ôddr)[8], ((uöt8_à*Ôddr)[9], ((uöt8_à*Ôddr)[10], ((uöt8_à*Ôddr)[11], ((uöt8_à*Ôddr)[12], ((uöt8_à*Ôddr)[13], ((uöt8_à*Ôddr)[14], ((uöt8_à*Ôddr)[15])

	)

54 
	#PRINTLLADDR
(
Œaddr
Ë
	`PRINTF
(" %02x:%02x:%02x:%02x:%02x:%02x ",Œaddr->
addr
[0],Üœddr->addr[1],Üœddr->addr[2],Üœddr->addr[3],Œaddr->addr[4],Üœddr->addr[5])

	)

56 
	#PRINTF
(...)

	)

57 
	#PRINT6ADDR
(
addr
)

	)

60 
	#UIP_IP_BUF
 ((
uù_ù_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
])

	)

61 
	#UIP_ICMP_BUF
 ((
uù_icmp_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

62 
	#UIP_ICMP6_ERROR_BUF
 ((
uù_icmp6_îr‹
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
])

	)

63 
	#UIP_EXT_BUF
 ((
uù_ext_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

64 
	#UIP_FIRST_EXT_BUF
 ((
uù_ext_hdr
 *)&
uù_buf
[
UIP_LLIPH_LEN
])

	)

67 
uù_ùaddr_t
 
	gtmp_ùaddr
;

69 #i‡
UIP_CONF_IPV6_RPL


70 
	~"Ωl/Ωl.h
"

74 
uù_pög_∑ckë_ödiˇti⁄
();

78 
	$uù_icmp6_echo_ªque°_öput
()

80 #i‡
UIP_CONF_IPV6_RPL


81 
uöt8_t
 
ãmp_ext_Àn
;

88 
	`PRINTF
("Received Echo Request from");

89 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
§cùaddr
);

90 
	`PRINTF
("to");

91 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

92 
	`PRINTF
("\n");

95 
UIP_IP_BUF
->
âl
 = 
uù_ds6_if
.
cur_h›_limô
;

97 if(
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
)){

98 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &UIP_IP_BUF->
§cùaddr
);

99 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

101 
	`uù_ùaddr_c›y
(&
tmp_ùaddr
, &
UIP_IP_BUF
->
§cùaddr
);

102 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

103 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &
tmp_ùaddr
);

106 if(
uù_ext_Àn
 > 0) {

107 #i‡
UIP_CONF_IPV6_RPL


108 i‡((
ãmp_ext_Àn
=
	`Ωl_övît_hódî
())) {

110 
UIP_FIRST_EXT_BUF
->
√xt
 = 
UIP_PROTO_ICMP6
;

111 i‡(
uù_ext_Àn
 !
ãmp_ext_Àn
) {

112 
uù_Àn
 -(
uù_ext_Àn
 - 
ãmp_ext_Àn
);

113 
UIP_IP_BUF
->
Àn
[0] = ((
uù_Àn
 - 
UIP_IPH_LEN
) >> 8);

114 
UIP_IP_BUF
->
Àn
[1] = ((
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff);

120 
	`memmove
((
uöt8_t
 *)
UIP_ICMP_BUF
 + 
UIP_ICMPH_LEN
 - (
uù_ext_Àn
 - 
ãmp_ext_Àn
),

121 (
uöt8_t
 *)
UIP_ICMP_BUF
 + 
UIP_ICMPH_LEN
,

122 (
uù_Àn
 - 
UIP_IPH_LEN
 - 
ãmp_ext_Àn
 - 
UIP_ICMPH_LEN
));

124 
uù_ext_Àn
=
ãmp_ext_Àn
;

128 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

129 
uù_Àn
 -
uù_ext_Àn
;

130 
UIP_IP_BUF
->
Àn
[0] = ((
uù_Àn
 - 
UIP_IPH_LEN
) >> 8);

131 
UIP_IP_BUF
->
Àn
[1] = ((
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff);

137 
	`memmove
((
uöt8_t
 *)
UIP_ICMP_BUF
 + 
UIP_ICMPH_LEN
 - 
uù_ext_Àn
,

138 (
uöt8_t
 *)
UIP_ICMP_BUF
 + 
UIP_ICMPH_LEN
,

139 (
uù_Àn
 - 
UIP_IPH_LEN
 - 
UIP_ICMPH_LEN
));

140 
uù_ext_Àn
 = 0;

141 #i‡
UIP_CONF_IPV6_RPL


150 
UIP_ICMP_BUF
->
ty≥
 = 
ICMP6_ECHO_REPLY
;

151 
UIP_ICMP_BUF
->
icode
 = 0;

152 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

153 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

155 
	`PRINTF
("Sending Echo ReplyÅo");

156 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

157 
	`PRINTF
("from");

158 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
§cùaddr
);

159 
	`PRINTF
("\n");

160 
	`UIP_STAT
(++
uù_°©
.
icmp
.
£¡
);

164 
	`uù_pög_∑ckë_ödiˇti⁄
();

167 
	`t˝ù_ùv6_ouçut
();

170 
	}
}

174 
	$uù_icmp6_îr‹_ouçut
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt32_t
 
∑øm
)

178 i‡(
uù_ext_Àn
) {

179 if(
UIP_EXT_BUF
->
√xt
 =
UIP_PROTO_ICMP6
 && 
UIP_ICMP_BUF
->
ty≥
 < 128){

180 
uù_Àn
 = 0;

184 if(
UIP_IP_BUF
->
¥Ÿo
 =
UIP_PROTO_ICMP6
 && 
UIP_ICMP_BUF
->
ty≥
 < 128){

185 
uù_Àn
 = 0;

190 #i‡
UIP_CONF_IPV6_RPL


191 
uù_ext_Àn
 = 
	`Ωl_övît_hódî
();

193 
uù_ext_Àn
 = 0;

197 
	`uù_ùaddr_c›y
(&
tmp_ùaddr
, &
UIP_IP_BUF
->
de°ùaddr
);

199 
uù_Àn
 +
UIP_IPICMPH_LEN
 + 
UIP_ICMP6_ERROR_LEN
;

201 if(
uù_Àn
 > 
UIP_LINK_MTU
)

202 
uù_Àn
 = 
UIP_LINK_MTU
;

204 
	`memmove
((
uöt8_t
 *)
UIP_ICMP6_ERROR_BUF
 + 
uù_ext_Àn
 + 
UIP_ICMP6_ERROR_LEN
,

205 (*)
UIP_IP_BUF
, 
uù_Àn
 - 
UIP_IPICMPH_LEN
 - 
uù_ext_Àn
 - 
UIP_ICMP6_ERROR_LEN
);

207 
UIP_IP_BUF
->
vtc
 = 0x60;

208 
UIP_IP_BUF
->
tcÊow
 = 0;

209 
UIP_IP_BUF
->
Êow
 = 0;

210 i‡(
uù_ext_Àn
) {

211 
UIP_FIRST_EXT_BUF
->
√xt
 = 
UIP_PROTO_ICMP6
;

213 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

215 
UIP_IP_BUF
->
âl
 = 
uù_ds6_if
.
cur_h›_limô
;

219 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)){

220 
uù_Àn
 = 0;

224 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &UIP_IP_BUF->
§cùaddr
);

226 if(
	`uù_is_addr_mˇ°
(&
tmp_ùaddr
)){

227 if(
ty≥
 =
ICMP6_PARAM_PROB
 && 
code
 =
ICMP6_PARAMPROB_OPTION
){

228 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &
tmp_ùaddr
);

230 
uù_Àn
 = 0;

234 #i‡
UIP_CONF_ROUTER


236 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &
tmp_ùaddr
);

238 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
§cùaddr
, &
tmp_ùaddr
);

242 
UIP_ICMP_BUF
->
ty≥
 =Åype;

243 
UIP_ICMP_BUF
->
icode
 = 
code
;

244 
UIP_ICMP6_ERROR_BUF
->
∑øm
 = 
	`uù_ht⁄l
(param);

245 
UIP_IP_BUF
->
Àn
[0] = ((
uù_Àn
 - 
UIP_IPH_LEN
) >> 8);

246 
UIP_IP_BUF
->
Àn
[1] = ((
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff);

247 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

248 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

250 
	`UIP_STAT
(++
uù_°©
.
icmp
.
£¡
);

252 
	`PRINTF
("Sending ICMPv6 ERROR messageÅo");

253 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

254 
	`PRINTF
("from");

255 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
§cùaddr
);

256 
	`PRINTF
("\n");

258 
	}
}

261 
	$uù_pög_∑ckë_ödiˇti⁄
()

263 
uöt8_t
 
i
;

265 
	`BSP_TOGGLE_LED1
();

266 
i
=0;i<400;i++)

267 
	`BSP_DELAY_USECS
(1000);

268 
	`BSP_TOGGLE_LED1
();

269 
	}
}

273 
	$uù_icmp6_£nd
(
uù_ùaddr_t
 *
de°
, 
ty≥
, 
code
, 
∑ylﬂd_Àn
)

276 
UIP_IP_BUF
->
vtc
 = 0x60;

277 
UIP_IP_BUF
->
tcÊow
 = 0;

278 
UIP_IP_BUF
->
Êow
 = 0;

279 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

280 
UIP_IP_BUF
->
âl
 = 
uù_ds6_if
.
cur_h›_limô
;

281 
UIP_IP_BUF
->
Àn
[0] = (
UIP_ICMPH_LEN
 + 
∑ylﬂd_Àn
) >> 8;

282 
UIP_IP_BUF
->
Àn
[1] = (
UIP_ICMPH_LEN
 + 
∑ylﬂd_Àn
) & 0xff;

284 
	`mem˝y
(&
UIP_IP_BUF
->
de°ùaddr
, 
de°
, (*dest));

285 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

287 
UIP_ICMP_BUF
->
ty≥
 =Åype;

288 
UIP_ICMP_BUF
->
icode
 = 
code
;

290 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

291 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

293 
uù_Àn
 = 
UIP_IPH_LEN
 + 
UIP_ICMPH_LEN
 + 
∑ylﬂd_Àn
;

294 
	`t˝ù_ùv6_ouçut
();

295 
	}
}

	@core/net/uip-icmp6.h

46 #i‚de‡
__ICMP6_H__


47 
	#__ICMP6_H__


	)

49 
	~"√t/uù.h
"

54 
	#ICMP6_DST_UNREACH
 1

	)

55 
	#ICMP6_PACKET_TOO_BIG
 2

	)

56 
	#ICMP6_TIME_EXCEEDED
 3

	)

57 
	#ICMP6_PARAM_PROB
 4

	)

58 
	#ICMP6_ECHO_REQUEST
 128

	)

59 
	#ICMP6_ECHO_REPLY
 129

	)

61 
	#ICMP6_RS
 133

	)

62 
	#ICMP6_RA
 134

	)

63 
	#ICMP6_NS
 135

	)

64 
	#ICMP6_NA
 136

	)

65 
	#ICMP6_REDIRECT
 137

	)

67 
	#ICMP6_RPL
 155

	)

73 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

74 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

75 
	#ICMP6_DST_UNREACH_NOTNEIGHBOR
 2

	)

76 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

77 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

78 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

83 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

84 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

89 
	#ICMP6_PARAMPROB_HEADER
 0

	)

90 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

91 
	#ICMP6_PARAMPROB_OPTION
 2

	)

95 
	#UIP_ICMP6_ECHO_REQUEST_LEN
 4

	)

98 
	#UIP_ICMP6_ERROR_LEN
 4

	)

101 
	suù_icmp6_îr‹
{

102 
uöt32_t
 
	m∑øm
;

103 } 
	tuù_icmp6_îr‹
;

114 
uù_icmp6_echo_ªque°_öput
();

123 
uù_icmp6_îr‹_ouçut
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt32_t
 
∑øm
);

133 
uù_icmp6_£nd
(
uù_ùaddr_t
 *
de°
, 
ty≥
, 
code
, 
∑ylﬂd_Àn
);

	@core/net/uip-nd6.c

71 
	~<°rög.h
>

72 
	~"√t/uù-icmp6.h
"

73 
	~"√t/uù-nd6.h
"

74 
	~"√t/uù-ds6.h
"

75 
	~"lib/øndom.h
"

79 
	#DEBUG
 0

	)

82 #i‡
UIP_LOGGING


83 
	~<°dio.h
>

84 
uù_log
(*
msg
);

86 
	#UIP_LOG
(
m
Ë
	`uù_log
(m)

	)

88 
	#UIP_LOG
(
m
)

	)

104 
	#UIP_IP_BUF
 ((
uù_ù_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
]Ë

	)

105 
	#UIP_ICMP_BUF
 ((
uù_icmp_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
]Ë

	)

107 
	#UIP_ND6_RS_BUF
 ((
uù_nd6_rs
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
])

	)

108 
	#UIP_ND6_RA_BUF
 ((
uù_nd6_ø
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
])

	)

109 
	#UIP_ND6_NS_BUF
 ((
uù_nd6_ns
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
])

	)

110 
	#UIP_ND6_NA_BUF
 ((
uù_nd6_«
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
])

	)

113 
	#UIP_ND6_OPT_HDR_BUF
 ((
uù_nd6_›t_hdr
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
])

	)

114 
	#UIP_ND6_OPT_PREFIX_BUF
 ((
uù_nd6_›t_¥efix_öfo
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
])

	)

115 
	#UIP_ND6_OPT_MTU_BUF
 ((
uù_nd6_›t_mtu
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
])

	)

118 
uöt8_t
 
	gnd6_›t_off£t
;

119 
uöt8_t
 *
	gnd6_›t_Œao
;

121 #i‡!
UIP_CONF_ROUTER


122 
uù_nd6_›t_¥efix_öfo
 *
	gnd6_›t_¥efix_öfo
;

123 
uù_ùaddr_t
 
	gùaddr
;

124 
uù_ds6_¥efix_t
 *
	g¥efix
;

126 
uù_ds6_nbr_t
 *
	gnbr
;

127 
uù_ds6_de‰t_t
 *
	gde‰t
;

128 
uù_ds6_addr_t
 *
	gaddr
;

134 
	$¸óã_Œao
(
uöt8_t
 *
Œao
, uöt8_à
ty≥
) {

135 
Œao
[
UIP_ND6_OPT_TYPE_OFFSET
] = 
ty≥
;

136 
Œao
[
UIP_ND6_OPT_LEN_OFFSET
] = 
UIP_ND6_OPT_LLAO_LEN
 >> 3;

137 
	`mem˝y
(&
Œao
[
UIP_ND6_OPT_DATA_OFFSET
], &
uù_Œaddr
, 
UIP_LLADDR_LEN
);

139 
	`mem£t
(&
Œao
[
UIP_ND6_OPT_DATA_OFFSET
 + 
UIP_LLADDR_LEN
], 0,

140 
UIP_ND6_OPT_LLAO_LEN
 - 2 - 
UIP_LLADDR_LEN
);

141 
	}
}

147 
	$uù_nd6_ns_öput
()

149 
uöt8_t
 
Êags
;

150 
	`UIP_STAT
(++
uù_°©
.
nd6
.
ªcv
);

152 #i‡
UIP_CONF_IPV6_CHECKS


153 if((
UIP_IP_BUF
->
âl
 !
UIP_ND6_HOP_LIMIT
) ||

154 (
	`uù_is_addr_mˇ°
(&
UIP_ND6_NS_BUF
->
tgtùaddr
)) ||

155 (
UIP_ICMP_BUF
->
icode
 != 0)) {

156 
disˇrd
;

161 
nd6_›t_Œao
 = 
NULL
;

162 
nd6_›t_off£t
 = 
UIP_ND6_NS_LEN
;

163 
uù_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
 < 
uù_Àn
) {

164 #i‡
UIP_CONF_IPV6_CHECKS


165 if(
UIP_ND6_OPT_HDR_BUF
->
Àn
 == 0) {

166 
disˇrd
;

169 
UIP_ND6_OPT_HDR_BUF
->
ty≥
) {

170 
UIP_ND6_OPT_SLLAO
:

171 
nd6_›t_Œao
 = &
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
];

172 #i‡
UIP_CONF_IPV6_CHECKS


174 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

175 
disˇrd
;

178 
nbr
 = 
	`uù_ds6_nbr_lookup
(&
UIP_IP_BUF
->
§cùaddr
);

179 if(
nbr
 =
NULL
) {

180 
	`uù_ds6_nbr_add
(&
UIP_IP_BUF
->
§cùaddr
,

181 (
uù_Œaddr_t
 *)&
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

182 0, 
NBR_STALE
);

184 if(
	`memcmp
(&
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

185 &
nbr
->
Œaddr
, 
UIP_LLADDR_LEN
) != 0) {

186 
	`mem˝y
(&
nbr
->
Œaddr
, &
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

187 
UIP_LLADDR_LEN
);

188 
nbr
->
°©e
 = 
NBR_STALE
;

190 if(
nbr
->
°©e
 =
NBR_INCOMPLETE
) {

191 
nbr
->
°©e
 = 
NBR_STALE
;

195 #i‡
UIP_CONF_IPV6_CHECKS


202 
nd6_›t_off£t
 +(
UIP_ND6_OPT_HDR_BUF
->
Àn
 << 3);

205 
addr
 = 
	`uù_ds6_addr_lookup
(&
UIP_ND6_NS_BUF
->
tgtùaddr
);

206 if(
addr
 !
NULL
) {

207 #i‡
UIP_ND6_DEF_MAXDADNS
 > 0

208 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

210 #i‡
UIP_CONF_IPV6_CHECKS


211 if(!
	`uù_is_addr_sﬁicôed_node
(&
UIP_IP_BUF
->
de°ùaddr
)) {

212 
	`PRINTF
("NSÑeceived is bad\n");

213 
disˇrd
;

216 if(
addr
->
°©e
 !
ADDR_TENTATIVE
) {

217 
	`uù_¸óã_lökloˇl_Æ odes_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
);

218 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

219 
Êags
 = 
UIP_ND6_NA_FLAG_OVERRIDE
;

220 
¸óã_«
;

223 
	`uù_ds6_dad_Áûed
(
addr
);

224 
disˇrd
;

227 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

229 
disˇrd
;

232 #i‡
UIP_CONF_IPV6_CHECKS


233 if(
	`uù_ds6_is_my_addr
(&
UIP_IP_BUF
->
§cùaddr
)) {

240 
disˇrd
;

245 if(
	`uù_is_addr_sﬁicôed_node
(&
UIP_IP_BUF
->
de°ùaddr
)) {

246 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &UIP_IP_BUF->
§cùaddr
);

247 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
§cùaddr
, &
UIP_ND6_NS_BUF
->
tgtùaddr
);

248 
Êags
 = 
UIP_ND6_NA_FLAG_SOLICITED
 | 
UIP_ND6_NA_FLAG_OVERRIDE
;

249 
¸óã_«
;

253 if(
	`uù_ds6_addr_lookup
(&
UIP_IP_BUF
->
de°ùaddr
Ë=
addr
) {

254 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &UIP_IP_BUF->
§cùaddr
);

255 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
§cùaddr
, &
UIP_ND6_NS_BUF
->
tgtùaddr
);

256 
Êags
 = 
UIP_ND6_NA_FLAG_SOLICITED
 | 
UIP_ND6_NA_FLAG_OVERRIDE
;

257 
¸óã_«
;

259 #i‡
UIP_CONF_IPV6_CHECKS


260 
disˇrd
;

264 
disˇrd
;

268 
¸óã_«
:

270 #i‡
UIP_CONF_ROUTER


271 
Êags
 = fœg†| 
UIP_ND6_NA_FLAG_ROUTER
;

273 
uù_ext_Àn
 = 0;

274 
UIP_IP_BUF
->
vtc
 = 0x60;

275 
UIP_IP_BUF
->
tcÊow
 = 0;

276 
UIP_IP_BUF
->
Êow
 = 0;

277 
UIP_IP_BUF
->
Àn
[0] = 0;

278 
UIP_IP_BUF
->
Àn
[1] = 
UIP_ICMPH_LEN
 + 
UIP_ND6_NA_LEN
 + 
UIP_ND6_OPT_LLAO_LEN
;

279 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

280 
UIP_IP_BUF
->
âl
 = 
UIP_ND6_HOP_LIMIT
;

282 
UIP_ICMP_BUF
->
ty≥
 = 
ICMP6_NA
;

283 
UIP_ICMP_BUF
->
icode
 = 0;

285 
UIP_ND6_NA_BUF
->
Êag§e£rved
 = 
Êags
;

286 
	`mem˝y
(&
UIP_ND6_NA_BUF
->
tgtùaddr
, &
addr
->
ùaddr
, (
uù_ùaddr_t
));

288 
	`¸óã_Œao
(&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
UIP_ND6_NA_LEN
],

289 
UIP_ND6_OPT_TLLAO
);

291 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

292 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

294 
uù_Àn
 =

295 
UIP_IPH_LEN
 + 
UIP_ICMPH_LEN
 + 
UIP_ND6_NA_LEN
 + 
UIP_ND6_OPT_LLAO_LEN
;

297 
	`UIP_STAT
(++
uù_°©
.
nd6
.
£¡
);

300 
disˇrd
:

301 
uù_Àn
 = 0;

303 
	}
}

309 
	$uù_nd6_ns_ouçut
(
uù_ùaddr_t
 * 
§c
, uù_ùaddr_à* 
de°
, uù_ùaddr_à* 
tgt
)

311 
uù_ext_Àn
 = 0;

312 
UIP_IP_BUF
->
vtc
 = 0x60;

313 
UIP_IP_BUF
->
tcÊow
 = 0;

314 
UIP_IP_BUF
->
Êow
 = 0;

315 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

316 
UIP_IP_BUF
->
âl
 = 
UIP_ND6_HOP_LIMIT
;

318 if(
de°
 =
NULL
) {

319 
	`uù_¸óã_sﬁicôed_node
(
tgt
, &
UIP_IP_BUF
->
de°ùaddr
);

321 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, 
de°
);

323 
UIP_ICMP_BUF
->
ty≥
 = 
ICMP6_NS
;

324 
UIP_ICMP_BUF
->
icode
 = 0;

325 
UIP_ND6_NS_BUF
->
ª£rved
 = 0;

326 
	`uù_ùaddr_c›y
((
uù_ùaddr_t
 *Ë&
UIP_ND6_NS_BUF
->
tgtùaddr
, 
tgt
);

327 
UIP_IP_BUF
->
Àn
[0] = 0;

332 if(!(
	`uù_ds6_is_my_addr
(
tgt
))) {

333 if(
§c
 !
NULL
) {

334 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
§cùaddr
, 
§c
);

336 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

338 i‡(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

339 
uù_Àn
 = 0;

342 
UIP_IP_BUF
->
Àn
[1] =

343 
UIP_ICMPH_LEN
 + 
UIP_ND6_NS_LEN
 + 
UIP_ND6_OPT_LLAO_LEN
;

345 
	`¸óã_Œao
(&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
UIP_ND6_NS_LEN
],

346 
UIP_ND6_OPT_SLLAO
);

348 
uù_Àn
 =

349 
UIP_IPH_LEN
 + 
UIP_ICMPH_LEN
 + 
UIP_ND6_NS_LEN
 + 
UIP_ND6_OPT_LLAO_LEN
;

351 
	`uù_¸óã_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
);

352 
UIP_IP_BUF
->
Àn
[1] = 
UIP_ICMPH_LEN
 + 
UIP_ND6_NS_LEN
;

353 
uù_Àn
 = 
UIP_IPH_LEN
 + 
UIP_ICMPH_LEN
 + 
UIP_ND6_NS_LEN
;

356 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

357 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

359 
	`UIP_STAT
(++
uù_°©
.
nd6
.
£¡
);

361 
	}
}

367 
	$uù_nd6_«_öput
()

369 
uöt8_t
 
is_Œch™ge
;

370 
uöt8_t
 
is_rouãr
;

371 
uöt8_t
 
is_sﬁicôed
;

372 
uöt8_t
 
is_ovîride
;

374 
	`UIP_STAT
(++
uù_°©
.
nd6
.
ªcv
);

380 
is_Œch™ge
 = 0;

381 
is_rouãr
 = ((
UIP_ND6_NA_BUF
->
Êag§e£rved
 & 
UIP_ND6_NA_FLAG_ROUTER
));

382 
is_sﬁicôed
 =

383 ((
UIP_ND6_NA_BUF
->
Êag§e£rved
 & 
UIP_ND6_NA_FLAG_SOLICITED
));

384 
is_ovîride
 =

385 ((
UIP_ND6_NA_BUF
->
Êag§e£rved
 & 
UIP_ND6_NA_FLAG_OVERRIDE
));

387 #i‡
UIP_CONF_IPV6_CHECKS


388 if((
UIP_IP_BUF
->
âl
 !
UIP_ND6_HOP_LIMIT
) ||

389 (
UIP_ICMP_BUF
->
icode
 != 0) ||

390 (
	`uù_is_addr_mˇ°
(&
UIP_ND6_NA_BUF
->
tgtùaddr
)) ||

391 (
is_sﬁicôed
 && 
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
))) {

392 
disˇrd
;

397 
nd6_›t_off£t
 = 
UIP_ND6_NA_LEN
;

398 
nd6_›t_Œao
 = 
NULL
;

399 
uù_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
 < 
uù_Àn
) {

400 #i‡
UIP_CONF_IPV6_CHECKS


401 if(
UIP_ND6_OPT_HDR_BUF
->
Àn
 == 0) {

402 
disˇrd
;

405 
UIP_ND6_OPT_HDR_BUF
->
ty≥
) {

406 
UIP_ND6_OPT_TLLAO
:

407 
nd6_›t_Œao
 = (
uöt8_t
 *)
UIP_ND6_OPT_HDR_BUF
;

412 
nd6_›t_off£t
 +(
UIP_ND6_OPT_HDR_BUF
->
Àn
 << 3);

414 
addr
 = 
	`uù_ds6_addr_lookup
(&
UIP_ND6_NA_BUF
->
tgtùaddr
);

416 if(
addr
 !
NULL
) {

417 #i‡
UIP_ND6_DEF_MAXDADNS
 > 0

418 if(
addr
->
°©e
 =
ADDR_TENTATIVE
) {

419 
	`uù_ds6_dad_Áûed
(
addr
);

422 
disˇrd
;

424 
nbr
 = 
	`uù_ds6_nbr_lookup
(&
UIP_ND6_NA_BUF
->
tgtùaddr
);

425 if(
nbr
 =
NULL
) {

426 
disˇrd
;

428 if(
nd6_›t_Œao
 != 0) {

429 
is_Œch™ge
 =

430 
	`memcmp
(&
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
], (*)(&
nbr
->
Œaddr
),

431 
UIP_LLADDR_LEN
);

433 if(
nbr
->
°©e
 =
NBR_INCOMPLETE
) {

434 if(
nd6_›t_Œao
 =
NULL
) {

435 
disˇrd
;

437 
	`mem˝y
(&
nbr
->
Œaddr
, &
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

438 
UIP_LLADDR_LEN
);

439 if(
is_sﬁicôed
) {

440 
nbr
->
°©e
 = 
NBR_REACHABLE
;

441 
nbr
->
nscou¡
 = 0;

444 
	`°imî_£t
(&(
nbr
->
ªachabÀ
), 
uù_ds6_if
.
ªachabÀ_time
 / 1000);

447 
nbr
->
°©e
 = 
NBR_STALE
;

449 
nbr
->
i§ouãr
 = 
is_rouãr
;

451 if(!
is_ovîride
 && 
is_Œch™ge
) {

452 if(
nbr
->
°©e
 =
NBR_REACHABLE
) {

453 
nbr
->
°©e
 = 
NBR_STALE
;

455 
disˇrd
;

457 if(
is_ovîride
 || (!is_ovîridê&& 
nd6_›t_Œao
 !0 && !
is_Œch™ge
)

458 || 
nd6_›t_Œao
 == 0) {

459 if(
nd6_›t_Œao
 != 0) {

460 
	`mem˝y
(&
nbr
->
Œaddr
, &
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

461 
UIP_LLADDR_LEN
);

463 if(
is_sﬁicôed
) {

464 
nbr
->
°©e
 = 
NBR_REACHABLE
;

466 
	`°imî_£t
(&(
nbr
->
ªachabÀ
), 
uù_ds6_if
.
ªachabÀ_time
 / 1000);

468 if(
nd6_›t_Œao
 !0 && 
is_Œch™ge
) {

469 
nbr
->
°©e
 = 
NBR_STALE
;

474 if(
nbr
->
i§ouãr
 && !
is_rouãr
) {

475 
de‰t
 = 
	`uù_ds6_de‰t_lookup
(&
UIP_IP_BUF
->
§cùaddr
);

476 if(
de‰t
 !
NULL
) {

477 
	`uù_ds6_de‰t_rm
(
de‰t
);

480 
nbr
->
i§ouãr
 = 
is_rouãr
;

483 #i‡
UIP_CONF_IPV6_QUEUE_PKT


491 if(
	`uù_∑ckëqueue_buÊí
(&
nbr
->
∑ckëh™dÀ
) != 0) {

492 
uù_Àn
 = 
	`uù_∑ckëqueue_buÊí
(&
nbr
->
∑ckëh™dÀ
);

493 
	`mem˝y
(
UIP_IP_BUF
, 
	`uù_∑ckëqueue_buf
(&
nbr
->
∑ckëh™dÀ
), 
uù_Àn
);

494 
	`uù_∑ckëqueue_‰ì
(&
nbr
->
∑ckëh™dÀ
);

500 
disˇrd
:

501 
uù_Àn
 = 0;

503 
	}
}

506 #i‡
UIP_CONF_ROUTER


507 #i‡
UIP_ND6_SEND_RA


510 
	$uù_nd6_rs_öput
()

513 
	`PRINTF
("Received RS from");

514 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
§cùaddr
);

515 
	`PRINTF
("to");

516 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

517 
	`PRINTF
("\n");

518 
	`UIP_STAT
(++
uù_°©
.
nd6
.
ªcv
);

521 #i‡
UIP_CONF_IPV6_CHECKS


527 if((
UIP_IP_BUF
->
âl
 !
UIP_ND6_HOP_LIMIT
Ë|| (
UIP_ICMP_BUF
->
icode
 != 0)) {

528 
	`PRINTF
("RSÑeceived is bad\n");

529 
disˇrd
;

535 
nd6_›t_off£t
 = 
UIP_ND6_RS_LEN
;

536 
nd6_›t_Œao
 = 
NULL
;

538 
uù_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
 < 
uù_Àn
) {

539 #i‡
UIP_CONF_IPV6_CHECKS


540 if(
UIP_ND6_OPT_HDR_BUF
->
Àn
 == 0) {

541 
	`PRINTF
("RSÑeceived is bad\n");

542 
disˇrd
;

545 
UIP_ND6_OPT_HDR_BUF
->
ty≥
) {

546 
UIP_ND6_OPT_SLLAO
:

547 
nd6_›t_Œao
 = 
UIP_ND6_OPT_HDR_BUF
;

550 
	`PRINTF
("ND optionÇot supported in RS\n");

553 
nd6_›t_off£t
 +(
UIP_ND6_OPT_HDR_BUF
->
Àn
 << 3);

556 if(
nd6_›t_Œao
 !
NULL
) {

557 #i‡
UIP_CONF_IPV6_CHECKS


558 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

559 
	`PRINTF
("RSÑeceived is bad\n");

560 
disˇrd
;

563 if((
nbr
 = 
	`uù_ds6_nbr_lookup
(&
UIP_IP_BUF
->
§cùaddr
)Ë=
NULL
) {

565 
	`uù_ds6_nbr_add
(&
UIP_IP_BUF
->
§cùaddr
,

566 &
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
], 0, 
NBR_STALE
);

569 if(
	`memcmp
(&
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

570 &
nbr
->
Œaddr
, 
UIP_LLADDR_LEN
) != 0) {

571 
	`mem˝y
(&
nbr
->
Œaddr
, &
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

572 
UIP_LLADDR_LEN
);

573 
nbr
->
°©e
 = 
NBR_STALE
;

575 
nbr
->
i§ouãr
 = 0;

577 #i‡
UIP_CONF_IPV6_CHECKS


583 
	`uù_ds6_£nd_ø_sﬁlicôed
();

585 
disˇrd
:

586 
uù_Àn
 = 0;

588 
	}
}

592 
	$uù_nd6_ø_ouçut
(
uù_ùaddr_t
 * 
de°
)

595 
UIP_IP_BUF
->
vtc
 = 0x60;

596 
UIP_IP_BUF
->
tcÊow
 = 0;

597 
UIP_IP_BUF
->
Êow
 = 0;

598 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

599 
UIP_IP_BUF
->
âl
 = 
UIP_ND6_HOP_LIMIT
;

601 if(
de°
 =
NULL
) {

602 
	`uù_¸óã_lökloˇl_Æ odes_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
);

605 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, 
de°
);

607 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

609 
UIP_ICMP_BUF
->
ty≥
 = 
ICMP6_RA
;

610 
UIP_ICMP_BUF
->
icode
 = 0;

612 
UIP_ND6_RA_BUF
->
cur_âl
 = 
uù_ds6_if
.
cur_h›_limô
;

614 
UIP_ND6_RA_BUF
->
Êags_ª£rved
 =

615 (
UIP_ND6_M_FLAG
 << 7Ë| (
UIP_ND6_O_FLAG
 << 6);

617 
UIP_ND6_RA_BUF
->
rouãr_li„time
 = 
	`uù_ht⁄s
(
UIP_ND6_ROUTER_LIFETIME
);

620 
UIP_ND6_RA_BUF
->
ªachabÀ_time
 = 0;

621 
UIP_ND6_RA_BUF
->
ªå™s_timî
 = 0;

623 
uù_Àn
 = 
UIP_IPH_LEN
 + 
UIP_ICMPH_LEN
 + 
UIP_ND6_RA_LEN
;

624 
nd6_›t_off£t
 = 
UIP_ND6_RA_LEN
;

628 
¥efix
 = 
uù_ds6_¥efix_li°
;

629 
¥efix
 < 
uù_ds6_¥efix_li°
 + 
UIP_DS6_PREFIX_NB
;Örefix++) {

630 if((
¥efix
->
isu£d
Ë&& (¥efix->
advîti£
)) {

631 
UIP_ND6_OPT_PREFIX_BUF
->
ty≥
 = 
UIP_ND6_OPT_PREFIX_INFO
;

632 
UIP_ND6_OPT_PREFIX_BUF
->
Àn
 = 
UIP_ND6_OPT_PREFIX_INFO_LEN
 / 8;

633 
UIP_ND6_OPT_PREFIX_BUF
->
¥eÊí
 = 
¥efix
->
Àngth
;

634 
UIP_ND6_OPT_PREFIX_BUF
->
Êag§e£rved1
 = 
¥efix
->
l_a_ª£rved
;

635 
UIP_ND6_OPT_PREFIX_BUF
->
vÆid…
 = 
	`uù_ht⁄l
(
¥efix
->
vli„time
);

636 
UIP_ND6_OPT_PREFIX_BUF
->
¥e„ºed…
 = 
	`uù_ht⁄l
(
¥efix
->
∂i„time
);

637 
UIP_ND6_OPT_PREFIX_BUF
->
ª£rved2
 = 0;

638 
	`uù_ùaddr_c›y
(&(
UIP_ND6_OPT_PREFIX_BUF
->
¥efix
), &’ªfix->
ùaddr
));

639 
nd6_›t_off£t
 +
UIP_ND6_OPT_PREFIX_INFO_LEN
;

640 
uù_Àn
 +
UIP_ND6_OPT_PREFIX_INFO_LEN
;

645 
	`¸óã_Œao
((
uöt8_t
 *)
UIP_ND6_OPT_HDR_BUF
, 
UIP_ND6_OPT_SLLAO
);

647 
uù_Àn
 +
UIP_ND6_OPT_LLAO_LEN
;

648 
nd6_›t_off£t
 +
UIP_ND6_OPT_LLAO_LEN
;

651 
UIP_ND6_OPT_MTU_BUF
->
ty≥
 = 
UIP_ND6_OPT_MTU
;

652 
UIP_ND6_OPT_MTU_BUF
->
Àn
 = 
UIP_ND6_OPT_MTU_LEN
 >> 3;

653 
UIP_ND6_OPT_MTU_BUF
->
ª£rved
 = 0;

655 
UIP_ND6_OPT_MTU_BUF
->
mtu
 = 
	`uù_ht⁄l
(1500);

657 
uù_Àn
 +
UIP_ND6_OPT_MTU_LEN
;

658 
nd6_›t_off£t
 +
UIP_ND6_OPT_MTU_LEN
;

659 
UIP_IP_BUF
->
Àn
[0] = ((
uù_Àn
 - 
UIP_IPH_LEN
) >> 8);

660 
UIP_IP_BUF
->
Àn
[1] = ((
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff);

663 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

664 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

666 
	`UIP_STAT
(++
uù_°©
.
nd6
.
£¡
);

667 
	`PRINTF
("Sending RAÅo");

668 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

669 
	`PRINTF
("from");

670 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
§cùaddr
);

671 
	`PRINTF
("\n");

673 
	}
}

677 #i‡!
UIP_CONF_ROUTER


680 
	$uù_nd6_rs_ouçut
()

682 
UIP_IP_BUF
->
vtc
 = 0x60;

683 
UIP_IP_BUF
->
tcÊow
 = 0;

684 
UIP_IP_BUF
->
Êow
 = 0;

685 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_ICMP6
;

686 
UIP_IP_BUF
->
âl
 = 
UIP_ND6_HOP_LIMIT
;

687 
	`uù_¸óã_lökloˇl_ÆÃouãrs_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
);

688 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

689 
UIP_ICMP_BUF
->
ty≥
 = 
ICMP6_RS
;

690 
UIP_ICMP_BUF
->
icode
 = 0;

691 
UIP_IP_BUF
->
Àn
[0] = 0;

693 if(
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) {

694 
UIP_IP_BUF
->
Àn
[1] = 
UIP_ICMPH_LEN
 + 
UIP_ND6_RS_LEN
;

695 
uù_Àn
 = 
uù_l3_icmp_hdr_Àn
 + 
UIP_ND6_RS_LEN
;

697 
uù_Àn
 = 
uù_l3_icmp_hdr_Àn
 + 
UIP_ND6_RS_LEN
 + 
UIP_ND6_OPT_LLAO_LEN
;

698 
UIP_IP_BUF
->
Àn
[1] =

699 
UIP_ICMPH_LEN
 + 
UIP_ND6_RS_LEN
 + 
UIP_ND6_OPT_LLAO_LEN
;

701 
	`¸óã_Œao
(&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
 + 
UIP_ND6_RS_LEN
],

702 
UIP_ND6_OPT_SLLAO
);

705 
UIP_ICMP_BUF
->
icmpchksum
 = 0;

706 
UIP_ICMP_BUF
->
icmpchksum
 = ~
	`uù_icmp6chksum
();

708 
	`UIP_STAT
(++
uù_°©
.
nd6
.
£¡
);

710 
	}
}

715 
	$uù_nd6_ø_öput
()

717 
	`UIP_STAT
(++
uù_°©
.
nd6
.
ªcv
);

719 #i‡
UIP_CONF_IPV6_CHECKS


720 if((
UIP_IP_BUF
->
âl
 !
UIP_ND6_HOP_LIMIT
) ||

721 (!
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
§cùaddr
)) ||

722 (
UIP_ICMP_BUF
->
icode
 != 0)) {

723 
disˇrd
;

727 if(
UIP_ND6_RA_BUF
->
cur_âl
 != 0) {

728 
uù_ds6_if
.
cur_h›_limô
 = 
UIP_ND6_RA_BUF
->
cur_âl
;

731 if(
UIP_ND6_RA_BUF
->
ªachabÀ_time
 != 0) {

732 if(
uù_ds6_if
.
ba£_ªachabÀ_time
 !=

733 
	`uù_¡ohl
(
UIP_ND6_RA_BUF
->
ªachabÀ_time
)) {

734 
uù_ds6_if
.
ba£_ªachabÀ_time
 = 
	`uù_¡ohl
(
UIP_ND6_RA_BUF
->
ªachabÀ_time
);

735 
uù_ds6_if
.
ªachabÀ_time
 = 
	`uù_ds6_compuã_ªachabÀ_time
();

738 if(
UIP_ND6_RA_BUF
->
ªå™s_timî
 != 0) {

739 
uù_ds6_if
.
ªå™s_timî
 = 
	`uù_¡ohl
(
UIP_ND6_RA_BUF
->retrans_timer);

743 
nd6_›t_off£t
 = 
UIP_ND6_RA_LEN
;

744 
uù_l3_icmp_hdr_Àn
 + 
nd6_›t_off£t
 < 
uù_Àn
) {

745 if(
UIP_ND6_OPT_HDR_BUF
->
Àn
 == 0) {

746 
disˇrd
;

748 
UIP_ND6_OPT_HDR_BUF
->
ty≥
) {

749 
UIP_ND6_OPT_SLLAO
:

750 
nd6_›t_Œao
 = (
uöt8_t
 *Ë
UIP_ND6_OPT_HDR_BUF
;

751 
nbr
 = 
	`uù_ds6_nbr_lookup
(&
UIP_IP_BUF
->
§cùaddr
);

752 if(
nbr
 =
NULL
) {

753 
nbr
 = 
	`uù_ds6_nbr_add
(&
UIP_IP_BUF
->
§cùaddr
,

754 (
uù_Œaddr_t
 *)&
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

755 1, 
NBR_STALE
);

757 if(
nbr
->
°©e
 =
NBR_INCOMPLETE
) {

758 
nbr
->
°©e
 = 
NBR_STALE
;

760 if(
	`memcmp
(&
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

761 &
nbr
->
Œaddr
, 
UIP_LLADDR_LEN
) != 0) {

762 
	`mem˝y
(&
nbr
->
Œaddr
, &
nd6_›t_Œao
[
UIP_ND6_OPT_DATA_OFFSET
],

763 
UIP_LLADDR_LEN
);

764 
nbr
->
°©e
 = 
NBR_STALE
;

766 
nbr
->
i§ouãr
 = 1;

769 
UIP_ND6_OPT_MTU
:

770 
uù_ds6_if
.
lök_mtu
 =

771 
	`uù_¡ohl
(((
uù_nd6_›t_mtu
 *Ë
UIP_ND6_OPT_HDR_BUF
)->
mtu
);

773 
UIP_ND6_OPT_PREFIX_INFO
:

774 
nd6_›t_¥efix_öfo
 = (
uù_nd6_›t_¥efix_öfo
 *Ë
UIP_ND6_OPT_HDR_BUF
;

775 if((
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
) >=

776 
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
¥e„ºed…
))

777 && (!
	`uù_is_addr_lök_loˇl
(&
nd6_›t_¥efix_öfo
->
¥efix
))) {

779 if(
nd6_›t_¥efix_öfo
->
Êag§e£rved1
 & 
UIP_ND6_RA_FLAG_ONLINK
) {

780 
¥efix
 =

781 
	`uù_ds6_¥efix_lookup
(&
nd6_›t_¥efix_öfo
->
¥efix
,

782 
nd6_›t_¥efix_öfo
->
¥eÊí
);

783 if(
¥efix
 =
NULL
) {

784 if(
nd6_›t_¥efix_öfo
->
vÆid…
 != 0) {

785 if(
nd6_›t_¥efix_öfo
->
vÆid…
 !
UIP_ND6_INFINITE_LIFETIME
) {

786 
¥efix
 = 
	`uù_ds6_¥efix_add
(&
nd6_›t_¥efix_öfo
->prefix,

787 
nd6_›t_¥efix_öfo
->
¥eÊí
,

788 
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->

789 
vÆid…
));

791 
¥efix
 = 
	`uù_ds6_¥efix_add
(&
nd6_›t_¥efix_öfo
->prefix,

792 
nd6_›t_¥efix_öfo
->
¥eÊí
, 0);

796 
nd6_›t_¥efix_öfo
->
vÆid…
) {

798 
	`uù_ds6_¥efix_rm
(
¥efix
);

800 
UIP_ND6_INFINITE_LIFETIME
:

801 
¥efix
->
isöföôe
 = 1;

804 
	`°imî_£t
(&
¥efix
->
vli„time
,

805 
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
));

806 
¥efix
->
isöföôe
 = 0;

813 if((
nd6_›t_¥efix_öfo
->
Êag§e£rved1
 & 
UIP_ND6_RA_FLAG_AUTONOMOUS
)

814 && (
nd6_›t_¥efix_öfo
->
vÆid…
 != 0)

815 && (
nd6_›t_¥efix_öfo
->
¥eÊí
 =
UIP_DEFAULT_PREFIX_LEN
)) {

817 
	`uù_ùaddr_c›y
(&
ùaddr
, &
nd6_›t_¥efix_öfo
->
¥efix
);

818 
	`uù_ds6_£t_addr_iid
(&
ùaddr
, &
uù_Œaddr
);

819 
addr
 = 
	`uù_ds6_addr_lookup
(&
ùaddr
);

820 if((
addr
 !
NULL
Ë&& (addr->
ty≥
 =
ADDR_AUTOCONF
)) {

821 if(
nd6_›t_¥efix_öfo
->
vÆid…
 !
UIP_ND6_INFINITE_LIFETIME
) {

823 if((
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
) > 2 * 60 * 60) ||

824 (
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
) >

825 
	`°imî_ªmaöög
(&
addr
->
vli„time
))) {

826 
	`°imî_£t
(&
addr
->
vli„time
,

827 
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
));

829 
	`°imî_£t
(&
addr
->
vli„time
, 2 * 60 * 60);

831 
addr
->
isöföôe
 = 0;

833 
addr
->
isöföôe
 = 1;

836 if(
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
) ==

837 
UIP_ND6_INFINITE_LIFETIME
) {

838 
	`uù_ds6_addr_add
(&
ùaddr
, 0, 
ADDR_AUTOCONF
);

840 
	`uù_ds6_addr_add
(&
ùaddr
, 
	`uù_¡ohl
(
nd6_›t_¥efix_öfo
->
vÆid…
),

841 
ADDR_AUTOCONF
);

851 
nd6_›t_off£t
 +(
UIP_ND6_OPT_HDR_BUF
->
Àn
 << 3);

854 
de‰t
 = 
	`uù_ds6_de‰t_lookup
(&
UIP_IP_BUF
->
§cùaddr
);

855 if(
UIP_ND6_RA_BUF
->
rouãr_li„time
 != 0) {

856 if(
nbr
 !
NULL
) {

857 
nbr
->
i§ouãr
 = 1;

859 if(
de‰t
 =
NULL
) {

860 
	`uù_ds6_de‰t_add
(&
UIP_IP_BUF
->
§cùaddr
,

862 )(
	`uù_¡ohs
(
UIP_ND6_RA_BUF
->
rouãr_li„time
)));

864 
	`°imî_£t
(&(
de‰t
->
li„time
),

865 ()(
	`uù_¡ohs
(
UIP_ND6_RA_BUF
->
rouãr_li„time
)));

868 if(
de‰t
 !
NULL
) {

869 
	`uù_ds6_de‰t_rm
(
de‰t
);

873 #i‡
UIP_CONF_IPV6_QUEUE_PKT


882 if(
nbr
 !
NULL
 && 
	`uù_∑ckëqueue_buÊí
(&nbr->
∑ckëh™dÀ
) != 0) {

883 
uù_Àn
 = 
	`uù_∑ckëqueue_buÊí
(&
nbr
->
∑ckëh™dÀ
);

884 
	`mem˝y
(
UIP_IP_BUF
, 
	`uù_∑ckëqueue_buf
(&
nbr
->
∑ckëh™dÀ
), 
uù_Àn
);

885 
	`uù_∑ckëqueue_‰ì
(&
nbr
->
∑ckëh™dÀ
);

891 
disˇrd
:

892 
uù_Àn
 = 0;

894 
	}
}

	@core/net/uip-nd6.h

45 #i‚de‡
__UIP_ND6_H__


46 
	#__UIP_ND6_H__


	)

48 
	~"√t/uù.h
"

49 
	~"sys/°imî.h
"

55 
	#UIP_ND6_HOP_LIMIT
 255

	)

57 
	#UIP_ND6_INFINITE_LIFETIME
 0xFFFFFFFF

	)

60 #i‚de‡
UIP_CONF_ND6_DEF_MAXDADNS


62 #i‡
UIP_CONF_LL_802154


63 
	#UIP_ND6_DEF_MAXDADNS
 0

	)

65 
	#UIP_ND6_DEF_MAXDADNS
 1

	)

68 
	#UIP_ND6_DEF_MAXDADNS
 
UIP_CONF_ND6_DEF_MAXDADNS


	)

73 
	#UIP_ND6_MAX_RTR_SOLICITATION_DELAY
 1

	)

74 
	#UIP_ND6_RTR_SOLICITATION_INTERVAL
 4

	)

75 
	#UIP_ND6_MAX_RTR_SOLICITATIONS
 3

	)

80 #i‚de‡
UIP_CONF_ND6_SEND_RA


81 
	#UIP_ND6_SEND_RA
 1

	)

83 
	#UIP_ND6_SEND_RA
 
UIP_CONF_ND6_SEND_RA


	)

85 
	#UIP_ND6_MAX_RA_INTERVAL
 600

	)

86 
	#UIP_ND6_MIN_RA_INTERVAL
 (
UIP_ND6_MAX_RA_INTERVAL
 / 3)

	)

87 
	#UIP_ND6_M_FLAG
 0

	)

88 
	#UIP_ND6_O_FLAG
 0

	)

89 
	#UIP_ND6_ROUTER_LIFETIME
 3 * 
UIP_ND6_MAX_RA_INTERVAL


	)

91 
	#UIP_ND6_MAX_INITIAL_RA_INTERVAL
 16

	)

92 
	#UIP_ND6_MAX_INITIAL_RAS
 3

	)

93 
	#UIP_ND6_MIN_DELAY_BETWEEN_RAS
 3

	)

95 
	#UIP_ND6_MAX_RA_DELAY_TIME_MS
 500

	)

100 
	#UIP_ND6_MAX_MULTICAST_SOLICIT
 3

	)

101 
	#UIP_ND6_MAX_UNICAST_SOLICIT
 3

	)

102 #ifde‡
UIP_CONF_ND6_REACHABLE_TIME


103 
	#UIP_ND6_REACHABLE_TIME
 
UIP_CONF_ND6_REACHABLE_TIME


	)

105 
	#UIP_ND6_REACHABLE_TIME
 30000

	)

107 #ifde‡
UIP_CONF_ND6_RETRANS_TIMER


108 
	#UIP_ND6_RETRANS_TIMER
 
UIP_CONF_ND6_RETRANS_TIMER


	)

110 
	#UIP_ND6_RETRANS_TIMER
 1000

	)

112 
	#UIP_ND6_DELAY_FIRST_PROBE_TIME
 5

	)

113 
	#UIP_ND6_MIN_RANDOM_FACTOR
(
x
Ë(x / 2)

	)

114 
	#UIP_ND6_MAX_RANDOM_FACTOR
(
x
Ë((xË+ (xË/ 2)

	)

120 
	#UIP_ND6_OPT_SLLAO
 1

	)

121 
	#UIP_ND6_OPT_TLLAO
 2

	)

122 
	#UIP_ND6_OPT_PREFIX_INFO
 3

	)

123 
	#UIP_ND6_OPT_REDIRECTED_HDR
 4

	)

124 
	#UIP_ND6_OPT_MTU
 5

	)

129 
	#UIP_ND6_OPT_TYPE_OFFSET
 0

	)

130 
	#UIP_ND6_OPT_LEN_OFFSET
 1

	)

131 
	#UIP_ND6_OPT_DATA_OFFSET
 2

	)

135 
	#UIP_ND6_NA_LEN
 20

	)

136 
	#UIP_ND6_NS_LEN
 20

	)

137 
	#UIP_ND6_RA_LEN
 12

	)

138 
	#UIP_ND6_RS_LEN
 4

	)

144 
	#UIP_ND6_OPT_HDR_LEN
 2

	)

145 
	#UIP_ND6_OPT_PREFIX_INFO_LEN
 32

	)

146 
	#UIP_ND6_OPT_MTU_LEN
 8

	)

150 #i‡
UIP_CONF_LL_802154


152 
	#UIP_ND6_OPT_SHORT_LLAO_LEN
 8

	)

153 
	#UIP_ND6_OPT_LONG_LLAO_LEN
 16

	)

155 
	#UIP_ND6_OPT_LLAO_LEN
 
UIP_ND6_OPT_LONG_LLAO_LEN


	)

157 #i‡
UIP_CONF_LL_80211


160 
	#UIP_ND6_OPT_LLAO_LEN
 8

	)

163 
	#UIP_ND6_OPT_LLAO_LEN
 8

	)

171 
	#UIP_ND6_NA_FLAG_ROUTER
 0x80

	)

172 
	#UIP_ND6_NA_FLAG_SOLICITED
 0x40

	)

173 
	#UIP_ND6_NA_FLAG_OVERRIDE
 0x20

	)

174 
	#UIP_ND6_RA_FLAG_ONLINK
 0x80

	)

175 
	#UIP_ND6_RA_FLAG_AUTONOMOUS
 0x40

	)

188 
	suù_nd6_ns
 {

189 
uöt32_t
 
	mª£rved
;

190 
uù_ùaddr_t
 
	mtgtùaddr
;

191 } 
	tuù_nd6_ns
;

198 
	suù_nd6_«
 {

199 
uöt8_t
 
	mÊag§e£rved
;

200 
uöt8_t
 
	mª£rved
[3];

201 
uù_ùaddr_t
 
	mtgtùaddr
;

202 } 
	tuù_nd6_«
;

209 
	suù_nd6_rs
 {

210 
uöt32_t
 
	mª£rved
;

211 } 
	tuù_nd6_rs
;

218 
	suù_nd6_ø
 {

219 
uöt8_t
 
	mcur_âl
;

220 
uöt8_t
 
	mÊags_ª£rved
;

221 
uöt16_t
 
	mrouãr_li„time
;

222 
uöt32_t
 
	mªachabÀ_time
;

223 
uöt32_t
 
	mªå™s_timî
;

224 } 
	tuù_nd6_ø
;

231 
	suù_nd6_ªdúe˘
 {

232 
uöt32_t
 
	mª£rved
;

233 
uù_ùaddr_t
 
	mtgtùaddªss
;

234 
uù_ùaddr_t
 
	mde°ùaddªss
;

235 } 
	tuù_nd6_ªdúe˘
;

244 
	suù_nd6_›t_hdr
 {

245 
uöt8_t
 
	mty≥
;

246 
uöt8_t
 
	mÀn
;

247 } 
	tuù_nd6_›t_hdr
;

250 
	suù_nd6_›t_¥efix_öfo
 {

251 
uöt8_t
 
	mty≥
;

252 
uöt8_t
 
	mÀn
;

253 
uöt8_t
 
	m¥eÊí
;

254 
uöt8_t
 
	mÊag§e£rved1
;

255 
uöt32_t
 
	mvÆid…
;

256 
uöt32_t
 
	m¥e„ºed…
;

257 
uöt32_t
 
	mª£rved2
;

258 
uù_ùaddr_t
 
	m¥efix
;

259 } 
	tuù_nd6_›t_¥efix_öfo
 ;

262 
	suù_nd6_›t_mtu
 {

263 
uöt8_t
 
	mty≥
;

264 
uöt8_t
 
	mÀn
;

265 
uöt16_t
 
	mª£rved
;

266 
uöt32_t
 
	mmtu
;

267 } 
	tuù_nd6_›t_mtu
;

270 
	suù_nd6_›t_ªdúe˘ed_hdr
 {

271 
uöt8_t
 
	mty≥
;

272 
uöt8_t
 
	mÀn
;

273 
uöt8_t
 
	mª£rved
[6];

274 } 
	tuù_nd6_›t_ªdúe˘ed_hdr
;

303 
uù_nd6_ns_öput
();

326 
uù_nd6_ns_ouçut
(
uù_ùaddr_t
 *
§c
, uù_ùaddr_à*
de°
, uù_ùaddr_à*
tgt
);

346 
uù_nd6_«_öput
();

348 #i‡
UIP_CONF_ROUTER


349 #i‡
UIP_ND6_SEND_RA


354 
uù_nd6_rs_öput
();

361 
uù_nd6_ø_ouçut
(
uù_ùaddr_t
 *
de°
);

376 
uù_nd6_rs_ouçut
();

389 
uù_nd6_ø_öput
();

394 
uù_≠p£rvî_addr_gë
(
uù_ùaddr_t
 *
ùaddr
);

	@core/net/uip.h

54 #i‚de‡
__UIP_H__


55 
	#__UIP_H__


	)

57 
	~"uù›t.h
"

58 
	~<°döt.h
>

60 
	#CCIF


	)

61 
	#CLIF


	)

63 
	~"mrfi_uù_if.h
"

70 #i‡
UIP_CONF_IPV6


71 
	uuù_ù6addr_t
 {

72 
uöt8_t
 
	mu8
[16];

73 
uöt16_t
 
	mu16
[8];

74 } 
	tuù_ù6addr_t
;

76 
uù_ù6addr_t
 
	tuù_ùaddr_t
;

78 
	uuù_ù4addr_t
 {

79 
uöt8_t
 
	mu8
[4];

80 
uöt16_t
 
	mu16
[2];

82 
uöt32_t
 
	mu32
;

84 } 
	tuù_ù4addr_t
;

85 
uù_ù4addr_t
 
	tuù_ùaddr_t
;

92 
	suù_802154_sh‹èddr
 {

93 
uöt8_t
 
	maddr
[2];

94 } 
	tuù_802154_sh‹èddr
;

96 
	suù_802154_l⁄gaddr
 {

97 
uöt8_t
 
	maddr
[8];

98 } 
	tuù_802154_l⁄gaddr
;

101 
	suù_80211_addr
 {

102 
uöt8_t
 
	maddr
[6];

103 } 
	tuù_80211_addr
;

106 
	suù_ëh_addr
 {

107 
uöt8_t
 
	maddr
[6];

108 } 
	tuù_ëh_addr
;

111 #i‡
UIP_CONF_LL_802154


113 
uù_802154_l⁄gaddr
 
	tuù_Œaddr_t
;

114 
	#UIP_802154_SHORTADDR_LEN
 2

	)

115 
	#UIP_802154_LONGADDR_LEN
 8

	)

116 
	#UIP_LLADDR_LEN
 
UIP_802154_LONGADDR_LEN


	)

118 #i‡
UIP_CONF_LL_80211


120 
uù_80211_addr
 
	tuù_Œaddr_t
;

121 
	#UIP_LLADDR_LEN
 6

	)

124 
uù_ëh_addr
 
	tuù_Œaddr_t
;

125 
	#UIP_LLADDR_LEN
 6

	)

166 
	#uù_£tho°addr
(
addr
Ë
	`uù_ùaddr_c›y
(&
uù_ho°addr
, (addr))

	)

186 
	#uù_gëho°addr
(
addr
Ë
	`uù_ùaddr_c›y
(◊ddr), &
uù_ho°addr
)

	)

198 
	#uù_£tdøddr
(
addr
Ë
	`uù_ùaddr_c›y
(&
uù_døddr
, (addr))

	)

210 
	#uù_£äëmask
(
addr
Ë
	`uù_ùaddr_c›y
(&
uù_√tmask
, (addr))

	)

221 
	#uù_gëdøddr
(
addr
Ë
	`uù_ùaddr_c›y
(◊ddr), &
uù_døddr
)

	)

231 
	#uù_gë√tmask
(
addr
Ë
	`uù_ùaddr_c›y
(◊ddr), &
uù_√tmask
)

	)

248 
uù_öô
();

255 
uù_£tùid
(
uöt16_t
 
id
);

317 
	#uù_öput
(Ë
	`uù_¥o˚ss
(
UIP_DATA
)

	)

362 #i‡
UIP_TCP


363 
	#uù_≥riodic
(
c⁄n
Ëdÿ{ 
uù_c⁄n
 = &
uù_c⁄ns
[conn]; \

364 
	`uù_¥o˚ss
(
UIP_TIMER
); } 0)

	)

370 
	#uù_c⁄n_a˘ive
(
c⁄n
Ë(
uù_c⁄ns
[c⁄n].
t˝°©eÊags
 !
UIP_CLOSED
)

	)

385 
	#uù_≥riodic_c⁄n
(
c⁄n
Ëdÿ{ 
uù_c⁄n
 = conn; \

386 
	`uù_¥o˚ss
(
UIP_TIMER
); } 0)

	)

399 
	#uù_pﬁl_c⁄n
(
c⁄n
Ëdÿ{ 
uù_c⁄n
 = conn; \

400 
	`uù_¥o˚ss
(
UIP_POLL_REQUEST
); } 0)

	)

404 #i‡
UIP_UDP


436 
	#uù_udp_≥riodic
(
c⁄n
Ëdÿ{ 
uù_udp_c⁄n
 = &
uù_udp_c⁄ns
[conn]; \

437 
	`uù_¥o˚ss
(
UIP_UDP_TIMER
); } 0)

	)

453 
	#uù_udp_≥riodic_c⁄n
(
c⁄n
Ëdÿ{ 
uù_udp_c⁄n
 = conn; \

454 
	`uù_¥o˚ss
(
UIP_UDP_TIMER
); } 0)

	)

458 
uù_ªass_ovî
();

488 
uöt32_t
 
	mu32
[(
UIP_BUFSIZE
 + 3) / 4];

489 
uöt8_t
 
	mu8
[
UIP_BUFSIZE
];

490 } 
	tuù_buf_t
;

492 
CCIF
 
uù_buf_t
 
uù_Æig√d_buf
;

493 
	#uù_buf
 (
uù_Æig√d_buf
.
u8
)

	)

522 
uù_li°í
(
uöt16_t
 
p‹t
);

536 
uù_u∆i°í
(
uöt16_t
 
p‹t
);

570 
uù_c⁄n
 *
uù_c⁄√˘
(
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
p‹t
);

583 
	#uù_out°™dög
(
c⁄n
Ë((c⁄n)->
Àn
)

	)

610 
CCIF
 
uù_£nd
(c⁄° *
d©a
, 
Àn
);

622 
	#uù_d©Æí
(Ë
uù_Àn


	)

633 
	#uù_urgd©Æí
(Ë
uù_urgÀn


	)

642 
	#uù_˛o£
(Ë(
uù_Êags
 = 
UIP_CLOSE
)

	)

653 
	#uù_ab‹t
(Ë(
uù_Êags
 = 
UIP_ABORT
)

	)

663 
	#uù_°›
(Ë(
uù_c⁄n
->
t˝°©eÊags
 |
UIP_STOPPED
)

	)

671 
	#uù_°›≥d
(
c⁄n
Ë((c⁄n)->
t˝°©eÊags
 & 
UIP_STOPPED
)

	)

682 
	#uù_ª°¨t
(Ëdÿ{ 
uù_Êags
 |
UIP_NEWDATA
; \

683 
uù_c⁄n
->
t˝°©eÊags
 &~
UIP_STOPPED
; \

684 } 0)

	)

698 
	#uù_udpc⁄√˘i⁄
(Ë(
uù_c⁄n
 =
NULL
)

	)

709 
	#uù_√wd©a
(Ë(
uù_Êags
 & 
UIP_NEWDATA
)

	)

720 
	#uù_acked
(Ë(
uù_Êags
 & 
UIP_ACKDATA
)

	)

732 
	#uù_c⁄√˘ed
(Ë(
uù_Êags
 & 
UIP_CONNECTED
)

	)

742 
	#uù_˛o£d
(Ë(
uù_Êags
 & 
UIP_CLOSE
)

	)

752 
	#uù_ab‹ãd
(Ë(
uù_Êags
 & 
UIP_ABORT
)

	)

762 
	#uù_timedout
(Ë(
uù_Êags
 & 
UIP_TIMEDOUT
)

	)

774 
	#uù_ªxmô
(Ë(
uù_Êags
 & 
UIP_REXMIT
)

	)

788 
	#uù_pﬁl
(Ë(
uù_Êags
 & 
UIP_POLL
)

	)

796 
	#uù_öôülmss
(Ë(
uù_c⁄n
->
öôülmss
)

	)

809 
	#uù_mss
(Ë(
uù_c⁄n
->
mss
)

	)

838 
uù_udp_c⁄n
 *
uù_udp_√w
(c⁄° 
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
Ω‹t
);

847 
	#uù_udp_ªmove
(
c⁄n
Ë(c⁄n)->
Õ‹t
 = 0

	)

859 
	#uù_udp_böd
(
c⁄n
, 
p‹t
Ë(c⁄n)->
Õ‹t
 = 
	)
port

872 
	#uù_udp_£nd
(
Àn
Ë
	`uù_£nd
((*)
uù_≠pd©a
,Üí)

	)

898 
	#uù_ùaddr_to_quad
(
a
Ë◊)->
u8
[0],◊)->u8[1],◊)->u8[2],◊)->u8[3]

	)

926 
	#uù_ùaddr
(
addr
, 
addr0
,
addr1
,
addr2
,
addr3
) do { \

927 (
addr
)->
u8
[0] = 
addr0
; \

928 (
addr
)->
u8
[1] = 
addr1
; \

929 (
addr
)->
u8
[2] = 
addr2
; \

930 (
addr
)->
u8
[3] = 
addr3
; \

931 } 0)

	)

940 
	#uù_ù6addr
(
addr
, 
addr0
,
addr1
,
addr2
,
addr3
,
addr4
,
addr5
,
addr6
,
addr7
) do { \

941 (
addr
)->
u16
[0] = 
	`UIP_HTONS
(
addr0
); \

942 (
addr
)->
u16
[1] = 
	`UIP_HTONS
(
addr1
); \

943 (
addr
)->
u16
[2] = 
	`UIP_HTONS
(
addr2
); \

944 (
addr
)->
u16
[3] = 
	`UIP_HTONS
(
addr3
); \

945 (
addr
)->
u16
[4] = 
	`UIP_HTONS
(
addr4
); \

946 (
addr
)->
u16
[5] = 
	`UIP_HTONS
(
addr5
); \

947 (
addr
)->
u16
[6] = 
	`UIP_HTONS
(
addr6
); \

948 (
addr
)->
u16
[7] = 
	`UIP_HTONS
(
addr7
); \

949 } 0)

	)

958 
	#uù_ù6addr_u8
(
addr
, 
addr0
,
addr1
,
addr2
,
addr3
,
addr4
,
addr5
,
addr6
,
addr7
,
addr8
,
addr9
,
addr10
,
addr11
,
addr12
,
addr13
,
addr14
,
addr15
) do { \

959 (
addr
)->
u8
[0] = 
addr0
; \

960 (
addr
)->
u8
[1] = 
addr1
; \

961 (
addr
)->
u8
[2] = 
addr2
; \

962 (
addr
)->
u8
[3] = 
addr3
; \

963 (
addr
)->
u8
[4] = 
addr4
; \

964 (
addr
)->
u8
[5] = 
addr5
; \

965 (
addr
)->
u8
[6] = 
addr6
; \

966 (
addr
)->
u8
[7] = 
addr7
; \

967 (
addr
)->
u8
[8] = 
addr8
; \

968 (
addr
)->
u8
[9] = 
addr9
; \

969 (
addr
)->
u8
[10] = 
addr10
; \

970 (
addr
)->
u8
[11] = 
addr11
; \

971 (
addr
)->
u8
[12] = 
addr12
; \

972 (
addr
)->
u8
[13] = 
addr13
; \

973 (
addr
)->
u8
[14] = 
addr14
; \

974 (
addr
)->
u8
[15] = 
addr15
; \

975 } 0)

	)

996 #i‚de‡
uù_ùaddr_c›y


997 
	#uù_ùaddr_c›y
(
de°
, 
§c
Ë(*(de°Ë*(§c))

	)

1020 #i‡!
UIP_CONF_IPV6


1021 
	#uù_ùaddr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
u16
[0] == (addr2)->u16[0] && \

1022 (
addr1
)->
u16
[1] =(
addr2
)->u16[1])

	)

1024 
	#uù_ùaddr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
◊ddr1,áddr2, (
uù_ù6addr_t
)Ë=0)

	)

1051 #i‡!
UIP_CONF_IPV6


1052 
	#uù_ùaddr_maskcmp
(
addr1
, 
addr2
, 
mask
) \

1053 (((((
uöt16_t
 *)
addr1
)[0] & ((uöt16_à*)
mask
)[0]) == \

1054 (((
uöt16_t
 *)
addr2
)[0] & ((uöt16_à*)
mask
)[0])) && \

1055 ((((
uöt16_t
 *)
addr1
)[1] & ((uöt16_à*)
mask
)[1]) == \

1056 (((
uöt16_t
 *)
addr2
)[1] & ((uöt16_à*)
mask
)[1])))

	)

1058 
	#uù_ùaddr_¥efixcmp
(
addr1
, 
addr2
, 
Àngth
Ë(
	`memcmp
◊ddr1,áddr2,Üígth>>3Ë=0)

	)

1104 
	#uù_ùaddr_mask
(
de°
, 
§c
, 
mask
) do { \

1105 ((
uöt16_t
 *)
de°
)[0] = ((uöt16_à*)
§c
)[0] & ((uöt16_à*)
mask
)[0]; \

1106 ((
uöt16_t
 *)
de°
)[1] = ((uöt16_à*)
§c
)[1] & ((uöt16_à*)
mask
)[1]; \

1107 } 0)

	)

1127 
	#uù_ùaddr1
(
addr
Ë(◊ddr)->
u8
[0])

	)

1147 
	#uù_ùaddr2
(
addr
Ë(◊ddr)->
u8
[1])

	)

1167 
	#uù_ùaddr3
(
addr
Ë(◊ddr)->
u8
[2])

	)

1187 
	#uù_ùaddr4
(
addr
Ë(◊ddr)->
u8
[3])

	)

1198 #i‚de‡
UIP_HTONS


1199 #i‡
UIP_BYTE_ORDER
 =
UIP_BIG_ENDIAN


1200 
	#UIP_HTONS
(
n
Ë“)

	)

1201 
	#UIP_HTONL
(
n
Ë“)

	)

1203 
	#UIP_HTONS
(
n
Ë(
uöt16_t
)((((uöt16_tË“)Ë<< 8Ë| (((uöt16_tË“)Ë>> 8))

	)

1204 
	#UIP_HTONL
(
n
Ë(((
uöt32_t
)
	`UIP_HTONS
“Ë<< 16Ë| UIP_HTONS((uöt32_t)“Ë>> 16))

	)

1217 #i‚de‡
uù_ht⁄s


1218 
CCIF
 
uöt16_t
 
uù_ht⁄s
(uöt16_à
vÆ
);

1220 #i‚de‡
uù_¡ohs


1221 
	#uù_¡ohs
 
uù_ht⁄s


	)

1224 #i‚de‡
uù_ht⁄l


1225 
CCIF
 
uöt32_t
 
uù_ht⁄l
(uöt32_à
vÆ
);

1227 #i‚de‡
uù_¡ohl


1228 
	#uù_¡ohl
 
uù_ht⁄l


	)

1240 
CCIF
 *
uù_≠pd©a
;

1242 #i‡
UIP_URGDATA
 > 0

1248 *
uù_urgd©a
;

1275 
CCIF
 
uöt16_t
 
uù_Àn
;

1280 
uöt8_t
 
uù_ext_Àn
;

1283 #i‡
UIP_URGDATA
 > 0

1284 
uöt16_t
 
uù_urgÀn
, 
uù_surgÀn
;

1287 #i‡
UIP_TCP


1299 
	suù_c⁄n
 {

1300 
uù_ùaddr_t
 
	mrùaddr
;

1302 
uöt16_t
 
	mÕ‹t
;

1303 
uöt16_t
 
	mΩ‹t
;

1306 
uöt8_t
 
	mrcv_nxt
[4];

1308 
uöt8_t
 
	m¢d_nxt
[4];

1310 
uöt16_t
 
	mÀn
;

1311 
uöt16_t
 
	mmss
;

1313 
uöt16_t
 
	möôülmss
;

1315 
uöt8_t
 
	mß
;

1317 
uöt8_t
 
	msv
;

1319 
uöt8_t
 
	mπo
;

1320 
uöt8_t
 
	mt˝°©eÊags
;

1321 
uöt8_t
 
	mtimî
;

1322 
uöt8_t
 
	mƒtx
;

1326 
uù_t˝_≠p°©e_t
 
	m≠p°©e
;

1338 
CCIF
 
uù_c⁄n
 *uip_conn;

1339 #i‡
UIP_TCP


1341 
CCIF
 
uù_c⁄n
 
uù_c⁄ns
[
UIP_CONNS
];

1352 
uöt8_t
 
uù_acc32
[4];

1355 #i‡
UIP_UDP


1359 
	suù_udp_c⁄n
 {

1360 
uù_ùaddr_t
 
	mrùaddr
;

1361 
uöt16_t
 
	mÕ‹t
;

1362 
uöt16_t
 
	mΩ‹t
;

1363 
uöt8_t
 
	mâl
;

1366 
uù_udp_≠p°©e_t
 
	m≠p°©e
;

1372 
uù_udp_c⁄n
 *uip_udp_conn;

1373 
uù_udp_c⁄n
 
uù_udp_c⁄ns
[
UIP_UDP_CONNS
];

1376 
	suù_ÁŒback_öãrÁ˚
 {

1377 (*
	möô
)();

1378 (*
	mouçut
)();

1381 #i‡
UIP_CONF_ICMP6


1382 
	suù_icmp6_c⁄n
 {

1383 
uù_icmp6_≠p°©e_t
 
	m≠p°©e
;

1385 
uù_icmp6_c⁄n
 
uù_icmp6_c⁄ns
;

1393 #i‡
UIP_STATISTICS
 == 1

1394 
uù_°©s
 
uù_°©
;

1395 
	#UIP_STAT
(
s
Ë
	)
s

1397 
	#UIP_STAT
(
s
)

	)

1400 #i‡
UIP_STATISTICS
 == 1

1406 
	suù_°©s
 {

1408 
uù_°©s_t
 
	mªcv
;

1410 
uù_°©s_t
 
	m£¡
;

1412 
uù_°©s_t
 
	mf‹w¨ded
;

1414 
uù_°©s_t
 
	mdr›
;

1416 
uù_°©s_t
 
	mvhÀº
;

1418 
uù_°©s_t
 
	mhbÀ√º
;

1420 
uù_°©s_t
 
	mlbÀ√º
;

1422 
uù_°©s_t
 
	m‰agîr
;

1424 
uù_°©s_t
 
	mchkîr
;

1426 
uù_°©s_t
 
	m¥Ÿ€º
;

1428 } 
	mù
;

1430 
uù_°©s_t
 
	mªcv
;

1431 
uù_°©s_t
 
	m£¡
;

1432 
uù_°©s_t
 
	mdr›
;

1433 
uù_°©s_t
 
	mty≥îr
;

1435 
uù_°©s_t
 
	mchkîr
;

1437 } 
	micmp
;

1438 #i‡
UIP_TCP


1440 
uù_°©s_t
 
	mªcv
;

1441 
uù_°©s_t
 
	m£¡
;

1442 
uù_°©s_t
 
	mdr›
;

1443 
uù_°©s_t
 
	mchkîr
;

1445 
uù_°©s_t
 
	mackîr
;

1447 
uù_°©s_t
 
	mr°
;

1448 
uù_°©s_t
 
	mªxmô
;

1449 
uù_°©s_t
 
	msyndr›
;

1451 
uù_°©s_t
 
	msyƒ°
;

1453 } 
	mt˝
;

1455 #i‡
UIP_UDP


1457 
uù_°©s_t
 
	mdr›
;

1458 
uù_°©s_t
 
	mªcv
;

1459 
uù_°©s_t
 
	m£¡
;

1460 
uù_°©s_t
 
	mchkîr
;

1462 } 
	mudp
;

1464 #i‡
UIP_CONF_IPV6


1466 
uù_°©s_t
 
	mdr›
;

1467 
uù_°©s_t
 
	mªcv
;

1468 
uù_°©s_t
 
	m£¡
;

1469 } 
	mnd6
;

1489 
CCIF
 
uöt8_t
 
uù_Êags
;

1498 
	#UIP_ACKDATA
 1

	)

1502 
	#UIP_NEWDATA
 2

	)

1504 
	#UIP_REXMIT
 4

	)

1506 
	#UIP_POLL
 8

	)

1509 
	#UIP_CLOSE
 16

	)

1514 
	#UIP_ABORT
 32

	)

1519 
	#UIP_CONNECTED
 64

	)

1524 
	#UIP_TIMEDOUT
 128

	)

1541 
uù_¥o˚ss
(
uöt8_t
 
Êag
);

1550 
	#UIP_DATA
 1

	)

1554 
	#UIP_TIMER
 2

	)

1556 
	#UIP_POLL_REQUEST
 3

	)

1558 
	#UIP_UDP_SEND_CONN
 4

	)

1561 #i‡
UIP_UDP


1562 
	#UIP_UDP_TIMER
 5

	)

1566 
	#UIP_CLOSED
 0

	)

1567 
	#UIP_SYN_RCVD
 1

	)

1568 
	#UIP_SYN_SENT
 2

	)

1569 
	#UIP_ESTABLISHED
 3

	)

1570 
	#UIP_FIN_WAIT_1
 4

	)

1571 
	#UIP_FIN_WAIT_2
 5

	)

1572 
	#UIP_CLOSING
 6

	)

1573 
	#UIP_TIME_WAIT
 7

	)

1574 
	#UIP_LAST_ACK
 8

	)

1575 
	#UIP_TS_MASK
 15

	)

1577 
	#UIP_STOPPED
 16

	)

1580 
	suù_t˝ù_hdr
 {

1581 #i‡
UIP_CONF_IPV6


1583 
uöt8_t
 
	mvtc
,

1584 
	mtcÊow
;

1585 
uöt16_t
 
	mÊow
;

1586 
uöt8_t
 
	mÀn
[2];

1587 
uöt8_t
 
	m¥Ÿo
, 
	mâl
;

1588 
uù_ù6addr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1591 
uöt8_t
 
	mvhl
,

1592 
	mtos
,

1593 
	mÀn
[2],

1594 
	mùid
[2],

1595 
	mùoff£t
[2],

1596 
	mâl
,

1597 
	m¥Ÿo
;

1598 
uöt16_t
 
	mùchksum
;

1599 
uù_ùaddr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1603 
uöt16_t
 
	m§˝‹t
,

1604 
	mde°p‹t
;

1605 
uöt8_t
 
	m£qno
[4],

1606 
	mackno
[4],

1607 
	mt˝off£t
,

1608 
	mÊags
,

1609 
	mwnd
[2];

1610 
uöt16_t
 
	mt˝chksum
;

1611 
uöt8_t
 
	murgp
[2];

1612 
uöt8_t
 
	m›td©a
[4];

1616 
	suù_icmpù_hdr
 {

1617 #i‡
UIP_CONF_IPV6


1619 
uöt8_t
 
	mvtc
,

1620 
	mtcf
;

1621 
uöt16_t
 
	mÊow
;

1622 
uöt8_t
 
	mÀn
[2];

1623 
uöt8_t
 
	m¥Ÿo
, 
	mâl
;

1624 
uù_ù6addr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1627 
uöt8_t
 
	mvhl
,

1628 
	mtos
,

1629 
	mÀn
[2],

1630 
	mùid
[2],

1631 
	mùoff£t
[2],

1632 
	mâl
,

1633 
	m¥Ÿo
;

1634 
uöt16_t
 
	mùchksum
;

1635 
uù_ùaddr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1639 
uöt8_t
 
	mty≥
, 
	micode
;

1640 
uöt16_t
 
	micmpchksum
;

1641 #i‡!
UIP_CONF_IPV6


1642 
uöt16_t
 
	mid
, 
	m£qno
;

1643 
uöt8_t
 
	m∑ylﬂd
[1];

1649 
	suù_udpù_hdr
 {

1650 #i‡
UIP_CONF_IPV6


1652 
uöt8_t
 
	mvtc
,

1653 
	mtcf
;

1654 
uöt16_t
 
	mÊow
;

1655 
uöt8_t
 
	mÀn
[2];

1656 
uöt8_t
 
	m¥Ÿo
, 
	mâl
;

1657 
uù_ù6addr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1660 
uöt8_t
 
	mvhl
,

1661 
	mtos
,

1662 
	mÀn
[2],

1663 
	mùid
[2],

1664 
	mùoff£t
[2],

1665 
	mâl
,

1666 
	m¥Ÿo
;

1667 
uöt16_t
 
	mùchksum
;

1668 
uù_ùaddr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1672 
uöt16_t
 
	m§˝‹t
,

1673 
	mde°p‹t
;

1674 
uöt16_t
 
	mud∂í
;

1675 
uöt16_t
 
	mudpchksum
;

1684 
	suù_ù_hdr
 {

1685 #i‡
UIP_CONF_IPV6


1687 
uöt8_t
 
	mvtc
;

1688 
uöt8_t
 
	mtcÊow
;

1689 
uöt16_t
 
	mÊow
;

1690 
uöt8_t
 
	mÀn
[2];

1691 
uöt8_t
 
	m¥Ÿo
, 
	mâl
;

1692 
uù_ù6addr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1695 
uöt8_t
 
	mvhl
,

1696 
	mtos
,

1697 
	mÀn
[2],

1698 
	mùid
[2],

1699 
	mùoff£t
[2],

1700 
	mâl
,

1701 
	m¥Ÿo
;

1702 
uöt16_t
 
	mùchksum
;

1703 
uù_ùaddr_t
 
	m§cùaddr
, 
	mde°ùaddr
;

1729 
	suù_ext_hdr
 {

1730 
uöt8_t
 
	m√xt
;

1731 
uöt8_t
 
	mÀn
;

1732 } 
	tuù_ext_hdr
;

1735 
	suù_hbho_hdr
 {

1736 
uöt8_t
 
	m√xt
;

1737 
uöt8_t
 
	mÀn
;

1738 } 
	tuù_hbho_hdr
;

1741 
	suù_de°o_hdr
 {

1742 
uöt8_t
 
	m√xt
;

1743 
uöt8_t
 
	mÀn
;

1744 } 
	tuù_de°o_hdr
;

1756 
	suù_routög_hdr
 {

1757 
uöt8_t
 
	m√xt
;

1758 
uöt8_t
 
	mÀn
;

1759 
uöt8_t
 
	mroutög_ty≥
;

1760 
uöt8_t
 
	m£g_À·
;

1761 } 
	tuù_routög_hdr
;

1764 
	suù_‰ag_hdr
 {

1765 
uöt8_t
 
	m√xt
;

1766 
uöt8_t
 
	mªs
;

1767 
uöt16_t
 
	moff£åesm‹e
;

1768 
uöt32_t
 
	mid
;

1769 } 
	tuù_‰ag_hdr
;

1775 
	suù_ext_hdr_›t
 {

1776 
uöt8_t
 
	mty≥
;

1777 
uöt8_t
 
	mÀn
;

1778 } 
	tuù_ext_hdr_›t
;

1781 
	suù_ext_hdr_›t_∑dn
 {

1782 
uöt8_t
 
	m›t_ty≥
;

1783 
uöt8_t
 
	m›t_Àn
;

1784 } 
	tuù_ext_hdr_›t_∑dn
;

1786 #i‡
UIP_CONF_IPV6_RPL


1788 
	suù_ext_hdr_›t_Ωl
 {

1789 
uöt8_t
 
	m›t_ty≥
;

1790 
uöt8_t
 
	m›t_Àn
;

1791 
uöt8_t
 
	mÊags
;

1792 
uöt8_t
 
	mö°™˚
;

1793 
uöt16_t
 
	m£ndîønk
;

1794 } 
	tuù_ext_hdr_›t_Ωl
;

1798 
	suù_t˝_hdr
 {

1799 
uöt16_t
 
	m§˝‹t
;

1800 
uöt16_t
 
	mde°p‹t
;

1801 
uöt8_t
 
	m£qno
[4];

1802 
uöt8_t
 
	mackno
[4];

1803 
uöt8_t
 
	mt˝off£t
;

1804 
uöt8_t
 
	mÊags
;

1805 
uöt8_t
 
	mwnd
[2];

1806 
uöt16_t
 
	mt˝chksum
;

1807 
uöt8_t
 
	murgp
[2];

1808 
uöt8_t
 
	m›td©a
[4];

1812 
	suù_icmp_hdr
 {

1813 
uöt8_t
 
	mty≥
, 
	micode
;

1814 
uöt16_t
 
	micmpchksum
;

1815 #i‡
UIP_CONF_IPV6


1816 
uöt16_t
 
	mid
, 
	m£qno
;

1822 
	suù_udp_hdr
 {

1823 
uöt16_t
 
	m§˝‹t
;

1824 
uöt16_t
 
	mde°p‹t
;

1825 
uöt16_t
 
	mud∂í
;

1826 
uöt16_t
 
	mudpchksum
;

1844 
	#UIP_APPDATA_SIZE
 (
UIP_BUFSIZE
 - 
UIP_LLH_LEN
 - 
UIP_TCPIP_HLEN
)

	)

1845 
	#UIP_APPDATA_PTR
 (*)&
uù_buf
[
UIP_LLH_LEN
 + 
UIP_TCPIP_HLEN
]

	)

1847 
	#UIP_PROTO_ICMP
 1

	)

1848 
	#UIP_PROTO_TCP
 6

	)

1849 
	#UIP_PROTO_UDP
 17

	)

1850 
	#UIP_PROTO_ICMP6
 58

	)

1853 #i‡
UIP_CONF_IPV6


1856 
	#UIP_PROTO_HBHO
 0

	)

1857 
	#UIP_PROTO_DESTO
 60

	)

1858 
	#UIP_PROTO_ROUTING
 43

	)

1859 
	#UIP_PROTO_FRAG
 44

	)

1860 
	#UIP_PROTO_NONE
 59

	)

1865 
	#UIP_EXT_HDR_OPT_PAD1
 0

	)

1866 
	#UIP_EXT_HDR_OPT_PADN
 1

	)

1867 #i‡
UIP_CONF_IPV6_RPL


1868 
	#UIP_EXT_HDR_OPT_RPL
 0x63

	)

1882 
	#UIP_EXT_HDR_BITMAP_HBHO
 0x01

	)

1883 
	#UIP_EXT_HDR_BITMAP_DESTO1
 0x02

	)

1884 
	#UIP_EXT_HDR_BITMAP_ROUTING
 0x04

	)

1885 
	#UIP_EXT_HDR_BITMAP_FRAG
 0x08

	)

1886 
	#UIP_EXT_HDR_BITMAP_AH
 0x10

	)

1887 
	#UIP_EXT_HDR_BITMAP_ESP
 0x20

	)

1888 
	#UIP_EXT_HDR_BITMAP_DESTO2
 0x40

	)

1896 #i‡
UIP_CONF_IPV6


1897 
	#UIP_IPH_LEN
 40

	)

1898 
	#UIP_FRAGH_LEN
 8

	)

1900 
	#UIP_IPH_LEN
 20

	)

1903 
	#UIP_UDPH_LEN
 8

	)

1904 
	#UIP_TCPH_LEN
 20

	)

1905 #ifde‡
UIP_IPH_LEN


1906 
	#UIP_ICMPH_LEN
 4

	)

1908 
	#UIP_IPUDPH_LEN
 (
UIP_UDPH_LEN
 + 
UIP_IPH_LEN
Ë

	)

1911 
	#UIP_IPTCPH_LEN
 (
UIP_TCPH_LEN
 + 
UIP_IPH_LEN
Ë

	)

1914 
	#UIP_TCPIP_HLEN
 
UIP_IPTCPH_LEN


	)

1915 
	#UIP_IPICMPH_LEN
 (
UIP_IPH_LEN
 + 
UIP_ICMPH_LEN
Ë

	)

1917 
	#UIP_LLIPH_LEN
 (
UIP_LLH_LEN
 + 
UIP_IPH_LEN
Ë

	)

1919 #i‡
UIP_CONF_IPV6


1926 
	#uù_l2_l3_hdr_Àn
 (
UIP_LLH_LEN
 + 
UIP_IPH_LEN
 + 
uù_ext_Àn
)

	)

1927 
	#uù_l2_l3_icmp_hdr_Àn
 (
UIP_LLH_LEN
 + 
UIP_IPH_LEN
 + 
uù_ext_Àn
 + 
UIP_ICMPH_LEN
)

	)

1928 
	#uù_l3_hdr_Àn
 (
UIP_IPH_LEN
 + 
uù_ext_Àn
)

	)

1929 
	#uù_l3_icmp_hdr_Àn
 (
UIP_IPH_LEN
 + 
uù_ext_Àn
 + 
UIP_ICMPH_LEN
)

	)

1933 #i‡
UIP_FIXEDADDR


1934 
CCIF
 c⁄° 
uù_ùaddr_t
 
uù_ho°addr
, 
uù_√tmask
, 
uù_døddr
;

1936 
CCIF
 
uù_ùaddr_t
 
uù_ho°addr
, 
uù_√tmask
, 
uù_døddr
;

1938 
CCIF
 c⁄° 
uù_ùaddr_t
 
uù_brﬂdˇ°_addr
;

1939 
CCIF
 c⁄° 
uù_ùaddr_t
 
uù_Æl_zî€s_addr
;

1941 #i‡
UIP_FIXEDETHADDR


1942 
CCIF
 c⁄° 
uù_Œaddr_t
 
uù_Œaddr
;

1944 
CCIF
 
uù_Œaddr_t
 
uù_Œaddr
;

1950 #ifde‡
UIP_CONF_IPV6


1952 
	#UIP_LLPREF_LEN
 10

	)

1958 
	#uù_is_addr_lo›back
(
a
) \

1959 ((((
a
)->
u16
[0]) == 0) && \

1960 (((
a
)->
u16
[1]) == 0) && \

1961 (((
a
)->
u16
[2]) == 0) && \

1962 (((
a
)->
u16
[3]) == 0) && \

1963 (((
a
)->
u16
[4]) == 0) && \

1964 (((
a
)->
u16
[5]) == 0) && \

1965 (((
a
)->
u16
[6]) == 0) && \

1966 (((
a
)->
u8
[14]) == 0) && \

1967 (((
a
)->
u8
[15]Ë=0x01))

	)

1972 
	#uù_is_addr_un•ecifõd
(
a
) \

1973 ((((
a
)->
u16
[0]) == 0) && \

1974 (((
a
)->
u16
[1]) == 0) && \

1975 (((
a
)->
u16
[2]) == 0) && \

1976 (((
a
)->
u16
[3]) == 0) && \

1977 (((
a
)->
u16
[4]) == 0) && \

1978 (((
a
)->
u16
[5]) == 0) && \

1979 (((
a
)->
u16
[6]) == 0) && \

1980 (((
a
)->
u16
[7]Ë=0))

	)

1983 
	#uù_is_addr_lökloˇl_Æ odes_mˇ°
(
a
) \

1984 ((((
a
)->
u8
[0]) == 0xff) && \

1985 (((
a
)->
u8
[1]) == 0x02) && \

1986 (((
a
)->
u16
[1]) == 0) && \

1987 (((
a
)->
u16
[2]) == 0) && \

1988 (((
a
)->
u16
[3]) == 0) && \

1989 (((
a
)->
u16
[4]) == 0) && \

1990 (((
a
)->
u16
[5]) == 0) && \

1991 (((
a
)->
u16
[6]) == 0) && \

1992 (((
a
)->
u8
[14]) == 0) && \

1993 (((
a
)->
u8
[15]Ë=0x01))

	)

1996 
	#uù_is_addr_lökloˇl_ÆÃouãrs_mˇ°
(
a
) \

1997 ((((
a
)->
u8
[0]) == 0xff) && \

1998 (((
a
)->
u8
[1]) == 0x02) && \

1999 (((
a
)->
u16
[1]) == 0) && \

2000 (((
a
)->
u16
[2]) == 0) && \

2001 (((
a
)->
u16
[3]) == 0) && \

2002 (((
a
)->
u16
[4]) == 0) && \

2003 (((
a
)->
u16
[5]) == 0) && \

2004 (((
a
)->
u16
[6]) == 0) && \

2005 (((
a
)->
u8
[14]) == 0) && \

2006 (((
a
)->
u8
[15]Ë=0x02))

	)

2012 
	#uù_is_addr_lökloˇl
(
a
) \

2013 ((
a
)->
u8
[0] == 0xfe && \

2014 (
a
)->
u8
[1] =0x80)

	)

2017 
	#uù_¸óã_un•ecifõd
(
a
Ë
	`uù_ù6addr
◊, 0, 0, 0, 0, 0, 0, 0, 0)

	)

2020 
	#uù_¸óã_lökloˇl_Æ odes_mˇ°
(
a
Ë
	`uù_ù6addr
◊, 0xff02, 0, 0, 0, 0, 0, 0, 0x0001)

	)

2023 
	#uù_¸óã_lökloˇl_ÆÃouãrs_mˇ°
(
a
Ë
	`uù_ù6addr
◊, 0xff02, 0, 0, 0, 0, 0, 0, 0x0002)

	)

2024 
	#uù_¸óã_lökloˇl_¥efix
(
addr
) do { \

2025 (
addr
)->
u16
[0] = 
	`UIP_HTONS
(0xfe80); \

2026 (
addr
)->
u16
[1] = 0; \

2027 (
addr
)->
u16
[2] = 0; \

2028 (
addr
)->
u16
[3] = 0; \

2029 } 0)

	)

2035 
	#uù_is_addr_sﬁicôed_node
(
a
) \

2036 ((((
a
)->
u8
[0]) == 0xFF) && \

2037 (((
a
)->
u8
[1]) == 0x02) && \

2038 (((
a
)->
u16
[1]) == 0x00) && \

2039 (((
a
)->
u16
[2]) == 0x00) && \

2040 (((
a
)->
u16
[3]) == 0x00) && \

2041 (((
a
)->
u16
[4]) == 0x00) && \

2042 (((
a
)->
u8
[10]) == 0x00) && \

2043 (((
a
)->
u8
[11]) == 0x01) && \

2044 (((
a
)->
u8
[12]Ë=0xFF))

	)

2050 
	#uù_¸óã_sﬁicôed_node
(
a
, 
b
) \

2051 (((
b
)->
u8
[0]) = 0xFF); \

2052 (((
b
)->
u8
[1]) = 0x02); \

2053 (((
b
)->
u16
[1]) = 0); \

2054 (((
b
)->
u16
[2]) = 0); \

2055 (((
b
)->
u16
[3]) = 0); \

2056 (((
b
)->
u16
[4]) = 0); \

2057 (((
b
)->
u8
[10]) = 0); \

2058 (((
b
)->
u8
[11]) = 0x01); \

2059 (((
b
)->
u8
[12]) = 0xFF); \

2060 (((
b
)->
u8
[13]Ë((
a
)->u8[13])); \

2061 (((
b
)->
u16
[7]Ë((
a
)->u16[7]))

	)

2068 
	#uù_is_addr_lök_loˇl
(
a
) \

2069 ((((
a
)->
u8
[0]) == 0xFE) && \

2070 (((
a
)->
u8
[1]Ë=0x80))

	)

2077 #i‡
UIP_CONF_LL_802154


2078 
	#uù_is_addr_mac_addr_ba£d
(
a
, 
m
) \

2079 ((((
a
)->
u8
[8]Ë=(((
m
)->
addr
[0]) ^ 0x02)) && \

2080 (((
a
)->
u8
[9]Ë=(
m
)->
addr
[1]) && \

2081 (((
a
)->
u8
[10]Ë=(
m
)->
addr
[2]) && \

2082 (((
a
)->
u8
[11]Ë=(
m
)->
addr
[3]) && \

2083 (((
a
)->
u8
[12]Ë=(
m
)->
addr
[4]) && \

2084 (((
a
)->
u8
[13]Ë=(
m
)->
addr
[5]) && \

2085 (((
a
)->
u8
[14]Ë=(
m
)->
addr
[6]) && \

2086 (((
a
)->
u8
[15]Ë=(
m
)->
addr
[7]))

	)

2089 
	#uù_is_addr_mac_addr_ba£d
(
a
, 
m
) \

2090 ((((
a
)->
u8
[8]Ë=(((
m
)->
addr
[0]) | 0x02)) && \

2091 (((
a
)->
u8
[9]Ë=(
m
)->
addr
[1]) && \

2092 (((
a
)->
u8
[10]Ë=(
m
)->
addr
[2]) && \

2093 (((
a
)->
u8
[11]) == 0xff) && \

2094 (((
a
)->
u8
[12]) == 0xfe) && \

2095 (((
a
)->
u8
[13]Ë=(
m
)->
addr
[3]) && \

2096 (((
a
)->
u8
[14]Ë=(
m
)->
addr
[4]) && \

2097 (((
a
)->
u8
[15]Ë=(
m
)->
addr
[5]))

	)

2105 
	#uù_is_addr_mˇ°
(
a
) \

2106 (((
a
)->
u8
[0]Ë=0xFF)

	)

2112 
	#uù_is_mˇ°_group_id_Æl_nodes
(
a
) \

2113 ((((
a
)->
u16
[1]) == 0) && \

2114 (((
a
)->
u16
[2]) == 0) && \

2115 (((
a
)->
u16
[3]) == 0) && \

2116 (((
a
)->
u16
[4]) == 0) && \

2117 (((
a
)->
u16
[5]) == 0) && \

2118 (((
a
)->
u16
[6]) == 0) && \

2119 (((
a
)->
u8
[14]) == 0) && \

2120 (((
a
)->
u8
[15]Ë=1))

	)

2126 
	#uù_is_mˇ°_group_id_Æl_rouãrs
(
a
) \

2127 ((((
a
)->
u16
[1]) == 0) && \

2128 (((
a
)->
u16
[2]) == 0) && \

2129 (((
a
)->
u16
[3]) == 0) && \

2130 (((
a
)->
u16
[4]) == 0) && \

2131 (((
a
)->
u16
[5]) == 0) && \

2132 (((
a
)->
u16
[6]) == 0) && \

2133 (((
a
)->
u8
[14]) == 0) && \

2134 (((
a
)->
u8
[15]Ë=2))

	)

2141 
	#uù_¨e_sﬁicôed_byãs_equÆ
(
a
, 
b
) \

2142 ((((
a
)->
u8
[13]Ë=((
b
)->u8[13])) && \

2143 (((
a
)->
u8
[14]Ë=((
b
)->u8[14])) && \

2144 (((
a
)->
u8
[15]Ë=((
b
)->u8[15])))

	)

2164 
uöt16_t
 
uù_chksum
(uöt16_à*
buf
, uöt16_à
Àn
);

2175 
uöt16_t
 
uù_ùchksum
();

2186 
uöt16_t
 
uù_t˝chksum
();

2197 
uöt16_t
 
uù_udpchksum
();

2204 
uöt16_t
 
uù_icmp6chksum
();

	@core/net/uip6.c

74 
	~"√t/uù.h
"

75 
	~"√t/uù›t.h
"

76 
	~"√t/uù-icmp6.h
"

77 
	~"√t/uù-nd6.h
"

78 
	~"√t/uù-ds6.h
"

80 
	~<°rög.h
>

86 
	#DEBUG
 
DEBUG_NONE


	)

89 #i‡
UIP_CONF_IPV6_RPL


90 
	~"Ωl/Ωl.h
"

93 #i‡
UIP_LOGGING
 == 1

94 
	~<°dio.h
>

95 
uù_log
(*
msg
);

96 
	#UIP_LOG
(
m
Ë
	`uù_log
(m)

	)

98 
	#UIP_LOG
(
m
)

	)

101 #i‡
UIP_STATISTICS
 == 1

102 
uù_°©s
 
	guù_°©
;

110 #i‡
UIP_CONF_LL_802154


111 
uù_Œaddr_t
 
	guù_Œaddr
;

113 
uù_Œaddr_t
 
	guù_Œaddr
 = {{0x00,0x06,0x98,0x00,0x02,0x32}};

128 
uöt8_t
 *
	guù_√xt_hdr
;

130 
uöt8_t
 
	guù_ext_bôm≠
 = 0;

135 
uöt8_t
 
	guù_ext_Àn
 = 0;

137 
uöt8_t
 
	guù_ext_›t_off£t
 = 0;

146 
	#FBUF
 ((
uù_t˝ù_hdr
 *)&
uù_ªassbuf
[0])

	)

147 
	#UIP_IP_BUF
 ((
uù_ù_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
])

	)

148 
	#UIP_ICMP_BUF
 ((
uù_icmp_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

149 
	#UIP_UDP_BUF
 ((
uù_udp_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
 + 
UIP_IPH_LEN
])

	)

150 
	#UIP_TCP_BUF
 ((
uù_t˝_hdr
 *)&
uù_buf
[
UIP_LLH_LEN
 + 
UIP_IPH_LEN
])

	)

151 
	#UIP_EXT_BUF
 ((
uù_ext_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

152 
	#UIP_ROUTING_BUF
 ((
uù_routög_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

153 
	#UIP_FRAG_BUF
 ((
uù_‰ag_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

154 
	#UIP_HBHO_BUF
 ((
uù_hbho_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

155 
	#UIP_DESTO_BUF
 ((
uù_de°o_hdr
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
])

	)

156 
	#UIP_EXT_HDR_OPT_BUF
 ((
uù_ext_hdr_›t
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
 + 
uù_ext_›t_off£t
])

	)

157 
	#UIP_EXT_HDR_OPT_PADN_BUF
 ((
uù_ext_hdr_›t_∑dn
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
 + 
uù_ext_›t_off£t
])

	)

158 #i‡
UIP_CONF_IPV6_RPL


159 
	#UIP_EXT_HDR_OPT_RPL_BUF
 ((
uù_ext_hdr_›t_Ωl
 *)&
uù_buf
[
uù_l2_l3_hdr_Àn
 + 
uù_ext_›t_off£t
])

	)

161 
	#UIP_ICMP6_ERROR_BUF
 ((
uù_icmp6_îr‹
 *)&
uù_buf
[
uù_l2_l3_icmp_hdr_Àn
])

	)

169 #i‚de‡
UIP_CONF_EXTERNAL_BUFFER


170 
uù_buf_t
 
	guù_Æig√d_buf
;

174 *
	guù_≠pd©a
;

176 *
	guù_ßµd©a
;

178 #i‡
UIP_URGDATA
 > 0

180 *
	guù_urgd©a
;

181 
uöt16_t
 
	guù_urgÀn
, 
	guù_surgÀn
;

185 
uöt16_t
 
	guù_Àn
, 
	guù_¶í
;

194 
uöt8_t
 
	guù_Êags
;

197 
uù_c⁄n
 *
	guù_c⁄n
;

200 #i‡(
UIP_TCP
 || 
UIP_UDP
)

201 
uöt8_t
 
	gc
;

204 #i‡
UIP_ACTIVE_OPEN
 || 
UIP_UDP


206 
uöt16_t
 
	gœ°p‹t
;

217 
	#TCP_FIN
 0x01

	)

218 
	#TCP_SYN
 0x02

	)

219 
	#TCP_RST
 0x04

	)

220 
	#TCP_PSH
 0x08

	)

221 
	#TCP_ACK
 0x10

	)

222 
	#TCP_URG
 0x20

	)

223 
	#TCP_CTL
 0x3f

	)

225 
	#TCP_OPT_END
 0

	)

226 
	#TCP_OPT_NOOP
 1

	)

227 
	#TCP_OPT_MSS
 2

	)

229 
	#TCP_OPT_MSS_LEN
 4

	)

234 #i‡
UIP_TCP


236 
uù_c⁄n
 
	guù_c⁄ns
[
UIP_CONNS
];

239 
uöt16_t
 
	guù_li°íp‹ts
[
UIP_LISTENPORTS
];

242 
uöt8_t
 
	giss
[4];

245 
uöt8_t
 
	guù_acc32
[4];

246 
uöt8_t
 
	g›t
;

247 
uöt16_t
 
	gtmp16
;

254 #i‡
UIP_UDP


255 
uù_udp_c⁄n
 *
	guù_udp_c⁄n
;

256 
uù_udp_c⁄n
 
	guù_udp_c⁄ns
[
UIP_UDP_CONNS
];

265 
uù_icmp6_c⁄n
 
	guù_icmp6_c⁄ns
;

271 #i‡(!
UIP_ARCH_ADD32
 && 
UIP_TCP
)

273 
	$uù_add32
(
uöt8_t
 *
›32
, 
uöt16_t
 
›16
)

275 
uù_acc32
[3] = 
›32
[3] + (
›16
 & 0xff);

276 
uù_acc32
[2] = 
›32
[2] + (
›16
 >> 8);

277 
uù_acc32
[1] = 
›32
[1];

278 
uù_acc32
[0] = 
›32
[0];

280 if(
uù_acc32
[2] < (
›16
 >> 8)) {

281 ++
uù_acc32
[1];

282 if(
uù_acc32
[1] == 0) {

283 ++
uù_acc32
[0];

288 if(
uù_acc32
[3] < (
›16
 & 0xff)) {

289 ++
uù_acc32
[2];

290 if(
uù_acc32
[2] == 0) {

291 ++
uù_acc32
[1];

292 if(
uù_acc32
[1] == 0) {

293 ++
uù_acc32
[0];

297 
	}
}

301 #i‡! 
UIP_ARCH_CHKSUM


303 
uöt16_t


304 
	$chksum
(
uöt16_t
 
sum
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
Àn
)

306 
uöt16_t
 
t
;

307 c⁄° 
uöt8_t
 *
d©≠å
;

308 c⁄° 
uöt8_t
 *
œ°_byã
;

310 
d©≠å
 = 
d©a
;

311 
œ°_byã
 = 
d©a
 + 
Àn
 - 1;

313 
d©≠å
 < 
œ°_byã
) {

314 
t
 = (
d©≠å
[0] << 8) + dataptr[1];

315 
sum
 +
t
;

316 if(
sum
 < 
t
) {

317 
sum
++;

319 
d©≠å
 += 2;

322 if(
d©≠å
 =
œ°_byã
) {

323 
t
 = (
d©≠å
[0] << 8) + 0;

324 
sum
 +
t
;

325 if(
sum
 < 
t
) {

326 
sum
++;

331  
sum
;

332 
	}
}

334 
uöt16_t


335 
	$uù_chksum
(
uöt16_t
 *
d©a
, uöt16_à
Àn
)

337  
	`uù_ht⁄s
(
	`chksum
(0, (
uöt8_t
 *)
d©a
, 
Àn
));

338 
	}
}

340 #i‚de‡
UIP_ARCH_IPCHKSUM


341 
uöt16_t


342 
	$uù_ùchksum
()

344 
uöt16_t
 
sum
;

346 
sum
 = 
	`chksum
(0, &
uù_buf
[
UIP_LLH_LEN
], 
UIP_IPH_LEN
);

347  (
sum
 =0Ë? 0xfff‡: 
	`uù_ht⁄s
(sum);

348 
	}
}

351 
uöt16_t


352 
	$uµî_œyî_chksum
(
uöt8_t
 
¥Ÿo
)

363 vﬁ©ûê
uöt16_t
 
uµî_œyî_Àn
;

364 
uöt16_t
 
sum
;

366 
uµî_œyî_Àn
 = (((
uöt16_t
)(
UIP_IP_BUF
->
Àn
[0]Ë<< 8Ë+ UIP_IP_BUF->Àn[1] - 
uù_ext_Àn
);

370 
sum
 = 
uµî_œyî_Àn
 + 
¥Ÿo
;

372 
sum
 = 
	`chksum
(sum, (
uöt8_t
 *)&
UIP_IP_BUF
->
§cùaddr
, 2 * (
uù_ùaddr_t
));

375 
sum
 = 
	`chksum
(sum, &
uù_buf
[
UIP_IPH_LEN
 + 
UIP_LLH_LEN
 + 
uù_ext_Àn
],

376 
uµî_œyî_Àn
);

378  (
sum
 =0Ë? 0xfff‡: 
	`uù_ht⁄s
(sum);

379 
	}
}

381 
uöt16_t


382 
	$uù_icmp6chksum
()

384  
	`uµî_œyî_chksum
(
UIP_PROTO_ICMP6
);

386 
	}
}

388 #i‡
UIP_TCP


389 
uöt16_t


390 
	$uù_t˝chksum
()

392  
	`uµî_œyî_chksum
(
UIP_PROTO_TCP
);

393 
	}
}

396 #i‡
UIP_UDP
 && 
UIP_UDP_CHECKSUMS


397 
uöt16_t


398 
	$uù_udpchksum
()

400  
	`uµî_œyî_chksum
(
UIP_PROTO_UDP
);

401 
	}
}

406 
	$uù_öô
()

409 
	`uù_ds6_öô
();

411 #i‡
UIP_TCP


412 
c
 = 0; c < 
UIP_LISTENPORTS
; ++c) {

413 
uù_li°íp‹ts
[
c
] = 0;

415 
c
 = 0; c < 
UIP_CONNS
; ++c) {

416 
uù_c⁄ns
[
c
].
t˝°©eÊags
 = 
UIP_CLOSED
;

420 #i‡
UIP_ACTIVE_OPEN
 || 
UIP_UDP


421 
œ°p‹t
 = 1024;

424 #i‡
UIP_UDP


425 
c
 = 0; c < 
UIP_UDP_CONNS
; ++c) {

426 
uù_udp_c⁄ns
[
c
].
Õ‹t
 = 0;

429 
	}
}

431 #i‡
UIP_TCP
 && 
UIP_ACTIVE_OPEN


432 
uù_c⁄n
 *

433 
	$uù_c⁄√˘
(
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
Ω‹t
)

435 
uù_c⁄n
 *
c⁄n
, *
cc⁄n
;

438 
agaö
:

439 ++
œ°p‹t
;

441 if(
œ°p‹t
 >= 32000) {

442 
œ°p‹t
 = 4096;

447 
c
 = 0; c < 
UIP_CONNS
; ++c) {

448 
c⁄n
 = &
uù_c⁄ns
[
c
];

449 if(
c⁄n
->
t˝°©eÊags
 !
UIP_CLOSED
 &&

450 
c⁄n
->
Õ‹t
 =
	`uù_ht⁄s
(
œ°p‹t
)) {

451 
agaö
;

455 
c⁄n
 = 0;

456 
c
 = 0; c < 
UIP_CONNS
; ++c) {

457 
cc⁄n
 = &
uù_c⁄ns
[
c
];

458 if(
cc⁄n
->
t˝°©eÊags
 =
UIP_CLOSED
) {

459 
c⁄n
 = 
cc⁄n
;

462 if(
cc⁄n
->
t˝°©eÊags
 =
UIP_TIME_WAIT
) {

463 if(
c⁄n
 == 0 ||

464 
cc⁄n
->
timî
 > 
c⁄n
->timer) {

465 
c⁄n
 = 
cc⁄n
;

470 if(
c⁄n
 == 0) {

474 
c⁄n
->
t˝°©eÊags
 = 
UIP_SYN_SENT
;

476 
c⁄n
->
¢d_nxt
[0] = 
iss
[0];

477 
c⁄n
->
¢d_nxt
[1] = 
iss
[1];

478 
c⁄n
->
¢d_nxt
[2] = 
iss
[2];

479 
c⁄n
->
¢d_nxt
[3] = 
iss
[3];

481 
c⁄n
->
rcv_nxt
[0] = 0;

482 
c⁄n
->
rcv_nxt
[1] = 0;

483 
c⁄n
->
rcv_nxt
[2] = 0;

484 
c⁄n
->
rcv_nxt
[3] = 0;

486 
c⁄n
->
öôülmss
 = c⁄n->
mss
 = 
UIP_TCP_MSS
;

488 
c⁄n
->
Àn
 = 1;

489 
c⁄n
->
ƒtx
 = 0;

490 
c⁄n
->
timî
 = 1;

491 
c⁄n
->
πo
 = 
UIP_RTO
;

492 
c⁄n
->
ß
 = 0;

493 
c⁄n
->
sv
 = 16;

494 
c⁄n
->
Õ‹t
 = 
	`uù_ht⁄s
(
œ°p‹t
);

495 
c⁄n
->
Ω‹t
 =Ñport;

496 
	`uù_ùaddr_c›y
(&
c⁄n
->
rùaddr
,Ñipaddr);

498  
c⁄n
;

499 
	}
}

503 
	$ªmove_ext_hdr
()

506 if(
uù_ext_Àn
 > 0) {

507 if(()(
uù_Àn
 - 
UIP_IPH_LEN
 - 
uù_ext_Àn
) < 0) {

508 
uù_ext_Àn
 = 0;

509 
uù_Àn
 = 0;

512 
	`memmove
(((
uöt8_t
 *)
UIP_TCP_BUF
), (uöt8_à*)UIP_TCP_BUF + 
uù_ext_Àn
,

513 
uù_Àn
 - 
UIP_IPH_LEN
 - 
uù_ext_Àn
);

515 
uù_Àn
 -
uù_ext_Àn
;

518 
UIP_IP_BUF
->
Àn
[0] = (
uù_Àn
 - 
UIP_IPH_LEN
) >> 8;

519 
UIP_IP_BUF
->
Àn
[1] = (
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff;

520 
uù_ext_Àn
 = 0;

522 
	}
}

524 #i‡
UIP_UDP


525 
uù_udp_c⁄n
 *

526 
	$uù_udp_√w
(c⁄° 
uù_ùaddr_t
 *
rùaddr
, 
uöt16_t
 
Ω‹t
)

528 
uù_udp_c⁄n
 *
c⁄n
;

531 
agaö
:

532 ++
œ°p‹t
;

534 if(
œ°p‹t
 >= 32000) {

535 
œ°p‹t
 = 4096;

538 
c
 = 0; c < 
UIP_UDP_CONNS
; ++c) {

539 if(
uù_udp_c⁄ns
[
c
].
Õ‹t
 =
	`uù_ht⁄s
(
œ°p‹t
)) {

540 
agaö
;

544 
c⁄n
 = 0;

545 
c
 = 0; c < 
UIP_UDP_CONNS
; ++c) {

546 if(
uù_udp_c⁄ns
[
c
].
Õ‹t
 == 0) {

547 
c⁄n
 = &
uù_udp_c⁄ns
[
c
];

552 if(
c⁄n
 == 0) {

556 
c⁄n
->
Õ‹t
 = 
	`UIP_HTONS
(
œ°p‹t
);

557 
c⁄n
->
Ω‹t
 =Ñport;

558 if(
rùaddr
 =
NULL
) {

559 
	`mem£t
(&
c⁄n
->
rùaddr
, 0, (
uù_ùaddr_t
));

561 
	`uù_ùaddr_c›y
(&
c⁄n
->
rùaddr
,Ñipaddr);

563 
c⁄n
->
âl
 = 
uù_ds6_if
.
cur_h›_limô
;

565  
c⁄n
;

566 
	}
}

569 #i‡
UIP_TCP


571 
	$uù_u∆i°í
(
uöt16_t
 
p‹t
)

573 
c
 = 0; c < 
UIP_LISTENPORTS
; ++c) {

574 if(
uù_li°íp‹ts
[
c
] =
p‹t
) {

575 
uù_li°íp‹ts
[
c
] = 0;

579 
	}
}

582 
	$uù_li°í
(
uöt16_t
 
p‹t
)

584 
c
 = 0; c < 
UIP_LISTENPORTS
; ++c) {

585 if(
uù_li°íp‹ts
[
c
] == 0) {

586 
uù_li°íp‹ts
[
c
] = 
p‹t
;

590 
	}
}

594 #i‡
UIP_CONF_IPV6_REASSEMBLY


595 
	#UIP_REASS_BUFSIZE
 (
UIP_BUFSIZE
 - 
UIP_LLH_LEN
)

	)

597 
uöt8_t
 
	guù_ªassbuf
[
UIP_REASS_BUFSIZE
];

599 
uöt8_t
 
	guù_ªassbôm≠
[
UIP_REASS_BUFSIZE
 / (8 * 8)];

602 c⁄° 
uöt8_t
 
	gbôm≠_bôs
[8] = {0xff, 0x7f, 0x3f, 0x1f,

604 
uöt16_t
 
	guù_ªas¶í
;

605 
uöt8_t
 
	guù_ªassÊags
;

607 
	#UIP_REASS_FLAG_LASTFRAG
 0x01

	)

608 
	#UIP_REASS_FLAG_FIRSTFRAG
 0x02

	)

609 
	#UIP_REASS_FLAG_ERROR_MSG
 0x04

	)

622 
ëimî
 
	guù_ªass_timî
;

623 
uöt8_t
 
	guù_ªass_⁄
;

625 
uöt32_t
 
	guù_id
;

628 
	#IP_MF
 0x0001

	)

630 
uöt16_t


631 
	$uù_ªass
()

633 
uöt16_t
 
off£t
=0;

634 
uöt16_t
 
Àn
;

635 
uöt16_t
 
i
;

640 if(
uù_ªass_⁄
 == 0) {

641 
	`PRINTF
("StartingÑeassembly\n");

642 
	`mem˝y
(
FBUF
, 
UIP_IP_BUF
, 
uù_ext_Àn
 + 
UIP_IPH_LEN
);

644 
	`ëimî_£t
(&
uù_ªass_timî
, 
UIP_REASS_MAXAGE
*
CLOCK_SECOND
);

645 
uù_ªass_⁄
 = 1;

646 
uù_ªassÊags
 = 0;

647 
uù_id
 = 
UIP_FRAG_BUF
->
id
;

649 
	`mem£t
(
uù_ªassbôm≠
, 0, (uip_reassbitmap));

656 if(
	`uù_ùaddr_cmp
(&
FBUF
->
§cùaddr
, &
UIP_IP_BUF
->srcipaddr) &&

657 
	`uù_ùaddr_cmp
(&
FBUF
->
de°ùaddr
, &
UIP_IP_BUF
->destipaddr) &&

658 
UIP_FRAG_BUF
->
id
 =
uù_id
) {

659 
Àn
 = 
uù_Àn
 - 
uù_ext_Àn
 - 
UIP_IPH_LEN
 - 
UIP_FRAGH_LEN
;

660 
off£t
 = (
	`uù_¡ohs
(
UIP_FRAG_BUF
->
off£åesm‹e
) & 0xfff8);

662 
	`PRINTF
("À¿%d\n", 
Àn
);

663 
	`PRINTF
("off£à%d\n", 
off£t
);

664 if(
off£t
 == 0){

665 
uù_ªassÊags
 |
UIP_REASS_FLAG_FIRSTFRAG
;

671 *
uù_√xt_hdr
 = 
UIP_FRAG_BUF
->
√xt
;

672 
	`mem˝y
(
FBUF
, 
UIP_IP_BUF
, 
uù_ext_Àn
 + 
UIP_IPH_LEN
);

673 
	`PRINTF
("src ");

674 
	`PRINT6ADDR
(&
FBUF
->
§cùaddr
);

675 
	`PRINTF
("dest ");

676 
	`PRINT6ADDR
(&
FBUF
->
de°ùaddr
);

677 
	`PRINTF
("√xà%d\n", 
UIP_IP_BUF
->
¥Ÿo
);

683 if(
off£t
 > 
UIP_REASS_BUFSIZE
 ||

684 
off£t
 + 
Àn
 > 
UIP_REASS_BUFSIZE
) {

685 
uù_ªass_⁄
 = 0;

686 
	`ëimî_°›
(&
uù_ªass_timî
);

692 if((
	`uù_¡ohs
(
UIP_FRAG_BUF
->
off£åesm‹e
Ë& 
IP_MF
) == 0) {

693 
uù_ªassÊags
 |
UIP_REASS_FLAG_LASTFRAG
;

695 
uù_ªas¶í
 = 
off£t
 + 
Àn
;

696 
	`PRINTF
("LAST FRAGMENTÑós¶í %d\n", 
uù_ªas¶í
);

702 if(
Àn
 % 8 != 0){

703 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_PARAM_PROB
, 
ICMP6_PARAMPROB_HEADER
, 4);

704 
uù_ªassÊags
 |
UIP_REASS_FLAG_ERROR_MSG
;

707 
uù_ªass_⁄
 = 0;

708 
	`ëimî_°›
(&
uù_ªass_timî
);

709  
uù_Àn
;

715 
	`mem˝y
((
uöt8_t
 *)
FBUF
 + 
UIP_IPH_LEN
 + 
uù_ext_Àn
 + 
off£t
,

716 (
uöt8_t
 *)
UIP_FRAG_BUF
 + 
UIP_FRAGH_LEN
, 
Àn
);

719 if(
off£t
 >> 6 =(off£à+ 
Àn
) >> 6) {

720 
uù_ªassbôm≠
[
off£t
 >> 6] |=

721 
bôm≠_bôs
[(
off£t
 >> 3) & 7] &

722 ~
bôm≠_bôs
[((
off£t
 + 
Àn
) >> 3) & 7];

727 
uù_ªassbôm≠
[
off£t
 >> 6] |
bôm≠_bôs
[(offset >> 3) & 7];

729 
i
 = (1 + (
off£t
 >> 6)); i < ((off£à+ 
Àn
) >> 6); ++i) {

730 
uù_ªassbôm≠
[
i
] = 0xff;

732 
uù_ªassbôm≠
[(
off£t
 + 
Àn
) >> 6] |=

733 ~
bôm≠_bôs
[((
off£t
 + 
Àn
) >> 3) & 7];

740 if(
uù_ªassÊags
 & 
UIP_REASS_FLAG_LASTFRAG
) {

743 
i
 = 0; i < (
uù_ªas¶í
 >> 6); ++i) {

744 if(
uù_ªassbôm≠
[
i
] != 0xff) {

750 if(
uù_ªassbôm≠
[
uù_ªas¶í
 >> 6] !=

751 (
uöt8_t
)~
bôm≠_bôs
[(
uù_ªas¶í
 >> 3) & 7]) {

757 
uù_ªass_⁄
 = 0;

758 
	`ëimî_°›
(&
uù_ªass_timî
);

760 
uù_ªas¶í
 +
UIP_IPH_LEN
 + 
uù_ext_Àn
;

761 
	`mem˝y
(
UIP_IP_BUF
, 
FBUF
, 
uù_ªas¶í
);

762 
UIP_IP_BUF
->
Àn
[0] = ((
uù_ªas¶í
 - 
UIP_IPH_LEN
) >> 8);

763 
UIP_IP_BUF
->
Àn
[1] = ((
uù_ªas¶í
 - 
UIP_IPH_LEN
) & 0xff);

764 
	`PRINTF
("REASSEMBLED PAQUET %d (%d)\n", 
uù_ªas¶í
,

765 (
UIP_IP_BUF
->
Àn
[0] << 8) | UIP_IP_BUF->len[1]);

767  
uù_ªas¶í
;

771 
	`PRINTF
("AlreadyÑeassemblingánotherÖaquet\n");

774 
	}
}

777 
	$uù_ªass_ovî
()

781 
uù_ªass_⁄
 = 0;

782 
	`ëimî_°›
(&
uù_ªass_timî
);

784 if(
uù_ªassÊags
 & 
UIP_REASS_FLAG_FIRSTFRAG
){

785 
	`PRINTF
("FRAG INTERRUPTED TOO LATE\n");

795 
uù_Àn
 = 0;

796 
uù_ext_Àn
 = 0;

797 
	`mem˝y
(
UIP_IP_BUF
, 
FBUF
, 
UIP_IPH_LEN
);

799 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_TIME_EXCEEDED
, 
ICMP6_TIME_EXCEED_REASSEMBLY
, 0);

801 
	`UIP_STAT
(++
uù_°©
.
ù
.
£¡
);

802 
uù_Êags
 = 0;

804 
	}
}

809 #i‡
UIP_TCP


811 
	$uù_add_rcv_nxt
(
uöt16_t
 
n
)

813 
	`uù_add32
(
uù_c⁄n
->
rcv_nxt
, 
n
);

814 
uù_c⁄n
->
rcv_nxt
[0] = 
uù_acc32
[0];

815 
uù_c⁄n
->
rcv_nxt
[1] = 
uù_acc32
[1];

816 
uù_c⁄n
->
rcv_nxt
[2] = 
uù_acc32
[2];

817 
uù_c⁄n
->
rcv_nxt
[3] = 
uù_acc32
[3];

818 
	}
}

825 
uöt8_t


826 
	$ext_hdr_›ti⁄s_¥o˚ss
()

833 
uù_ext_›t_off£t
 = 2;

834 
uù_ext_›t_off£t
 < ((
UIP_EXT_BUF
->
Àn
 << 3) + 8)) {

835 
UIP_EXT_HDR_OPT_BUF
->
ty≥
) {

841 
UIP_EXT_HDR_OPT_PAD1
:

843 
uù_ext_›t_off£t
 += 1;

845 
UIP_EXT_HDR_OPT_PADN
:

847 
uù_ext_›t_off£t
 +
UIP_EXT_HDR_OPT_PADN_BUF
->
›t_Àn
 + 2;

849 #i‡
UIP_CONF_IPV6_RPL


850 
UIP_EXT_HDR_OPT_RPL
:

851 
	`PRINTF
("Processing RPL option\n");

852 if(
	`Ωl_vîify_hódî
(
uù_ext_›t_off£t
)) {

853 
	`PRINTF
("RPL Option Error : Dropping Packet");

856 
uù_ext_›t_off£t
 +(
UIP_EXT_HDR_OPT_RPL_BUF
->
›t_Àn
) + 2;

874 
UIP_EXT_HDR_OPT_BUF
->
ty≥
 & 0xC0) {

880 if(
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
)) {

884 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_PARAM_PROB
, 
ICMP6_PARAMPROB_OPTION
,

885 (
uöt32_t
)
UIP_IPH_LEN
 + 
uù_ext_Àn
 + 
uù_ext_›t_off£t
);

889 
uù_ext_›t_off£t
 +
UIP_EXT_HDR_OPT_BUF
->
Àn
 + 2;

894 
	}
}

899 
	$uù_¥o˚ss
(
uöt8_t
 
Êag
)

901 #i‡
UIP_TCP


902 
uù_c⁄n
 *
uù_c⁄ƒ
 = uip_conn;

904 #i‡
UIP_UDP


905 if(
Êag
 =
UIP_UDP_SEND_CONN
) {

906 
udp_£nd
;

909 
uù_ßµd©a
 = 
uù_≠pd©a
 = &
uù_buf
[
UIP_IPTCPH_LEN
 + 
UIP_LLH_LEN
];

913 if(
Êag
 =
UIP_POLL_REQUEST
) {

914 #i‡
UIP_TCP


915 if((
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
Ë=
UIP_ESTABLISHED
 &&

916 !
	`uù_out°™dög
(
uù_c⁄ƒ
)) {

917 
uù_Êags
 = 
UIP_POLL
;

918 
	`UIP_APPCALL
();

919 
≠p£nd
;

920 #i‡
UIP_ACTIVE_OPEN


921 } if((
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
Ë=
UIP_SYN_SENT
) {

923 
UIP_TCP_BUF
->
Êags
 = 0;

924 
t˝_£nd_syn
;

927 
dr›
;

930 } if(
Êag
 =
UIP_TIMER
) {

932 #i‡
UIP_TCP


933 
uù_Àn
 = 0;

934 
uù_¶í
 = 0;

937 if(++
iss
[3] == 0) {

938 if(++
iss
[2] == 0) {

939 if(++
iss
[1] == 0) {

940 ++
iss
[0];

951 if(
uù_c⁄ƒ
->
t˝°©eÊags
 =
UIP_TIME_WAIT
 ||

952 
uù_c⁄ƒ
->
t˝°©eÊags
 =
UIP_FIN_WAIT_2
) {

953 ++(
uù_c⁄ƒ
->
timî
);

954 if(
uù_c⁄ƒ
->
timî
 =
UIP_TIME_WAIT_TIMEOUT
) {

955 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_CLOSED
;

957 } if(
uù_c⁄ƒ
->
t˝°©eÊags
 !
UIP_CLOSED
) {

963 if(
	`uù_out°™dög
(
uù_c⁄ƒ
)) {

964 if(
uù_c⁄ƒ
->
timî
-- == 0) {

965 if(
uù_c⁄ƒ
->
ƒtx
 =
UIP_MAXRTX
 ||

966 ((
uù_c⁄ƒ
->
t˝°©eÊags
 =
UIP_SYN_SENT
 ||

967 
uù_c⁄ƒ
->
t˝°©eÊags
 =
UIP_SYN_RCVD
) &&

968 
uù_c⁄ƒ
->
ƒtx
 =
UIP_MAXSYNRTX
)) {

969 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_CLOSED
;

976 
uù_Êags
 = 
UIP_TIMEDOUT
;

977 
	`UIP_APPCALL
();

980 
UIP_TCP_BUF
->
Êags
 = 
TCP_RST
 | 
TCP_ACK
;

981 
t˝_£nd_nod©a
;

985 
uù_c⁄ƒ
->
timî
 = 
UIP_RTO
 << (uù_c⁄ƒ->
ƒtx
 > 4?

987 
uù_c⁄ƒ
->
ƒtx
);

988 ++(
uù_c⁄ƒ
->
ƒtx
);

998 
	`UIP_STAT
(++
uù_°©
.
t˝
.
ªxmô
);

999 
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
) {

1000 
UIP_SYN_RCVD
:

1002 
t˝_£nd_sy«ck
;

1004 #i‡
UIP_ACTIVE_OPEN


1005 
UIP_SYN_SENT
:

1007 
UIP_TCP_BUF
->
Êags
 = 0;

1008 
t˝_£nd_syn
;

1011 
UIP_ESTABLISHED
:

1018 
uù_Êags
 = 
UIP_REXMIT
;

1019 
	`UIP_APPCALL
();

1020 
≠¥exmô
;

1022 
UIP_FIN_WAIT_1
:

1023 
UIP_CLOSING
:

1024 
UIP_LAST_ACK
:

1026 
t˝_£nd_föack
;

1029 } if((
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
Ë=
UIP_ESTABLISHED
) {

1034 
uù_Êags
 = 
UIP_POLL
;

1035 
	`UIP_APPCALL
();

1036 
≠p£nd
;

1039 
dr›
;

1042 #i‡
UIP_UDP


1043 if(
Êag
 =
UIP_UDP_TIMER
) {

1044 if(
uù_udp_c⁄n
->
Õ‹t
 != 0) {

1045 
uù_c⁄n
 = 
NULL
;

1046 
uù_ßµd©a
 = 
uù_≠pd©a
 = &
uù_buf
[
UIP_IPUDPH_LEN
 + 
UIP_LLH_LEN
];

1047 
uù_Àn
 = 
uù_¶í
 = 0;

1048 
uù_Êags
 = 
UIP_POLL
;

1049 
	`UIP_UDP_APPCALL
();

1050 
udp_£nd
;

1052 
dr›
;

1059 
	`UIP_STAT
(++
uù_°©
.
ù
.
ªcv
);

1064 if((
UIP_IP_BUF
->
vtc
 & 0xf0) != 0x60) {

1065 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1066 
	`UIP_STAT
(++
uù_°©
.
ù
.
vhÀº
);

1067 
	`UIP_LOG
("ipv6: invalid version.");

1068 
dr›
;

1079 if((
UIP_IP_BUF
->
Àn
[0] << 8Ë+ UIP_IP_BUF->Àn[1] <
uù_Àn
) {

1080 
uù_Àn
 = (
UIP_IP_BUF
->
Àn
[0] << 8Ë+ UIP_IP_BUF->Àn[1] + 
UIP_IPH_LEN
;

1093 
	`UIP_LOG
("ip:Öacket shorterÅhanÑeported in IP header.");

1094 
dr›
;

1097 if(
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
§cùaddr
)){

1098 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1099 
dr›
;

1102 #i‡
UIP_CONF_ROUTER


1108 
uù_√xt_hdr
 = &
UIP_IP_BUF
->
¥Ÿo
;

1109 
uù_ext_Àn
 = 0;

1110 
uù_ext_bôm≠
 = 0;

1111 if(*
uù_√xt_hdr
 =
UIP_PROTO_HBHO
) {

1112 #i‡
UIP_CONF_IPV6_CHECKS


1113 
uù_ext_bôm≠
 |
UIP_EXT_HDR_BITMAP_HBHO
;

1115 
	`ext_hdr_›ti⁄s_¥o˚ss
()) {

1118 
uù_√xt_hdr
 = &
UIP_EXT_BUF
->
√xt
;

1119 
uù_ext_Àn
 +(
UIP_EXT_BUF
->
Àn
 << 3) + 8;

1123 
dr›
;

1127 
£nd
;

1133 if(!
	`uù_ds6_is_my_addr
(&
UIP_IP_BUF
->
de°ùaddr
) &&

1134 !
	`uù_ds6_is_my_maddr
(&
UIP_IP_BUF
->
de°ùaddr
)) {

1135 if(!
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
) &&

1136 !
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
de°ùaddr
) &&

1137 !
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
§cùaddr
) &&

1138 !
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
) &&

1139 !
	`uù_is_addr_lo›back
(&
UIP_IP_BUF
->
de°ùaddr
)) {

1143 if(
uù_Àn
 > 
UIP_LINK_MTU
) {

1144 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_PACKET_TOO_BIG
, 0, 
UIP_LINK_MTU
);

1145 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1146 
£nd
;

1149 if(
UIP_IP_BUF
->
âl
 <= 1) {

1150 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_TIME_EXCEEDED
,

1151 
ICMP6_TIME_EXCEED_TRANSIT
, 0);

1152 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1153 
£nd
;

1156 #i‡
UIP_CONF_IPV6_RPL


1157 
	`Ωl_upd©e_hódî_em±y
();

1160 
UIP_IP_BUF
->
âl
 = UIP_IP_BUF->ttl - 1;

1161 
	`PRINTF
("ForwardingÖacketÅo ");

1162 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

1163 
	`PRINTF
("\n");

1164 
	`UIP_STAT
(++
uù_°©
.
ù
.
f‹w¨ded
);

1165 
£nd
;

1167 if((
	`uù_is_addr_lök_loˇl
(&
UIP_IP_BUF
->
§cùaddr
)) &&

1168 (!
	`uù_is_addr_un•ecifõd
(&
UIP_IP_BUF
->
§cùaddr
)) &&

1169 (!
	`uù_is_addr_lo›back
(&
UIP_IP_BUF
->
de°ùaddr
)) &&

1170 (!
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
)) &&

1171 (!
	`uù_ds6_is_addr_⁄lök
((&
UIP_IP_BUF
->
de°ùaddr
)))) {

1172 
	`PRINTF
("LL sourceáddress with offÜink destination, dropping\n");

1173 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_DST_UNREACH
,

1174 
ICMP6_DST_UNREACH_NOTNEIGHBOR
, 0);

1175 
£nd
;

1177 
	`PRINTF
("DroppingÖacket,Çot for meándÜinkÜocal or multicast\n");

1178 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1179 
dr›
;

1183 if(!
	`uù_ds6_is_my_addr
(&
UIP_IP_BUF
->
de°ùaddr
) &&

1184 !
	`uù_ds6_is_my_maddr
(&
UIP_IP_BUF
->
de°ùaddr
) &&

1185 !
	`uù_is_addr_mˇ°
(&
UIP_IP_BUF
->
de°ùaddr
)) {

1187 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1188 
dr›
;

1195 
uù_√xt_hdr
 = &
UIP_IP_BUF
->
¥Ÿo
;

1196 
uù_ext_Àn
 = 0;

1197 
uù_ext_bôm≠
 = 0;

1201 *
uù_√xt_hdr
){

1202 #i‡
UIP_TCP


1203 
UIP_PROTO_TCP
:

1205 
t˝_öput
;

1207 #i‡
UIP_UDP


1208 
UIP_PROTO_UDP
:

1210 
udp_öput
;

1212 
UIP_PROTO_ICMP6
:

1214 
icmp6_öput
;

1215 
UIP_PROTO_HBHO
:

1218 #i‡
UIP_CONF_IPV6_CHECKS


1220 if(
uù_ext_bôm≠
 & 
UIP_EXT_HDR_BITMAP_HBHO
) {

1221 
bad_hdr
;

1223 
uù_ext_bôm≠
 |
UIP_EXT_HDR_BITMAP_HBHO
;

1226 
	`ext_hdr_›ti⁄s_¥o˚ss
()) {

1229 
uù_√xt_hdr
 = &
UIP_EXT_BUF
->
√xt
;

1230 
uù_ext_Àn
 +(
UIP_EXT_BUF
->
Àn
 << 3) + 8;

1234 
dr›
;

1238 
£nd
;

1241 
UIP_PROTO_DESTO
:

1242 #i‡
UIP_CONF_IPV6_CHECKS


1245 if(
uù_ext_bôm≠
 & 
UIP_EXT_HDR_BITMAP_DESTO1
) {

1246 if(
uù_ext_bôm≠
 & 
UIP_EXT_HDR_BITMAP_DESTO2
) {

1247 
bad_hdr
;

1249 
uù_ext_bôm≠
 |
UIP_EXT_HDR_BITMAP_DESTO2
;

1252 
uù_ext_bôm≠
 |
UIP_EXT_HDR_BITMAP_DESTO1
;

1255 
	`ext_hdr_›ti⁄s_¥o˚ss
()) {

1258 
uù_√xt_hdr
 = &
UIP_EXT_BUF
->
√xt
;

1259 
uù_ext_Àn
 +(
UIP_EXT_BUF
->
Àn
 << 3) + 8;

1263 
dr›
;

1267 
£nd
;

1270 
UIP_PROTO_ROUTING
:

1271 #i‡
UIP_CONF_IPV6_CHECKS


1273 if(
uù_ext_bôm≠
 & 
UIP_EXT_HDR_BITMAP_ROUTING
) {

1274 
bad_hdr
;

1276 
uù_ext_bôm≠
 |
UIP_EXT_HDR_BITMAP_ROUTING
;

1288 if(
UIP_ROUTING_BUF
->
£g_À·
 > 0) {

1289 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_PARAM_PROB
, 
ICMP6_PARAMPROB_HEADER
, 
UIP_IPH_LEN
 + 
uù_ext_Àn
 + 2);

1290 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1291 
	`UIP_LOG
("ip6: unrecognizedÑoutingÅype");

1292 
£nd
;

1294 
uù_√xt_hdr
 = &
UIP_EXT_BUF
->
√xt
;

1295 
uù_ext_Àn
 +(
UIP_EXT_BUF
->
Àn
 << 3) + 8;

1297 
UIP_PROTO_FRAG
:

1299 #i‡
UIP_CONF_IPV6_REASSEMBLY


1300 
	`PRINTF
("Processing frag header\n");

1301 
uù_Àn
 = 
	`uù_ªass
();

1302 if(
uù_Àn
 == 0) {

1303 
dr›
;

1305 if(
uù_ªassÊags
 & 
UIP_REASS_FLAG_ERROR_MSG
){

1307 
£nd
;

1311 
	`PRINTF
("ProcessingÑeassembledÖacket\n");

1312 
uù_ext_Àn
 = 0;

1313 
uù_ext_bôm≠
 = 0;

1314 
uù_√xt_hdr
 = &
UIP_IP_BUF
->
¥Ÿo
;

1317 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1318 
	`UIP_STAT
(++
uù_°©
.
ù
.
‰agîr
);

1319 
	`UIP_LOG
("ip: fragment dropped.");

1320 
dr›
;

1322 
UIP_PROTO_NONE
:

1323 
dr›
;

1325 
bad_hdr
;

1328 
bad_hdr
:

1333 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_PARAM_PROB
, 
ICMP6_PARAMPROB_NEXTHEADER
, (
uöt32_t
)(
uù_√xt_hdr
 - (
uöt8_t
 *)
UIP_IP_BUF
));

1334 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1335 
	`UIP_STAT
(++
uù_°©
.
ù
.
¥Ÿ€º
);

1336 
	`UIP_LOG
("ip6: unrecognized header");

1337 
£nd
;

1340 
icmp6_öput
:

1344 #i‡
UIP_CONF_IPV6_CHECKS


1346 if(
	`uù_icmp6chksum
() != 0xffff) {

1347 
	`UIP_STAT
(++
uù_°©
.
icmp
.
dr›
);

1348 
	`UIP_STAT
(++
uù_°©
.
icmp
.
chkîr
);

1349 
	`UIP_LOG
("icmpv6: bad checksum.");

1351 
dr›
;

1355 
	`UIP_STAT
(++
uù_°©
.
icmp
.
ªcv
);

1366 
	`UIP_ICMP6_APPCALL
(
UIP_ICMP_BUF
->
ty≥
);

1369 
UIP_ICMP_BUF
->
ty≥
) {

1370 
ICMP6_NS
:

1371 
	`uù_nd6_ns_öput
();

1373 
ICMP6_NA
:

1374 
	`uù_nd6_«_öput
();

1376 
ICMP6_RS
:

1377 #i‡
UIP_CONF_ROUTER
 && 
UIP_ND6_SEND_RA


1378 
	`uù_nd6_rs_öput
();

1380 
	`UIP_STAT
(++
uù_°©
.
icmp
.
dr›
);

1381 
uù_Àn
 = 0;

1384 
ICMP6_RA
:

1385 #i‡
UIP_CONF_ROUTER


1386 
	`UIP_STAT
(++
uù_°©
.
icmp
.
dr›
);

1387 
uù_Àn
 = 0;

1389 
	`uù_nd6_ø_öput
();

1392 #i‡
UIP_CONF_IPV6_RPL


1393 
ICMP6_RPL
:

1394 
	`uù_Ωl_öput
();

1397 
ICMP6_ECHO_REQUEST
:

1398 
	`uù_icmp6_echo_ªque°_öput
();

1400 
ICMP6_ECHO_REPLY
:

1402 
	`uù_pög_∑ckë_ödiˇti⁄
();

1403 
	`UIP_STAT
(++
uù_°©
.
icmp
.
ªcv
);

1404 
uù_Àn
 = 0;

1408 
	`UIP_STAT
(++
uù_°©
.
icmp
.
dr›
);

1409 
	`UIP_STAT
(++
uù_°©
.
icmp
.
ty≥îr
);

1410 
	`UIP_LOG
("icmp6: unknown ICMP message.");

1411 
uù_Àn
 = 0;

1415 if(
uù_Àn
 > 0) {

1416 
£nd
;

1418 
dr›
;

1423 #i‡
UIP_UDP


1425 
udp_öput
:

1427 
	`ªmove_ext_hdr
();

1429 
	`PRINTF
("Receiving UDPÖacket\n");

1430 
	`UIP_STAT
(++
uù_°©
.
udp
.
ªcv
);

1436 #i‡
UIP_UDP_CHECKSUMS


1437 
uù_Àn
 = uù_À¿- 
UIP_IPUDPH_LEN
;

1438 
uù_≠pd©a
 = &
uù_buf
[
UIP_IPUDPH_LEN
 + 
UIP_LLH_LEN
];

1439 if(
UIP_UDP_BUF
->
udpchksum
 !0 && 
	`uù_udpchksum
() != 0xffff) {

1440 
	`UIP_STAT
(++
uù_°©
.
udp
.
dr›
);

1441 
	`UIP_STAT
(++
uù_°©
.
udp
.
chkîr
);

1442 
	`PRINTF
("udp: bad checksum 0x%04x 0x%04x\n", 
UIP_UDP_BUF
->
udpchksum
,

1443 
	`uù_udpchksum
());

1444 
dr›
;

1447 
uù_Àn
 = uù_À¿- 
UIP_IPUDPH_LEN
;

1451 if(
UIP_UDP_BUF
->
de°p‹t
 == 0) {

1452 
	`PRINTF
("udp: zeroÖort.\n");

1453 
dr›
;

1457 
uù_udp_c⁄n
 = &
uù_udp_c⁄ns
[0];

1458 
uù_udp_c⁄n
 < &
uù_udp_c⁄ns
[
UIP_UDP_CONNS
];

1459 ++
uù_udp_c⁄n
) {

1467 if(
uù_udp_c⁄n
->
Õ‹t
 != 0 &&

1468 
UIP_UDP_BUF
->
de°p‹t
 =
uù_udp_c⁄n
->
Õ‹t
 &&

1469 (
uù_udp_c⁄n
->
Ω‹t
 == 0 ||

1470 
UIP_UDP_BUF
->
§˝‹t
 =
uù_udp_c⁄n
->
Ω‹t
) &&

1471 (
	`uù_is_addr_un•ecifõd
(&
uù_udp_c⁄n
->
rùaddr
) ||

1472 
	`uù_ùaddr_cmp
(&
UIP_IP_BUF
->
§cùaddr
, &
uù_udp_c⁄n
->
rùaddr
))) {

1473 
udp_found
;

1476 
	`PRINTF
("udp:Ço matching connection found\n");

1478 #i‡
UIP_UDP_SEND_UNREACH_NOPORT


1479 
	`uù_icmp6_îr‹_ouçut
(
ICMP6_DST_UNREACH
, 
ICMP6_DST_UNREACH_NOPORT
, 0);

1480 
	`UIP_STAT
(++
uù_°©
.
ù
.
dr›
);

1481 
£nd
;

1483 
dr›
;

1486 
udp_found
:

1487 
	`PRINTF
("In udp_found\n");

1489 
uù_c⁄n
 = 
NULL
;

1490 
uù_Êags
 = 
UIP_NEWDATA
;

1491 
uù_ßµd©a
 = 
uù_≠pd©a
 = &
uù_buf
[
UIP_IPUDPH_LEN
 + 
UIP_LLH_LEN
];

1492 
uù_¶í
 = 0;

1493 
	`UIP_UDP_APPCALL
();

1495 
udp_£nd
:

1496 
	`PRINTF
("In udp_send\n");

1498 if(
uù_¶í
 == 0) {

1499 
dr›
;

1501 
uù_Àn
 = 
uù_¶í
 + 
UIP_IPUDPH_LEN
;

1505 
UIP_IP_BUF
->
Àn
[0] = ((
uù_Àn
 - 
UIP_IPH_LEN
) >> 8);

1506 
UIP_IP_BUF
->
Àn
[1] = ((
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff);

1508 
UIP_IP_BUF
->
âl
 = 
uù_udp_c⁄n
->ttl;

1509 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_UDP
;

1511 
UIP_UDP_BUF
->
ud∂í
 = 
	`UIP_HTONS
(
uù_¶í
 + 
UIP_UDPH_LEN
);

1512 
UIP_UDP_BUF
->
udpchksum
 = 0;

1514 
UIP_UDP_BUF
->
§˝‹t
 = 
uù_udp_c⁄n
->
Õ‹t
;

1515 
UIP_UDP_BUF
->
de°p‹t
 = 
uù_udp_c⁄n
->
Ω‹t
;

1517 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &
uù_udp_c⁄n
->
rùaddr
);

1518 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

1520 
uù_≠pd©a
 = &
uù_buf
[
UIP_LLH_LEN
 + 
UIP_IPTCPH_LEN
];

1522 #i‡
UIP_UDP_CHECKSUMS


1524 
UIP_UDP_BUF
->
udpchksum
 = ~(
	`uù_udpchksum
());

1525 if(
UIP_UDP_BUF
->
udpchksum
 == 0) {

1526 
UIP_UDP_BUF
->
udpchksum
 = 0xffff;

1529 
	`UIP_STAT
(++
uù_°©
.
udp
.
£¡
);

1530 
ù_£nd_nﬁí
;

1533 #i‡
UIP_TCP


1535 
t˝_öput
:

1537 
	`ªmove_ext_hdr
();

1539 
	`UIP_STAT
(++
uù_°©
.
t˝
.
ªcv
);

1540 
	`PRINTF
("Receiving TCPÖacket\n");

1543 if(
	`uù_t˝chksum
() != 0xffff) {

1545 
	`UIP_STAT
(++
uù_°©
.
t˝
.
dr›
);

1546 
	`UIP_STAT
(++
uù_°©
.
t˝
.
chkîr
);

1547 
	`PRINTF
("t˝: bad checksum 0x%04x 0x%04x\n", 
UIP_TCP_BUF
->
t˝chksum
,

1548 
	`uù_t˝chksum
());

1549 
dr›
;

1553 if(
UIP_TCP_BUF
->
de°p‹t
 =0 || UIP_TCP_BUF->
§˝‹t
 == 0) {

1554 
	`PRINTF
("tcp: zeroÖort.");

1555 
dr›
;

1560 
uù_c⁄ƒ
 = &
uù_c⁄ns
[0]; uù_c⁄ƒ <&uù_c⁄ns[
UIP_CONNS
 - 1];

1561 ++
uù_c⁄ƒ
) {

1562 if(
uù_c⁄ƒ
->
t˝°©eÊags
 !
UIP_CLOSED
 &&

1563 
UIP_TCP_BUF
->
de°p‹t
 =
uù_c⁄ƒ
->
Õ‹t
 &&

1564 
UIP_TCP_BUF
->
§˝‹t
 =
uù_c⁄ƒ
->
Ω‹t
 &&

1565 
	`uù_ùaddr_cmp
(&
UIP_IP_BUF
->
§cùaddr
, &
uù_c⁄ƒ
->
rùaddr
)) {

1566 
found
;

1574 if((
UIP_TCP_BUF
->
Êags
 & 
TCP_CTL
Ë!
TCP_SYN
) {

1575 
ª£t
;

1578 
tmp16
 = 
UIP_TCP_BUF
->
de°p‹t
;

1580 
c
 = 0; c < 
UIP_LISTENPORTS
; ++c) {

1581 if(
tmp16
 =
uù_li°íp‹ts
[
c
]) {

1582 
found_li°í
;

1587 
	`UIP_STAT
(++
uù_°©
.
t˝
.
syƒ°
);

1589 
ª£t
:

1590 
	`PRINTF
("InÑeset\n");

1592 if(
UIP_TCP_BUF
->
Êags
 & 
TCP_RST
) {

1593 
dr›
;

1596 
	`UIP_STAT
(++
uù_°©
.
t˝
.
r°
);

1598 
UIP_TCP_BUF
->
Êags
 = 
TCP_RST
 | 
TCP_ACK
;

1599 
uù_Àn
 = 
UIP_IPTCPH_LEN
;

1600 
UIP_TCP_BUF
->
t˝off£t
 = 5 << 4;

1603 
c
 = 
UIP_TCP_BUF
->
£qno
[3];

1604 
UIP_TCP_BUF
->
£qno
[3] = UIP_TCP_BUF->
ackno
[3];

1605 
UIP_TCP_BUF
->
ackno
[3] = 
c
;

1607 
c
 = 
UIP_TCP_BUF
->
£qno
[2];

1608 
UIP_TCP_BUF
->
£qno
[2] = UIP_TCP_BUF->
ackno
[2];

1609 
UIP_TCP_BUF
->
ackno
[2] = 
c
;

1611 
c
 = 
UIP_TCP_BUF
->
£qno
[1];

1612 
UIP_TCP_BUF
->
£qno
[1] = UIP_TCP_BUF->
ackno
[1];

1613 
UIP_TCP_BUF
->
ackno
[1] = 
c
;

1615 
c
 = 
UIP_TCP_BUF
->
£qno
[0];

1616 
UIP_TCP_BUF
->
£qno
[0] = UIP_TCP_BUF->
ackno
[0];

1617 
UIP_TCP_BUF
->
ackno
[0] = 
c
;

1622 if(++
UIP_TCP_BUF
->
ackno
[3] == 0) {

1623 if(++
UIP_TCP_BUF
->
ackno
[2] == 0) {

1624 if(++
UIP_TCP_BUF
->
ackno
[1] == 0) {

1625 ++
UIP_TCP_BUF
->
ackno
[0];

1631 
tmp16
 = 
UIP_TCP_BUF
->
§˝‹t
;

1632 
UIP_TCP_BUF
->
§˝‹t
 = UIP_TCP_BUF->
de°p‹t
;

1633 
UIP_TCP_BUF
->
de°p‹t
 = 
tmp16
;

1636 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &UIP_IP_BUF->
§cùaddr
);

1637 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
, &UIP_IP_BUF->
de°ùaddr
);

1639 
t˝_£nd_noc⁄n
;

1644 
found_li°í
:

1645 
	`PRINTF
("In foundÜisten\n");

1652 
uù_c⁄ƒ
 = 0;

1653 
c
 = 0; c < 
UIP_CONNS
; ++c) {

1654 if(
uù_c⁄ns
[
c
].
t˝°©eÊags
 =
UIP_CLOSED
) {

1655 
uù_c⁄ƒ
 = &
uù_c⁄ns
[
c
];

1658 if(
uù_c⁄ns
[
c
].
t˝°©eÊags
 =
UIP_TIME_WAIT
) {

1659 if(
uù_c⁄ƒ
 == 0 ||

1660 
uù_c⁄ns
[
c
].
timî
 > 
uù_c⁄ƒ
->timer) {

1661 
uù_c⁄ƒ
 = &
uù_c⁄ns
[
c
];

1666 if(
uù_c⁄ƒ
 == 0) {

1670 
	`UIP_STAT
(++
uù_°©
.
t˝
.
syndr›
);

1671 
	`UIP_LOG
("tcp: foundÇo unused connections.");

1672 
dr›
;

1674 
uù_c⁄n
 = 
uù_c⁄ƒ
;

1677 
uù_c⁄ƒ
->
πo
 = uù_c⁄ƒ->
timî
 = 
UIP_RTO
;

1678 
uù_c⁄ƒ
->
ß
 = 0;

1679 
uù_c⁄ƒ
->
sv
 = 4;

1680 
uù_c⁄ƒ
->
ƒtx
 = 0;

1681 
uù_c⁄ƒ
->
Õ‹t
 = 
UIP_TCP_BUF
->
de°p‹t
;

1682 
uù_c⁄ƒ
->
Ω‹t
 = 
UIP_TCP_BUF
->
§˝‹t
;

1683 
	`uù_ùaddr_c›y
(&
uù_c⁄ƒ
->
rùaddr
, &
UIP_IP_BUF
->
§cùaddr
);

1684 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_SYN_RCVD
;

1686 
uù_c⁄ƒ
->
¢d_nxt
[0] = 
iss
[0];

1687 
uù_c⁄ƒ
->
¢d_nxt
[1] = 
iss
[1];

1688 
uù_c⁄ƒ
->
¢d_nxt
[2] = 
iss
[2];

1689 
uù_c⁄ƒ
->
¢d_nxt
[3] = 
iss
[3];

1690 
uù_c⁄ƒ
->
Àn
 = 1;

1693 
uù_c⁄ƒ
->
rcv_nxt
[3] = 
UIP_TCP_BUF
->
£qno
[3];

1694 
uù_c⁄ƒ
->
rcv_nxt
[2] = 
UIP_TCP_BUF
->
£qno
[2];

1695 
uù_c⁄ƒ
->
rcv_nxt
[1] = 
UIP_TCP_BUF
->
£qno
[1];

1696 
uù_c⁄ƒ
->
rcv_nxt
[0] = 
UIP_TCP_BUF
->
£qno
[0];

1697 
	`uù_add_rcv_nxt
(1);

1700 if((
UIP_TCP_BUF
->
t˝off£t
 & 0xf0) > 0x50) {

1701 
c
 = 0; c < ((
UIP_TCP_BUF
->
t˝off£t
 >> 4) - 5) << 2 ;) {

1702 
›t
 = 
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 
c
];

1703 if(
›t
 =
TCP_OPT_END
) {

1706 } if(
›t
 =
TCP_OPT_NOOP
) {

1707 ++
c
;

1709 } if(
›t
 =
TCP_OPT_MSS
 &&

1710 
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 1 + 
c
] =
TCP_OPT_MSS_LEN
) {

1712 
tmp16
 = ((
uöt16_t
)
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 2 + 
c
] << 8) |

1713 (
uöt16_t
)
uù_buf
[
UIP_IPTCPH_LEN
 + 
UIP_LLH_LEN
 + 3 + 
c
];

1714 
uù_c⁄ƒ
->
öôülmss
 = uù_c⁄ƒ->
mss
 =

1715 
tmp16
 > 
UIP_TCP_MSS
? UIP_TCP_MSS:Åmp16;

1722 if(
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 1 + 
c
] == 0) {

1727 
c
 +
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 1 + c];

1733 #i‡
UIP_ACTIVE_OPEN


1734 
t˝_£nd_sy«ck
:

1735 
UIP_TCP_BUF
->
Êags
 = 
TCP_ACK
;

1737 
t˝_£nd_syn
:

1738 
UIP_TCP_BUF
->
Êags
 |
TCP_SYN
;

1740 
t˝_£nd_sy«ck
:

1741 
UIP_TCP_BUF
->
Êags
 = 
TCP_SYN
 | 
TCP_ACK
;

1746 
UIP_TCP_BUF
->
›td©a
[0] = 
TCP_OPT_MSS
;

1747 
UIP_TCP_BUF
->
›td©a
[1] = 
TCP_OPT_MSS_LEN
;

1748 
UIP_TCP_BUF
->
›td©a
[2] = (
UIP_TCP_MSS
) / 256;

1749 
UIP_TCP_BUF
->
›td©a
[3] = (
UIP_TCP_MSS
) & 255;

1750 
uù_Àn
 = 
UIP_IPTCPH_LEN
 + 
TCP_OPT_MSS_LEN
;

1751 
UIP_TCP_BUF
->
t˝off£t
 = ((
UIP_TCPH_LEN
 + 
TCP_OPT_MSS_LEN
) / 4) << 4;

1752 
t˝_£nd
;

1755 
found
:

1756 
	`PRINTF
("In found\n");

1757 
uù_c⁄n
 = 
uù_c⁄ƒ
;

1758 
uù_Êags
 = 0;

1763 if(
UIP_TCP_BUF
->
Êags
 & 
TCP_RST
) {

1764 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_CLOSED
;

1765 
	`UIP_LOG
("tcp: gotÑeset,áborting connection.");

1766 
uù_Êags
 = 
UIP_ABORT
;

1767 
	`UIP_APPCALL
();

1768 
dr›
;

1772 
c
 = (
UIP_TCP_BUF
->
t˝off£t
 >> 4) << 2;

1776 
uù_Àn
 = uù_À¿- 
c
 - 
UIP_IPH_LEN
;

1783 if(!((((
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
Ë=
UIP_SYN_SENT
) &&

1784 ((
UIP_TCP_BUF
->
Êags
 & 
TCP_CTL
Ë=(
TCP_SYN
 | 
TCP_ACK
))) ||

1785 (((
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
Ë=
UIP_SYN_RCVD
) &&

1786 ((
UIP_TCP_BUF
->
Êags
 & 
TCP_CTL
Ë=
TCP_SYN
)))) {

1787 if((
uù_Àn
 > 0 || ((
UIP_TCP_BUF
->
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) != 0)) &&

1788 (
UIP_TCP_BUF
->
£qno
[0] !
uù_c⁄ƒ
->
rcv_nxt
[0] ||

1789 
UIP_TCP_BUF
->
£qno
[1] !
uù_c⁄ƒ
->
rcv_nxt
[1] ||

1790 
UIP_TCP_BUF
->
£qno
[2] !
uù_c⁄ƒ
->
rcv_nxt
[2] ||

1791 
UIP_TCP_BUF
->
£qno
[3] !
uù_c⁄ƒ
->
rcv_nxt
[3])) {

1793 if(
UIP_TCP_BUF
->
Êags
 & 
TCP_SYN
) {

1794 
t˝_£nd_sy«ck
;

1796 
t˝_£nd_ack
;

1804 if((
UIP_TCP_BUF
->
Êags
 & 
TCP_ACK
Ë&& 
	`uù_out°™dög
(
uù_c⁄ƒ
)) {

1805 
	`uù_add32
(
uù_c⁄ƒ
->
¢d_nxt
, uù_c⁄ƒ->
Àn
);

1807 if(
UIP_TCP_BUF
->
ackno
[0] =
uù_acc32
[0] &&

1808 
UIP_TCP_BUF
->
ackno
[1] =
uù_acc32
[1] &&

1809 
UIP_TCP_BUF
->
ackno
[2] =
uù_acc32
[2] &&

1810 
UIP_TCP_BUF
->
ackno
[3] =
uù_acc32
[3]) {

1812 
uù_c⁄ƒ
->
¢d_nxt
[0] = 
uù_acc32
[0];

1813 
uù_c⁄ƒ
->
¢d_nxt
[1] = 
uù_acc32
[1];

1814 
uù_c⁄ƒ
->
¢d_nxt
[2] = 
uù_acc32
[2];

1815 
uù_c⁄ƒ
->
¢d_nxt
[3] = 
uù_acc32
[3];

1818 if(
uù_c⁄ƒ
->
ƒtx
 == 0) {

1819 sig√d 
m
;

1820 
m
 = 
uù_c⁄ƒ
->
πo
 - uù_c⁄ƒ->
timî
;

1822 
m
 = m - (
uù_c⁄ƒ
->
ß
 >> 3);

1823 
uù_c⁄ƒ
->
ß
 +
m
;

1824 if(
m
 < 0) {

1825 
m
 = -m;

1827 
m
 = m - (
uù_c⁄ƒ
->
sv
 >> 2);

1828 
uù_c⁄ƒ
->
sv
 +
m
;

1829 
uù_c⁄ƒ
->
πo
 = (uù_c⁄ƒ->
ß
 >> 3Ë+ uù_c⁄ƒ->
sv
;

1833 
uù_Êags
 = 
UIP_ACKDATA
;

1835 
uù_c⁄ƒ
->
timî
 = uù_c⁄ƒ->
πo
;

1838 
uù_c⁄ƒ
->
Àn
 = 0;

1844 
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_TS_MASK
) {

1849 
UIP_SYN_RCVD
:

1854 if(
uù_Êags
 & 
UIP_ACKDATA
) {

1855 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_ESTABLISHED
;

1856 
uù_Êags
 = 
UIP_CONNECTED
;

1857 
uù_c⁄ƒ
->
Àn
 = 0;

1858 if(
uù_Àn
 > 0) {

1859 
uù_Êags
 |
UIP_NEWDATA
;

1860 
	`uù_add_rcv_nxt
(
uù_Àn
);

1862 
uù_¶í
 = 0;

1863 
	`UIP_APPCALL
();

1864 
≠p£nd
;

1867 if((
UIP_TCP_BUF
->
Êags
 & 
TCP_CTL
Ë=
TCP_SYN
) {

1868 
t˝_£nd_sy«ck
;

1870 
dr›
;

1871 #i‡
UIP_ACTIVE_OPEN


1872 
UIP_SYN_SENT
:

1877 if((
uù_Êags
 & 
UIP_ACKDATA
) &&

1878 (
UIP_TCP_BUF
->
Êags
 & 
TCP_CTL
Ë=(
TCP_SYN
 | 
TCP_ACK
)) {

1881 if((
UIP_TCP_BUF
->
t˝off£t
 & 0xf0) > 0x50) {

1882 
c
 = 0; c < ((
UIP_TCP_BUF
->
t˝off£t
 >> 4) - 5) << 2 ;) {

1883 
›t
 = 
uù_buf
[
UIP_IPTCPH_LEN
 + 
UIP_LLH_LEN
 + 
c
];

1884 if(
›t
 =
TCP_OPT_END
) {

1887 } if(
›t
 =
TCP_OPT_NOOP
) {

1888 ++
c
;

1890 } if(
›t
 =
TCP_OPT_MSS
 &&

1891 
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 1 + 
c
] =
TCP_OPT_MSS_LEN
) {

1893 
tmp16
 = (
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 2 + 
c
] << 8) |

1894 
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 3 + 
c
];

1895 
uù_c⁄ƒ
->
öôülmss
 =

1896 
uù_c⁄ƒ
->
mss
 = 
tmp16
 > 
UIP_TCP_MSS
? UIP_TCP_MSS:Åmp16;

1903 if(
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 1 + 
c
] == 0) {

1908 
c
 +
uù_buf
[
UIP_TCPIP_HLEN
 + 
UIP_LLH_LEN
 + 1 + c];

1912 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_ESTABLISHED
;

1913 
uù_c⁄ƒ
->
rcv_nxt
[0] = 
UIP_TCP_BUF
->
£qno
[0];

1914 
uù_c⁄ƒ
->
rcv_nxt
[1] = 
UIP_TCP_BUF
->
£qno
[1];

1915 
uù_c⁄ƒ
->
rcv_nxt
[2] = 
UIP_TCP_BUF
->
£qno
[2];

1916 
uù_c⁄ƒ
->
rcv_nxt
[3] = 
UIP_TCP_BUF
->
£qno
[3];

1917 
	`uù_add_rcv_nxt
(1);

1918 
uù_Êags
 = 
UIP_CONNECTED
 | 
UIP_NEWDATA
;

1919 
uù_c⁄ƒ
->
Àn
 = 0;

1920 
uù_Àn
 = 0;

1921 
uù_¶í
 = 0;

1922 
	`UIP_APPCALL
();

1923 
≠p£nd
;

1926 
uù_Êags
 = 
UIP_ABORT
;

1927 
	`UIP_APPCALL
();

1929 
uù_c⁄n
->
t˝°©eÊags
 = 
UIP_CLOSED
;

1930 
ª£t
;

1933 
UIP_ESTABLISHED
:

1945 if(
UIP_TCP_BUF
->
Êags
 & 
TCP_FIN
 && !(
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_STOPPED
)) {

1946 if(
	`uù_out°™dög
(
uù_c⁄ƒ
)) {

1947 
dr›
;

1949 
	`uù_add_rcv_nxt
(1 + 
uù_Àn
);

1950 
uù_Êags
 |
UIP_CLOSE
;

1951 if(
uù_Àn
 > 0) {

1952 
uù_Êags
 |
UIP_NEWDATA
;

1954 
	`UIP_APPCALL
();

1955 
uù_c⁄ƒ
->
Àn
 = 1;

1956 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_LAST_ACK
;

1957 
uù_c⁄ƒ
->
ƒtx
 = 0;

1958 
t˝_£nd_föack
:

1959 
UIP_TCP_BUF
->
Êags
 = 
TCP_FIN
 | 
TCP_ACK
;

1960 
t˝_£nd_nod©a
;

1965 if((
UIP_TCP_BUF
->
Êags
 & 
TCP_URG
) != 0) {

1966 #i‡
UIP_URGDATA
 > 0

1967 
uù_urgÀn
 = (
UIP_TCP_BUF
->
urgp
[0] << 8) | UIP_TCP_BUF->urgp[1];

1968 if(
uù_urgÀn
 > 
uù_Àn
) {

1970 
uù_urgÀn
 = 
uù_Àn
;

1972 
	`uù_add_rcv_nxt
(
uù_urgÀn
);

1973 
uù_Àn
 -
uù_urgÀn
;

1974 
uù_urgd©a
 = 
uù_≠pd©a
;

1975 
uù_≠pd©a
 +
uù_urgÀn
;

1977 
uù_urgÀn
 = 0;

1979 
uù_≠pd©a
 = ((*)uù_≠pd©aË+ ((
UIP_TCP_BUF
->
urgp
[0] << 8) | UIP_TCP_BUF->urgp[1]);

1980 
uù_Àn
 -(
UIP_TCP_BUF
->
urgp
[0] << 8) | UIP_TCP_BUF->urgp[1];

1989 if(
uù_Àn
 > 0 && !(
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_STOPPED
)) {

1990 
uù_Êags
 |
UIP_NEWDATA
;

1991 
	`uù_add_rcv_nxt
(
uù_Àn
);

2006 
tmp16
 = ((
uöt16_t
)
UIP_TCP_BUF
->
wnd
[0] << 8) + (uint16_t)UIP_TCP_BUF->wnd[1];

2007 if(
tmp16
 > 
uù_c⁄ƒ
->
öôülmss
 ||

2008 
tmp16
 == 0) {

2009 
tmp16
 = 
uù_c⁄ƒ
->
öôülmss
;

2011 
uù_c⁄ƒ
->
mss
 = 
tmp16
;

2029 if(
uù_Êags
 & (
UIP_NEWDATA
 | 
UIP_ACKDATA
)) {

2030 
uù_¶í
 = 0;

2031 
	`UIP_APPCALL
();

2033 
≠p£nd
:

2035 if(
uù_Êags
 & 
UIP_ABORT
) {

2036 
uù_¶í
 = 0;

2037 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_CLOSED
;

2038 
UIP_TCP_BUF
->
Êags
 = 
TCP_RST
 | 
TCP_ACK
;

2039 
t˝_£nd_nod©a
;

2042 if(
uù_Êags
 & 
UIP_CLOSE
) {

2043 
uù_¶í
 = 0;

2044 
uù_c⁄ƒ
->
Àn
 = 1;

2045 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_FIN_WAIT_1
;

2046 
uù_c⁄ƒ
->
ƒtx
 = 0;

2047 
UIP_TCP_BUF
->
Êags
 = 
TCP_FIN
 | 
TCP_ACK
;

2048 
t˝_£nd_nod©a
;

2052 if(
uù_¶í
 > 0) {

2056 if((
uù_Êags
 & 
UIP_ACKDATA
) != 0) {

2057 
uù_c⁄ƒ
->
Àn
 = 0;

2063 if(
uù_c⁄ƒ
->
Àn
 == 0) {

2068 if(
uù_¶í
 > 
uù_c⁄ƒ
->
mss
) {

2069 
uù_¶í
 = 
uù_c⁄ƒ
->
mss
;

2074 
uù_c⁄ƒ
->
Àn
 = 
uù_¶í
;

2080 
uù_¶í
 = 
uù_c⁄ƒ
->
Àn
;

2083 
uù_c⁄ƒ
->
ƒtx
 = 0;

2084 
≠¥exmô
:

2085 
uù_≠pd©a
 = 
uù_ßµd©a
;

2089 if(
uù_¶í
 > 0 && 
uù_c⁄ƒ
->
Àn
 > 0) {

2091 
uù_Àn
 = 
uù_c⁄ƒ
->
Àn
 + 
UIP_TCPIP_HLEN
;

2093 
UIP_TCP_BUF
->
Êags
 = 
TCP_ACK
 | 
TCP_PSH
;

2095 
t˝_£nd_no›ts
;

2099 if(
uù_Êags
 & 
UIP_NEWDATA
) {

2100 
uù_Àn
 = 
UIP_TCPIP_HLEN
;

2101 
UIP_TCP_BUF
->
Êags
 = 
TCP_ACK
;

2102 
t˝_£nd_no›ts
;

2105 
dr›
;

2106 
UIP_LAST_ACK
:

2109 if(
uù_Êags
 & 
UIP_ACKDATA
) {

2110 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_CLOSED
;

2111 
uù_Êags
 = 
UIP_CLOSE
;

2112 
	`UIP_APPCALL
();

2116 
UIP_FIN_WAIT_1
:

2120 if(
uù_Àn
 > 0) {

2121 
	`uù_add_rcv_nxt
(
uù_Àn
);

2123 if(
UIP_TCP_BUF
->
Êags
 & 
TCP_FIN
) {

2124 if(
uù_Êags
 & 
UIP_ACKDATA
) {

2125 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_TIME_WAIT
;

2126 
uù_c⁄ƒ
->
timî
 = 0;

2127 
uù_c⁄ƒ
->
Àn
 = 0;

2129 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_CLOSING
;

2131 
	`uù_add_rcv_nxt
(1);

2132 
uù_Êags
 = 
UIP_CLOSE
;

2133 
	`UIP_APPCALL
();

2134 
t˝_£nd_ack
;

2135 } if(
uù_Êags
 & 
UIP_ACKDATA
) {

2136 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_FIN_WAIT_2
;

2137 
uù_c⁄ƒ
->
Àn
 = 0;

2138 
dr›
;

2140 if(
uù_Àn
 > 0) {

2141 
t˝_£nd_ack
;

2143 
dr›
;

2145 
UIP_FIN_WAIT_2
:

2146 if(
uù_Àn
 > 0) {

2147 
	`uù_add_rcv_nxt
(
uù_Àn
);

2149 if(
UIP_TCP_BUF
->
Êags
 & 
TCP_FIN
) {

2150 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_TIME_WAIT
;

2151 
uù_c⁄ƒ
->
timî
 = 0;

2152 
	`uù_add_rcv_nxt
(1);

2153 
uù_Êags
 = 
UIP_CLOSE
;

2154 
	`UIP_APPCALL
();

2155 
t˝_£nd_ack
;

2157 if(
uù_Àn
 > 0) {

2158 
t˝_£nd_ack
;

2160 
dr›
;

2162 
UIP_TIME_WAIT
:

2163 
t˝_£nd_ack
;

2165 
UIP_CLOSING
:

2166 if(
uù_Êags
 & 
UIP_ACKDATA
) {

2167 
uù_c⁄ƒ
->
t˝°©eÊags
 = 
UIP_TIME_WAIT
;

2168 
uù_c⁄ƒ
->
timî
 = 0;

2171 
dr›
;

2175 
t˝_£nd_ack
:

2176 
UIP_TCP_BUF
->
Êags
 = 
TCP_ACK
;

2178 
t˝_£nd_nod©a
:

2179 
uù_Àn
 = 
UIP_IPTCPH_LEN
;

2181 
t˝_£nd_no›ts
:

2182 
UIP_TCP_BUF
->
t˝off£t
 = (
UIP_TCPH_LEN
 / 4) << 4;

2188 
t˝_£nd
:

2189 
	`PRINTF
("InÅcp_send\n");

2191 
UIP_TCP_BUF
->
ackno
[0] = 
uù_c⁄ƒ
->
rcv_nxt
[0];

2192 
UIP_TCP_BUF
->
ackno
[1] = 
uù_c⁄ƒ
->
rcv_nxt
[1];

2193 
UIP_TCP_BUF
->
ackno
[2] = 
uù_c⁄ƒ
->
rcv_nxt
[2];

2194 
UIP_TCP_BUF
->
ackno
[3] = 
uù_c⁄ƒ
->
rcv_nxt
[3];

2196 
UIP_TCP_BUF
->
£qno
[0] = 
uù_c⁄ƒ
->
¢d_nxt
[0];

2197 
UIP_TCP_BUF
->
£qno
[1] = 
uù_c⁄ƒ
->
¢d_nxt
[1];

2198 
UIP_TCP_BUF
->
£qno
[2] = 
uù_c⁄ƒ
->
¢d_nxt
[2];

2199 
UIP_TCP_BUF
->
£qno
[3] = 
uù_c⁄ƒ
->
¢d_nxt
[3];

2201 
UIP_IP_BUF
->
¥Ÿo
 = 
UIP_PROTO_TCP
;

2203 
UIP_TCP_BUF
->
§˝‹t
 = 
uù_c⁄ƒ
->
Õ‹t
;

2204 
UIP_TCP_BUF
->
de°p‹t
 = 
uù_c⁄ƒ
->
Ω‹t
;

2207 
	`uù_ùaddr_c›y
(&
UIP_IP_BUF
->
de°ùaddr
, &
uù_c⁄ƒ
->
rùaddr
);

2208 
	`uù_ds6_£À˘_§c
(&
UIP_IP_BUF
->
§cùaddr
,&UIP_IP_BUF->
de°ùaddr
);

2209 
	`PRINTF
("Sending TCPÖacketÅo");

2210 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
de°ùaddr
);

2211 
	`PRINTF
("from");

2212 
	`PRINT6ADDR
(&
UIP_IP_BUF
->
§cùaddr
);

2213 
	`PRINTF
("\n");

2215 if(
uù_c⁄ƒ
->
t˝°©eÊags
 & 
UIP_STOPPED
) {

2218 
UIP_TCP_BUF
->
wnd
[0] = UIP_TCP_BUF->wnd[1] = 0;

2220 
UIP_TCP_BUF
->
wnd
[0] = ((
UIP_RECEIVE_WINDOW
) >> 8);

2221 
UIP_TCP_BUF
->
wnd
[1] = ((
UIP_RECEIVE_WINDOW
) & 0xff);

2224 
t˝_£nd_noc⁄n
:

2225 
UIP_IP_BUF
->
âl
 = 
uù_ds6_if
.
cur_h›_limô
;

2226 
UIP_IP_BUF
->
Àn
[0] = ((
uù_Àn
 - 
UIP_IPH_LEN
) >> 8);

2227 
UIP_IP_BUF
->
Àn
[1] = ((
uù_Àn
 - 
UIP_IPH_LEN
) & 0xff);

2229 
UIP_TCP_BUF
->
urgp
[0] = UIP_TCP_BUF->urgp[1] = 0;

2232 
UIP_TCP_BUF
->
t˝chksum
 = 0;

2233 
UIP_TCP_BUF
->
t˝chksum
 = ~(
	`uù_t˝chksum
());

2234 
	`UIP_STAT
(++
uù_°©
.
t˝
.
£¡
);

2237 #i‡
UIP_UDP


2238 
ù_£nd_nﬁí
:

2240 #i‡
UIP_UDP
 || 
UIP_TCP


2241 
UIP_IP_BUF
->
vtc
 = 0x60;

2242 
UIP_IP_BUF
->
tcÊow
 = 0x00;

2243 
UIP_IP_BUF
->
Êow
 = 0x00;

2245 
£nd
:

2247 
	`UIP_STAT
(++
uù_°©
.
ù
.
£¡
);

2249 
uù_Êags
 = 0;

2252 
dr›
:

2253 
uù_Àn
 = 0;

2254 
uù_ext_Àn
 = 0;

2255 
uù_ext_bôm≠
 = 0;

2256 
uù_Êags
 = 0;

2258 
	}
}

2260 
uöt16_t


2261 
	$uù_ht⁄s
(
uöt16_t
 
vÆ
)

2263  
	`UIP_HTONS
(
vÆ
);

2264 
	}
}

2266 
uöt32_t


2267 
	$uù_ht⁄l
(
uöt32_t
 
vÆ
)

2269  
	`UIP_HTONL
(
vÆ
);

2270 
	}
}

2273 
	$uù_£nd
(c⁄° *
d©a
, 
Àn
)

2275 
c›yÀn
;

2276 
	#MIN
(
a
,
b
Ë(◊Ë< (b)? (a): (b))

	)

2277 
c›yÀn
 = 
	`MIN
(
Àn
, 
UIP_BUFSIZE
 - 
UIP_LLH_LEN
 - 
UIP_TCPIP_HLEN
 -

2278 ()((*)
uù_ßµd©a
 - (*)&
uù_buf
[
UIP_LLH_LEN
 + 
UIP_TCPIP_HLEN
]));

2279 if(
c›yÀn
 > 0) {

2280 
uù_¶í
 = 
c›yÀn
;

2281 if(
d©a
 !
uù_ßµd©a
) {

2282 
	`mem˝y
(
uù_ßµd©a
, (
d©a
), 
uù_¶í
);

2285 
	}
}

	@core/net/uipopt.h

65 #i‚de‡
__UIPOPT_H__


66 
	#__UIPOPT_H__


	)

68 #i‚de‡
UIP_LITTLE_ENDIAN


69 
	#UIP_LITTLE_ENDIAN
 3412

	)

71 #i‚de‡
UIP_BIG_ENDIAN


72 
	#UIP_BIG_ENDIAN
 1234

	)

75 
	~"c⁄tiki-c⁄f.h
"

104 
	#UIP_FIXEDADDR
 0

	)

118 #ifde‡
UIP_CONF_PINGADDRCONF


119 
	#UIP_PINGADDRCONF
 (
UIP_CONF_PINGADDRCONF
)

	)

121 
	#UIP_PINGADDRCONF
 0

	)

134 
	#UIP_FIXEDETHADDR
 0

	)

148 
	#UIP_TTL
 64

	)

155 
	#UIP_REASS_MAXAGE
 30

	)

170 #ifde‡
UIP_CONF_REASSEMBLY


171 
	#UIP_REASSEMBLY
 (
UIP_CONF_REASSEMBLY
)

	)

173 
	#UIP_REASSEMBLY
 0

	)

185 
	#UIP_LINK_MTU
 1280

	)

187 #i‚de‡
UIP_CONF_IPV6


189 
	#UIP_CONF_IPV6
 1

	)

192 #i‚de‡
UIP_CONF_IPV6_QUEUE_PKT


194 
	#UIP_CONF_IPV6_QUEUE_PKT
 0

	)

197 #i‚de‡
UIP_CONF_IPV6_CHECKS


199 
	#UIP_CONF_IPV6_CHECKS
 1

	)

202 #i‚de‡
UIP_CONF_IPV6_REASSEMBLY


204 
	#UIP_CONF_IPV6_REASSEMBLY
 0

	)

209 
	#UIP_CONF_NETIF_MAX_ADDRESSES
 1

	)

212 #i‚de‡
UIP_CONF_DS6_PREFIX_NBU


214 
	#UIP_CONF_DS6_PREFIX_NBU
 1

	)

217 #i‚de‡
UIP_CONF_DS6_NBR_NBU


219 
	#UIP_CONF_DS6_NBR_NBU
 2

	)

222 #i‚de‡
UIP_CONF_DS6_DEFRT_NBU


224 
	#UIP_CONF_DS6_DEFRT_NBU
 1

	)

244 #ifde‡
UIP_CONF_UDP


245 
	#UIP_UDP
 
UIP_CONF_UDP


	)

247 
	#UIP_UDP
 0

	)

259 
	#UIP_UDP_CHECKSUMS
 (
UIP_CONF_UDP_CHECKSUMS
)

	)

261 
	#UIP_UDP_CHECKSUMS
 (
UIP_CONF_IPV6
)

	)

269 #ifde‡
UIP_CONF_UDP_CONNS


270 
	#UIP_UDP_CONNS
 (
UIP_CONF_UDP_CONNS
)

	)

272 
	#UIP_UDP_CONNS
 10

	)

294 #ifde‡
UIP_CONF_TCP


295 
	#UIP_TCP
 (
UIP_CONF_TCP
)

	)

297 
	#UIP_TCP
 0

	)

310 #i‚de‡
UIP_CONF_ACTIVE_OPEN


311 
	#UIP_ACTIVE_OPEN
 0

	)

313 
	#UIP_ACTIVE_OPEN
 (
UIP_CONF_ACTIVE_OPEN
)

	)

325 #i‚de‡
UIP_CONF_MAX_CONNECTIONS


326 
	#UIP_CONNS
 2

	)

328 
	#UIP_CONNS
 (
UIP_CONF_MAX_CONNECTIONS
)

	)

339 #i‚de‡
UIP_CONF_MAX_LISTENPORTS


340 
	#UIP_LISTENPORTS
 20

	)

342 
	#UIP_LISTENPORTS
 (
UIP_CONF_MAX_LISTENPORTS
)

	)

354 
	#UIP_URGDATA
 0

	)

361 
	#UIP_RTO
 3

	)

369 
	#UIP_MAXRTX
 8

	)

378 
	#UIP_MAXSYNRTX
 5

	)

386 #ifde‡
UIP_CONF_TCP_MSS


387 
	#UIP_TCP_MSS
 (
UIP_CONF_TCP_MSS
)

	)

389 
	#UIP_TCP_MSS
 (
UIP_BUFSIZE
 - 
UIP_LLH_LEN
 - 
UIP_TCPIP_HLEN
)

	)

401 #i‚de‡
UIP_CONF_RECEIVE_WINDOW


402 
	#UIP_RECEIVE_WINDOW
 (
UIP_TCP_MSS
)

	)

404 
	#UIP_RECEIVE_WINDOW
 (
UIP_CONF_RECEIVE_WINDOW
)

	)

412 #i‚de‡
UIP_CONF_WAIT_TIMEOUT


413 
	#UIP_TIME_WAIT_TIMEOUT
 120

	)

415 
	#UIP_TIME_WAIT_TIMEOUT
 
UIP_CONF_WAIT_TIMEOUT


	)

433 #ifde‡
UIP_CONF_ARPTAB_SIZE


434 
	#UIP_ARPTAB_SIZE
 (
UIP_CONF_ARPTAB_SIZE
)

	)

436 
	#UIP_ARPTAB_SIZE
 3

	)

445 
	#UIP_ARP_MAXAGE
 120

	)

457 
	#UIP_DEFAULT_PREFIX_LEN
 64

	)

471 #ifde‡
SICSLOWPAN_CONF_MAXAGE


472 
	#SICSLOWPAN_REASS_MAXAGE
 (
SICSLOWPAN_CONF_MAXAGE
)

	)

474 
	#SICSLOWPAN_REASS_MAXAGE
 20

	)

480 #i‚de‡
SICSLOWPAN_CONF_COMPRESSION


481 
	#SICSLOWPAN_CONF_COMPRESSION
 1

	)

487 #i‚de‡
SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS


488 
	#SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 1

	)

494 #i‚de‡
SICSLOWPAN_CONF_FRAG


495 
	#SICSLOWPAN_CONF_FRAG
 0

	)

516 #i‚de‡
UIP_CONF_BUFFER_SIZE


517 
	#UIP_BUFSIZE
 (
UIP_LINK_MTU
 + 
UIP_LLH_LEN
)

	)

519 
	#UIP_BUFSIZE
 (
UIP_CONF_BUFFER_SIZE
)

	)

530 #i‚de‡
UIP_CONF_STATISTICS


531 
	#UIP_STATISTICS
 0

	)

533 
	#UIP_STATISTICS
 (
UIP_CONF_STATISTICS
)

	)

545 #i‚de‡
UIP_CONF_LOGGING


546 
	#UIP_LOGGING
 0

	)

548 
	#UIP_LOGGING
 (
UIP_CONF_LOGGING
)

	)

560 #i‚de‡
UIP_CONF_BROADCAST


561 
	#UIP_BROADCAST
 0

	)

563 
	#UIP_BROADCAST
 (
UIP_CONF_BROADCAST
)

	)

572 
uù_log
(*
msg
);

588 #ifde‡
UIP_CONF_LLH_LEN


589 
	#UIP_LLH_LEN
 (
UIP_CONF_LLH_LEN
)

	)

591 
	#UIP_LLH_LEN
 14

	)

615 #ifde‡
UIP_CONF_BYTE_ORDER


616 
	#UIP_BYTE_ORDER
 (
UIP_CONF_BYTE_ORDER
)

	)

618 
	#UIP_BYTE_ORDER
 (
UIP_LITTLE_ENDIAN
)

	)

	@core/sys/clock.h

68 #i‚de‡
__CLOCK_H__


69 
	#__CLOCK_H__


	)

71 
	~"c⁄tiki-c⁄f.h
"

73 
	#CCIF


	)

74 
	#CCLF


	)

76 
	t˛ock_time_t
;

82 #ifde‡
CLOCK_CONF_SECOND


83 
	#CLOCK_SECOND
 
CLOCK_CONF_SECOND


	)

85 
	#CLOCK_SECOND
 (
˛ock_time_t
)32

	)

95 
˛ock_öô
();

104 
CCIF
 
˛ock_time_t
 
˛ock_time
();

114 
CCIF
 
˛ock_£c⁄ds
();

121 
˛ock_£t_£c⁄ds
(
£c
);

128 
˛ock_waô
(
˛ock_time_t
 
t
);

136 
˛ock_dñay_u£c
(
dt
);

142 
˛ock_föe_max
();

143 
˛ock_föe
();

144 
˛ock_dñay
(
dñay
);

	@core/sys/stimer.c

48 
	~"c⁄tiki-c⁄f.h
"

49 
	~"sys/°imî.h
"

51 
	$˛ock_£c⁄ds
()

54 
	}
}

56 
	#SCLOCK_GEQ
(
a
, 
b
) (()((a) - (b)) < \

57 (()(~(()0)Ë>> 1))

	)

72 
	$°imî_£t
(
°imî
 *
t
, 
öãrvÆ
)

74 
t
->
öãrvÆ
 = interval;

75 
t
->
°¨t
 = 
	`˛ock_£c⁄ds
();

76 
	}
}

92 
	$°imî_ª£t
(
°imî
 *
t
)

94 
t
->
°¨t
 +t->
öãrvÆ
;

95 
	}
}

112 
	$°imî_ª°¨t
(
°imî
 *
t
)

114 
t
->
°¨t
 = 
	`˛ock_£c⁄ds
();

115 
	}
}

129 
	$°imî_expúed
(
°imî
 *
t
)

131  
	`SCLOCK_GEQ
(
	`˛ock_£c⁄ds
(), 
t
->
°¨t
 +Å->
öãrvÆ
);

132 
	}
}

145 
	$°imî_ªmaöög
(
°imî
 *
t
)

147  
t
->
°¨t
 +Å->
öãrvÆ
 - 
	`˛ock_£c⁄ds
();

148 
	}
}

161 
	$°imî_ñ≠£d
(
°imî
 *
t
)

163  
	`˛ock_£c⁄ds
(Ë- 
t
->
°¨t
;

164 
	}
}

	@core/sys/stimer.h

69 #i‚de‡
__STIMER_H__


70 
	#__STIMER_H__


	)

72 
	~"sys/˛ock.h
"

82 
	s°imî
 {

83 
	m°¨t
;

84 
	möãrvÆ
;

87 
°imî_£t
(
°imî
 *
t
, 
öãrvÆ
);

88 
°imî_ª£t
(
°imî
 *
t
);

89 
°imî_ª°¨t
(
°imî
 *
t
);

90 
°imî_expúed
(
°imî
 *
t
);

91 
°imî_ªmaöög
(
°imî
 *
t
);

92 
°imî_ñ≠£d
(
°imî
 *
t
);

	@core/sys/timer.c

48 
	~"c⁄tiki-c⁄f.h
"

49 
	~"sys/˛ock.h
"

50 
	~"sys/timî.h
"

65 
	$timî_£t
(
timî
 *
t
, 
˛ock_time_t
 
öãrvÆ
)

67 
t
->
öãrvÆ
 = interval;

68 
t
->
°¨t
 = 
	`˛ock_time
();

69 
	}
}

85 
	$timî_ª£t
(
timî
 *
t
)

87 
t
->
°¨t
 +t->
öãrvÆ
;

88 
	}
}

105 
	$timî_ª°¨t
(
timî
 *
t
)

107 
t
->
°¨t
 = 
	`˛ock_time
();

108 
	}
}

122 
	$timî_expúed
(
timî
 *
t
)

126 
˛ock_time_t
 
diff
 = (
	`˛ock_time
(Ë- 
t
->
°¨t
) + 1;

127  
t
->
öãrvÆ
 < 
diff
;

129 
	}
}

141 
˛ock_time_t


142 
	$timî_ªmaöög
(
timî
 *
t
)

144  
t
->
°¨t
 +Å->
öãrvÆ
 - 
	`˛ock_time
();

145 
	}
}

	@core/sys/timer.h

74 #i‚de‡
__TIMER_H__


75 
	#__TIMER_H__


	)

77 
	~"sys/˛ock.h
"

87 
	stimî
 {

88 
˛ock_time_t
 
	m°¨t
;

89 
˛ock_time_t
 
	möãrvÆ
;

92 
timî_£t
(
timî
 *
t
, 
˛ock_time_t
 
öãrvÆ
);

93 
timî_ª£t
(
timî
 *
t
);

94 
timî_ª°¨t
(
timî
 *
t
);

95 
timî_expúed
(
timî
 *
t
);

96 
˛ock_time_t
 
timî_ªmaöög
(
timî
 *
t
);

	@platform/cc430/bsp/bsp.c

42 
	~"b•.h
"

43 
	~"b•_drivî_defs.h
"

44 
	~"°döt.h
"

57 
	$BSP_Inô
()

59 
	`BSP_INIT_BOARD
();

60 
	`BSP_INIT_DRIVERS
();

66 #ifde‡
BSP_ASSERTS_ARE_ON


69 
uöt16_t
 
ã°
 = 0x00AA;

70 
	`BSP_ASSERT
(!(*((
uöt8_t
 *)&
ã°
)Ë=!
BSP_LITTLE_ENDIAN
);

73 
	}
}

80 #ifde‡
BSP_BOARD_C


81 #ö˛udê
BSP_BOARD_C


84 #ifde‡
BSP_DRIVERS_C


85 #ö˛udê
BSP_DRIVERS_C


93 
BSP_STATIC_ASSERT
––
uöt8_t
 ) == 1 );

94 
BSP_STATIC_ASSERT
––
öt8_t
 ) == 1 );

95 
BSP_STATIC_ASSERT
––
uöt16_t
 ) == 2 );

96 
BSP_STATIC_ASSERT
––
öt16_t
 ) == 2 );

97 
BSP_STATIC_ASSERT
––
uöt32_t
 ) == 4 );

98 
BSP_STATIC_ASSERT
––
öt32_t
 ) == 4 );

	@platform/cc430/bsp/bsp.h

38 #i‚de‡
BSP_H


39 
	#BSP_H


	)

46 
	~"b•_bﬂrd_defs.h
"

47 
	~"b•_ma¸os.h
"

53 
	#BSP


	)

54 
	#BSP_VER
 100

	)

55 
	#BSP_SUBVER
 
a


	)

62 
	#BSP_CLOCK_MHZ
 
__b•_CLOCK_MHZ__


	)

69 #i‚de‡
__b•_LITTLE_ENDIAN__


70 #îr‹ 
ERROR
: 
Endü√ss
 
nŸ
 
deföed


73 
	#BSP_LITTLE_ENDIAN
 
__b•_LITTLE_ENDIAN__


	)

75 
	#CODE
 
__b•_CODE_MEMSPACE__


	)

76 
	#XDATA
 
__b•_XDATA_MEMSPACE__


	)

82 
	#BSP_ISR_FUNCTION
(
func
,
ve˘
Ë
	`__b•_ISR_FUNCTION__
(func,ve˘)

	)

84 
	#BSP_ENABLE_INTERRUPTS
(Ë
	`__b•_ENABLE_INTERRUPTS__
()

	)

85 
	#BSP_DISABLE_INTERRUPTS
(Ë
	`__b•_DISABLE_INTERRUPTS__
()

	)

86 
	#BSP_INTERRUPTS_ARE_ENABLED
(Ë
	`__b•_INTERRUPTS_ARE_ENABLED__
()

	)

93 
__b•_ISTATE_T__
 
	tb•ISèã_t
;

95 
	#BSP_ENTER_CRITICAL_SECTION
(
x
Ë
	`°
–x = 
	`__b•_GET_ISTATE__
(); 
	`__b•_DISABLE_INTERRUPTS__
(); )

	)

96 
	#BSP_EXIT_CRITICAL_SECTION
(
x
Ë
	`__b•_RESTORE_ISTATE__
(x)

	)

97 
	#BSP_CRITICAL_STATEMENT
(
x
Ë
	`°
–
b•ISèã_t
 
s
; \

	)

98 
BSP_ENTER_CRITICAL_SECTION
(
s
); \

99 
	gx
; \

100 
BSP_EXIT_CRITICAL_SECTION
(
s
); )

121 #i‡(!
deföed
 
BSP_NO_DEBUG
)

122 #i‚de‡
BSP_ASSERT_HANDLER


123 
	#BSP_ASSERT_HANDLER
(Ë
	`°
–
	`__b•_DISABLE_INTERRUPTS__
(); 1); )

	)

125 
	#BSP_ASSERT
(
ex¥
Ë
	`°
–i‡(!”x¥)Ë
	`BSP_ASSERT_HANDLER
(); )

	)

126 
	#BSP_FORCE_ASSERT
(Ë
	`BSP_ASSERT_HANDLER
()

	)

127 
	#BSP_ASSERTS_ARE_ON


	)

129 
	#BSP_ASSERT
(
ex¥
Ë

	)

130 
	#BSP_FORCE_ASSERT
(Ë

	)

134 
	#BSP_STATIC_ASSERT
(
ex¥
Ë
	`b•DummyPrŸŸy≥
–
dummy
[1/(”x¥)!=0)] )

	)

141 
BSP_Inô
();

156 #i‡(
BSP_LITTLE_ENDIAN
 != 0)

157 
	#¡ohs
(
x
Ë(x)

	)

158 
	#ht⁄s
(
x
Ë(x)

	)

160 
	#¡ohl
(
x
Ë(x)

	)

161 
	#ht⁄l
(
x
Ë(x)

	)

165 
	#¡ohs
(
x
Ë(((x>>8Ë& 0xFFË| ((x & 0xFF)<<8))

	)

166 
	#ht⁄s
(
x
Ë(((x>>8Ë& 0xFFË| ((x & 0xFF)<<8))

	)

168 
	#¡ohl
(
x
Ë–((x>>24Ë& 0xFFË| ((x>>8Ë& 0xFF00Ë| \

	)

169 ((
	gx
 & 0xFF00)<<8) | ((x & 0xFF)<<24) \

171 
	#ht⁄l
(
x
Ë–((x>>24Ë& 0xFFË| ((x>>8Ë& 0xFF00Ë| \

	)

172 ((
	gx
 & 0xFF00)<<8) | ((x & 0xFF)<<24) \

	@platform/cc430/bsp/bsp_board.c

44 
	~"b•.h
"

45 
	~"b•_c⁄fig.h
"

51 
SëVC‹e
(
uöt8_t
 
Àvñ
);

52 
SëVC‹eUp
(
uöt8_t
 
Àvñ
);

53 
SëVC‹eDown
(
uöt8_t
 
Àvñ
);

54 
B•_SëVC‹e
();

55 
B•_SëClocks
();

61 
	#BSP_TIMER_CLK_MHZ
 12

	)

62 
	#BSP_DELAY_MAX_USEC
 (0xFFFF/
BSP_TIMER_CLK_MHZ
)

	)

74 
	$SëVC‹e
 (
uöt8_t
 
Àvñ
)

76 
uöt8_t
 
a˘Levñ
;

78 
a˘Levñ
 = 
PMMCTL0_L
 & 
PMMCOREV_3
;

79 i‡(
a˘Levñ
 < 
Àvñ
)

80 
	`SëVC‹eUp
(++
a˘Levñ
);

81 i‡(
a˘Levñ
 > 
Àvñ
)

82 
	`SëVC‹eDown
(--
a˘Levñ
);

83 }
a˘Levñ
 !
Àvñ
);

84 
	}
}

96 
	$SëVC‹eUp
 (
uöt8_t
 
Àvñ
)

98 
PMMCTL0_H
 = 0xA5;

100 
SVSMHCTL
 = 
SVSHE
 + 
SVSHRVL0
 * 
Àvñ
 + 
SVMHE
 + 
SVSMHRRL0
 *Üevel;

102 
SVSMLCTL
 = 
SVSLE
 + 
SVMLE
 + 
SVSMLRRL0
 * 
Àvñ
;

103 (
PMMIFG
 & 
SVSMLDLYIFG
) == 0);

104 
PMMCTL0_L
 = 
PMMCOREV0
 * 
Àvñ
;

105 
PMMIFG
 &~(
SVMLVLRIFG
 + 
SVMLIFG
);

106 i‡((
PMMIFG
 & 
SVMLIFG
))

107 (
PMMIFG
 & 
SVMLVLRIFG
) == 0);

109 
SVSMLCTL
 = 
SVSLE
 + 
SVSLRVL0
 * 
Àvñ
 + 
SVMLE
 + 
SVSMLRRL0
 *Üevel;

110 
PMMCTL0_H
 = 0x00;

111 
	}
}

123 
	$SëVC‹eDown
 (
uöt8_t
 
Àvñ
)

125 
PMMCTL0_H
 = 0xA5;

126 
SVSMLCTL
 = 
SVSLE
 + 
SVSLRVL0
 * 
Àvñ
 + 
SVMLE
 + 
SVSMLRRL0
 *Üevel;

127 (
PMMIFG
 & 
SVSMLDLYIFG
) == 0);

128 
PMMCTL0_L
 = (
Àvñ
 * 
PMMCOREV0
);

129 
PMMCTL0_H
 = 0x00;

130 
	}
}

142 
	$B•_SëVC‹e
()

144 
	`SëVC‹e
(3);

145 
	}
}

157 
	$B•_SëClocks
()

164 
UCSCTL3
 |
SELREF_2
;

165 
UCSCTL4
 |
SELA_2
;

167 
	`__bis_SR_ªgi°î
(
SCG0
);

168 
UCSCTL0
 = 0x0000;

169 
UCSCTL1
 = 
DCORSEL_5
;

170 
UCSCTL2
 = 
FLLD_1
 + 374;

174 
	`__bic_SR_ªgi°î
(
SCG0
);

180 
	`__dñay_cy˛es
(375000);

185 
UCSCTL7
 &~(
XT2OFFG
 + 
XT1LFOFFG
 + 
DCOFFG
);

187 
SFRIFG1
 &~
OFIFG
;

188 }
SFRIFG1
&
OFIFG
);

191 
UCSCTL4
 = 
SELA__REFOCLK
 | 
SELS__DCOCLKDIV
 | 
SELM__DCOCLKDIV
;

192 
	}
}

209 
	$BSP_EARLY_INIT
()

212 
WDTCTL
 = 
WDTPW
 | 
WDTHOLD
;

215 
	`B•_SëVC‹e
();

218 
	`B•_SëClocks
();

222 
	}
}

234 
	$BSP_InôBﬂrd
()

239 
TA0CTL
 |
TACLR
;

242 
TA1CTL
 |
TACLR
;

245 
TA0CTL
 = 0x0;

246 
TA1CTL
 = 0x0;

249 
TA0CTL
 |
TASSEL_2
;

250 
TA1CTL
 |
TASSEL_2
;

251 
	}
}

263 
	$BSP_Dñay
(
uöt16_t
 
u£c
)

265 
	`BSP_ASSERT
(
u£c
 < 
BSP_DELAY_MAX_USEC
);

267 
TA0R
 = 0;

268 
TA0CCR0
 = 
BSP_TIMER_CLK_MHZ
*
u£c
;

271 
TA0CTL
 |
MC_1
;

274 !(
TA0CCTL0
 & 
CCIFG
));

277 
TA0CTL
 &~(
MC_1
);

280 
TA0CCTL0
 &~
CCIFG
;

281 
	}
}

	@platform/cc430/bsp/bsp_board_defs.h

39 #i‚de‡
BSP_BOARD_DEFS_H


40 
	#BSP_BOARD_DEFS_H


	)

47 
	#BSP_BOARD_CC430EM


	)

54 
	~"b•_m•430_defs.h
"

61 
	~"b•_c⁄fig.h
"

62 
	#__b•_CLOCK_MHZ__
 
BSP_CONFIG_CLOCK_MHZ


	)

69 
	#BSP_BOARD_C
 "b•_bﬂrd.c"

	)

70 
	#BSP_INIT_BOARD
(Ë
	`BSP_InôBﬂrd
()

	)

71 
	#BSP_DELAY_USECS
(
x
Ë
	`BSP_Dñay
(x)

	)

73 
BSP_InôBﬂrd
();

74 
BSP_Dñay
(
u£c
);

	@platform/cc430/bsp/bsp_button_defs.h

39 #i‚de‡
BSP_BUTTON_DEFS_H


40 
	#BSP_BUTTON_DEFS_H


	)

47 
	~"b•_bﬂrd_defs.h
"

48 
	~"b•_ma¸os.h
"

55 
	#__b•_NUM_BUTTONS__
 1

	)

56 
	#__b•_BUTTON_DEBOUNCE_WAIT__
(
ex¥
Ë
	`°
–
i
; i=0; i<500; i++Ë{ i‡(!”x¥)Ëò0; } )

	)

68 
	#__b•_BUTTON1_BIT__
 7

	)

69 
	#__b•_BUTTON1_PORT__
 
P1IN


	)

70 
	#__b•_BUTTON1_IS_ACTIVE_LOW__
 1

	)

78 
	#__b•_BUTTON_EXTENDED_CONFIG__
(Ë
	`°
–
P1OUT
 |
	`BV
(
__b•_BUTTON1_BIT__
); \

	)

79 
	gP1REN
 |
BV
(
__b•_BUTTON1_BIT__
);)

86 
	~"b•_gíîic_buâ⁄s.h
"

	@platform/cc430/bsp/bsp_buttons.c

42 
	~"b•_buâ⁄s.h
"

43 
	~"b•_buâ⁄_defs.h
"

50 
	#BSP_CONFIG_BUTTON1
(Ë
	`__b•_BUTTON1_CONFIG__
()

	)

51 
	#BSP_CONFIG_BUTTON2
(Ë
	`__b•_BUTTON2_CONFIG__
()

	)

52 
	#BSP_CONFIG_BUTTON3
(Ë
	`__b•_BUTTON3_CONFIG__
()

	)

53 
	#BSP_CONFIG_BUTTON4
(Ë
	`__b•_BUTTON4_CONFIG__
()

	)

54 
	#BSP_CONFIG_BUTTON5
(Ë
	`__b•_BUTTON5_CONFIG__
()

	)

55 
	#BSP_CONFIG_BUTTON6
(Ë
	`__b•_BUTTON6_CONFIG__
()

	)

56 
	#BSP_CONFIG_BUTTON7
(Ë
	`__b•_BUTTON7_CONFIG__
()

	)

57 
	#BSP_CONFIG_BUTTON8
(Ë
	`__b•_BUTTON8_CONFIG__
()

	)

59 #ifde‡
__b•_BUTTON_EXTENDED_CONFIG__


60 
	#BSP_BUTTON_EXTENDED_CONFIG
(Ë
	`__b•_BUTTON_EXTENDED_CONFIG__
()

	)

62 
	#BSP_BUTTON_EXTENDED_CONFIG
()

	)

76 
	$BSP_InôBuâ⁄s
()

79 
	`BSP_CONFIG_BUTTON1
();

80 
	`BSP_CONFIG_BUTTON2
();

81 
	`BSP_CONFIG_BUTTON3
();

82 
	`BSP_CONFIG_BUTTON4
();

83 
	`BSP_CONFIG_BUTTON5
();

84 
	`BSP_CONFIG_BUTTON6
();

85 
	`BSP_CONFIG_BUTTON7
();

86 
	`BSP_CONFIG_BUTTON8
();

89 
	`BSP_BUTTON_EXTENDED_CONFIG
();

90 
	}
}

	@platform/cc430/bsp/bsp_buttons.h

38 #i‚de‡
BSP_BUTTONS_H


39 
	#BSP_BUTTONS_H


	)

46 
	~"b•_buâ⁄_defs.h
"

53 
	#BSP_NUM_BUTTONS
 
__b•_NUM_BUTTONS__


	)

60 
	#BSP_BUTTON_DEBOUNCE_WAIT
(
ex¥
Ë
	`__b•_BUTTON_DEBOUNCE_WAIT__
”x¥)

	)

62 
	#BSP_BUTTON1
(Ë
	`__b•_BUTTON1__
()

	)

63 
	#BSP_BUTTON2
(Ë
	`__b•_BUTTON2__
()

	)

64 
	#BSP_BUTTON3
(Ë
	`__b•_BUTTON3__
()

	)

65 
	#BSP_BUTTON4
(Ë
	`__b•_BUTTON4__
()

	)

66 
	#BSP_BUTTON5
(Ë
	`__b•_BUTTON5__
()

	)

67 
	#BSP_BUTTON6
(Ë
	`__b•_BUTTON6__
()

	)

68 
	#BSP_BUTTON7
(Ë
	`__b•_BUTTON7__
()

	)

69 
	#BSP_BUTTON8
(Ë
	`__b•_BUTTON8__
()

	)

76 
BSP_InôBuâ⁄s
();

83 #ifde‡
BSP_NO_BUTTONS


	@platform/cc430/bsp/bsp_config.h

39 #i‚de‡
BSP_CONFIG_H


40 
	#BSP_CONFIG_H


	)

	@platform/cc430/bsp/bsp_driver_defs.h

39 #i‚de‡
BSP_DRIVER_DEFS_H


40 
	#BSP_DRIVER_DEFS_H


	)

47 
	#BSP_DRIVERS_C
 "b•_drivîs.c"

	)

48 
	#BSP_INIT_DRIVERS
(Ë
	`BSP_InôDrivîs
()

	)

49 
BSP_InôDrivîs
();

	@platform/cc430/bsp/bsp_drivers.c

43 
	~"b•_drivî_defs.h
"

44 
	~"b•_Àds.h
"

45 
	~"b•_buâ⁄s.h
"

46 
	~"b•_c⁄fig.h
"

47 
	~"b•_u¨t.h
"

59 
	$BSP_InôDrivîs
()

61 #i‡(!
deföed
 
BSP_NO_LEDS
)

62 
	`BSP_InôLeds
();

65 #i‡(!
deföed
 
BSP_NO_BUTTONS
)

66 
	`BSP_InôBuâ⁄s
();

69 #i‡(!
deföed
 
BSP_NO_UART
)

70 
	`BSP_InôUART
();

72 
	}
}

79 #i‚de‡
BSP_NO_LEDS


80 
	~"b•_Àds.c
"

83 #i‚de‡
BSP_NO_BUTTONS


84 
	~"b•_buâ⁄s.c
"

	@platform/cc430/bsp/bsp_generic_buttons.h

38 #i‚de‡
BSP_GENERIC_BUTTONS_H


39 
	#BSP_GENERIC_BUTTONS_H


	)

46 
	~"b•_bﬂrd_defs.h
"

47 
	~"b•_ma¸os.h
"

54 
	#__b•_BUTTON__
(
p‹t
,
bô
,
low
Ë(÷owË? (!(’‹tË& 
	`BV
(bô))Ë: (’‹tË& BV(bô)Ë)

	)

58 
	#__b•_NUM_BUTTON1_DEFINES__
 ((
deföed
 
__b•_BUTTON1_PORT__
Ë+ \

	)

59 (
deföed
 
	g__b•_BUTTON1_BIT__
) + \

60 (
deföed
 
	g__b•_BUTTON1_IS_ACTIVE_LOW__
))

61 #i‡(
__b•_NUM_BUTTON1_DEFINES__
 == 3)

62 
	#__b•_BUTTON1__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON1_PORT__
, 
__b•_BUTTON1_BIT__
, 
__b•_BUTTON1_IS_ACTIVE_LOW__
 )

	)

63 
	#__b•_BUTTON1_CONFIG__
(Ë

	)

64 #ñi‡(
__b•_NUM_BUTTON1_DEFINES__
 == 0)

65 
	#__b•_BUTTON1__
(Ë 0

	)

66 
	#__b•_BUTTON1_CONFIG__
(Ë

	)

72 
	#__b•_NUM_BUTTON2_DEFINES__
 ((
deföed
 
__b•_BUTTON2_PORT__
Ë+ \

	)

73 (
deföed
 
	g__b•_BUTTON2_BIT__
) + \

74 (
deföed
 
	g__b•_BUTTON2_IS_ACTIVE_LOW__
))

75 #i‡(
__b•_NUM_BUTTON2_DEFINES__
 == 3)

76 
	#__b•_BUTTON2__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON2_PORT__
, 
__b•_BUTTON2_BIT__
, 
__b•_BUTTON2_IS_ACTIVE_LOW__
 )

	)

77 
	#__b•_BUTTON2_CONFIG__
(Ë

	)

78 #ñi‡(
__b•_NUM_BUTTON2_DEFINES__
 == 0)

79 
	#__b•_BUTTON2__
(Ë 0

	)

80 
	#__b•_BUTTON2_CONFIG__
(Ë

	)

86 
	#__b•_NUM_BUTTON3_DEFINES__
 ((
deföed
 
__b•_BUTTON3_PORT__
Ë+ \

	)

87 (
deföed
 
	g__b•_BUTTON3_BIT__
) + \

88 (
deföed
 
	g__b•_BUTTON3_IS_ACTIVE_LOW__
))

89 #i‡(
__b•_NUM_BUTTON3_DEFINES__
 == 3)

90 
	#__b•_BUTTON3__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON3_PORT__
, 
__b•_BUTTON3_BIT__
, 
__b•_BUTTON3_IS_ACTIVE_LOW__
 )

	)

91 
	#__b•_BUTTON3_CONFIG__
(Ë

	)

92 #ñi‡(
__b•_NUM_BUTTON3_DEFINES__
 == 0)

93 
	#__b•_BUTTON3__
(Ë 0

	)

94 
	#__b•_BUTTON3_CONFIG__
(Ë

	)

100 
	#__b•_NUM_BUTTON4_DEFINES__
 ((
deföed
 
__b•_BUTTON4_PORT__
Ë+ \

	)

101 (
deföed
 
	g__b•_BUTTON4_BIT__
) + \

102 (
deföed
 
	g__b•_BUTTON4_IS_ACTIVE_LOW__
))

103 #i‡(
__b•_NUM_BUTTON4_DEFINES__
 == 3)

104 
	#__b•_BUTTON4__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON4_PORT__
, 
__b•_BUTTON4_BIT__
, 
__b•_BUTTON4_IS_ACTIVE_LOW__
 )

	)

105 
	#__b•_BUTTON4_CONFIG__
(Ë

	)

106 #ñi‡(
__b•_NUM_BUTTON4_DEFINES__
 == 0)

107 
	#__b•_BUTTON4__
(Ë 0

	)

108 
	#__b•_BUTTON4_CONFIG__
(Ë

	)

114 
	#__b•_NUM_BUTTON5_DEFINES__
 ((
deföed
 
__b•_BUTTON5_PORT__
Ë+ \

	)

115 (
deföed
 
	g__b•_BUTTON5_BIT__
) + \

116 (
deföed
 
	g__b•_BUTTON5_IS_ACTIVE_LOW__
))

117 #i‡(
__b•_NUM_BUTTON5_DEFINES__
 == 3)

118 
	#__b•_BUTTON5__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON5_PORT__
, 
__b•_BUTTON5_BIT__
, 
__b•_BUTTON5_IS_ACTIVE_LOW__
 )

	)

119 
	#__b•_BUTTON5_CONFIG__
(Ë

	)

120 #ñi‡(
__b•_NUM_BUTTON5_DEFINES__
 == 0)

121 
	#__b•_BUTTON5__
(Ë 0

	)

122 
	#__b•_BUTTON5_CONFIG__
(Ë

	)

128 
	#__b•_NUM_BUTTON6_DEFINES__
 ((
deföed
 
__b•_BUTTON6_PORT__
Ë+ \

	)

129 (
deföed
 
	g__b•_BUTTON6_BIT__
) + \

130 (
deföed
 
	g__b•_BUTTON6_IS_ACTIVE_LOW__
))

131 #i‡(
__b•_NUM_BUTTON6_DEFINES__
 == 3)

132 
	#__b•_BUTTON6__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON6_PORT__
, 
__b•_BUTTON6_BIT__
, 
__b•_BUTTON6_IS_ACTIVE_LOW__
 )

	)

133 
	#__b•_BUTTON6_CONFIG__
(Ë

	)

134 #ñi‡(
__b•_NUM_BUTTON6_DEFINES__
 == 0)

135 
	#__b•_BUTTON6__
(Ë 0

	)

136 
	#__b•_BUTTON6_CONFIG__
(Ë

	)

142 
	#__b•_NUM_BUTTON7_DEFINES__
 ((
deföed
 
__b•_BUTTON7_PORT__
Ë+ \

	)

143 (
deföed
 
	g__b•_BUTTON7_BIT__
) + \

144 (
deföed
 
	g__b•_BUTTON7_IS_ACTIVE_LOW__
))

145 #i‡(
__b•_NUM_BUTTON7_DEFINES__
 == 3)

146 
	#__b•_BUTTON7__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON7_PORT__
, 
__b•_BUTTON7_BIT__
, 
__b•_BUTTON7_IS_ACTIVE_LOW__
 )

	)

147 
	#__b•_BUTTON7_CONFIG__
(Ë

	)

148 #ñi‡(
__b•_NUM_BUTTON7_DEFINES__
 == 0)

149 
	#__b•_BUTTON7__
(Ë 0

	)

150 
	#__b•_BUTTON7_CONFIG__
(Ë

	)

156 
	#__b•_NUM_BUTTON8_DEFINES__
 ((
deföed
 
__b•_BUTTON8_PORT__
Ë+ \

	)

157 (
deföed
 
	g__b•_BUTTON8_BIT__
) + \

158 (
deföed
 
	g__b•_BUTTON8_IS_ACTIVE_LOW__
))

159 #i‡(
__b•_NUM_BUTTON8_DEFINES__
 == 3)

160 
	#__b•_BUTTON8__
(Ë
	`__b•_BUTTON__
–
__b•_BUTTON8_PORT__
, 
__b•_BUTTON8_BIT__
, 
__b•_BUTTON8_IS_ACTIVE_LOW__
 )

	)

161 
	#__b•_BUTTON8_CONFIG__
(Ë

	)

162 #ñi‡(
__b•_NUM_BUTTON8_DEFINES__
 == 0)

163 
	#__b•_BUTTON8__
(Ë 0

	)

164 
	#__b•_BUTTON8_CONFIG__
(Ë

	)

176 #i‚de‡
__b•_NUM_BUTTONS__


179 #i‡((
__b•_NUM_BUTTONS__
 > 8) || (__bsp_NUM_BUTTONS__ < 0))

184 #i‡(((
__b•_NUM_BUTTON1_DEFINES__
 != 0) + \

185 (
	g__b•_NUM_BUTTON2_DEFINES__
 != 0) + \

186 (
__b•_NUM_BUTTON3_DEFINES__
 != 0) + \

187 (
__b•_NUM_BUTTON4_DEFINES__
 != 0) + \

188 (
__b•_NUM_BUTTON5_DEFINES__
 != 0) + \

189 (
__b•_NUM_BUTTON6_DEFINES__
 != 0) + \

190 (
__b•_NUM_BUTTON7_DEFINES__
 != 0) + \

191 (
__b•_NUM_BUTTON8_DEFINES__
 !0)Ë!
__b•_NUM_BUTTONS__
)

196 #i‚de‡
__b•_BUTTON_DEBOUNCE_WAIT__


	@platform/cc430/bsp/bsp_generic_leds.h

38 #i‚de‡
BSP_GENERIC_LEDS_H


39 
	#BSP_GENERIC_LEDS_H


	)

46 
	~"b•_ma¸os.h
"

60 
	#__b•_LED_TURN_ON__
(
bô
,
p‹t
,
ddr
,
low
Ë\

	)

61 
°
–i‡(
low
Ë{ 
p‹t
 &~
BV
(
bô
); } {Öort |= BV(bit); } )

63 
	#__b•_LED_TURN_OFF__
(
bô
,
p‹t
,
ddr
,
low
Ë\

	)

64 
°
–i‡(
low
Ë{ 
p‹t
 |
BV
(
bô
); } {Öort &= ~BV(bit); } )

66 
	#__b•_LED_IS_ON__
(
bô
,
p‹t
,
ddr
,
low
Ë\

	)

67 –(
	glow
Ë? (!((
	gp‹t
Ë& 
	$BV
(
bô
))Ë: ((
p‹t
Ë& 
	$BV
(
bô
)) )

69 
	#__b•_LED_TOGGLE__
(
bô
,
p‹t
,
ddr
,
low
Ë
	`°
–p‹à^
	`BV
(bô); )

	)

70 
	#__b•_LED_CONFIG__
(
bô
,
p‹t
,
ddr
,
low
Ë
	`°
–dd∏|
	`BV
(bô); )

	)

75 
	#__b•_NUM_LED1_DEFINES__
 ((
deföed
 
__b•_LED1_BIT__
Ë+ \

	)

76 (
deföed
 
__b•_LED1_PORT__
) + \

77 (
deföed
 
__b•_LED1_DDR__
) + \

78 (
deföed
 
__b•_LED1_IS_ACTIVE_LOW__
))

79 #i‡(
__b•_NUM_LED1_DEFINES__
 == 4)

80 
	#__b•_LED1_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED1_BIT__
, 
__b•_LED1_PORT__
, 
__b•_LED1_DDR__
, 
__b•_LED1_IS_ACTIVE_LOW__
 )

	)

81 
	#__b•_LED1_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED1_BIT__
, 
__b•_LED1_PORT__
, 
__b•_LED1_DDR__
, 
__b•_LED1_IS_ACTIVE_LOW__
 )

	)

82 
	#__b•_LED1_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED1_BIT__
, 
__b•_LED1_PORT__
, 
__b•_LED1_DDR__
, 
__b•_LED1_IS_ACTIVE_LOW__
 )

	)

83 
	#__b•_LED1_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED1_BIT__
, 
__b•_LED1_PORT__
, 
__b•_LED1_DDR__
, 
__b•_LED1_IS_ACTIVE_LOW__
 )

	)

84 
	#__b•_LED1_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED1_BIT__
, 
__b•_LED1_PORT__
, 
__b•_LED1_DDR__
, 
__b•_LED1_IS_ACTIVE_LOW__
 )

	)

85 #ñi‡(
__b•_NUM_LED1_DEFINES__
 == 0)

86 
	#__b•_LED1_TURN_ON__
(Ë

	)

87 
	#__b•_LED1_TURN_OFF__
(Ë

	)

88 
	#__b•_LED1_TOGGLE__
(Ë

	)

89 
	#__b•_LED1_IS_ON__
(Ë 0

	)

90 
	#__b•_LED1_CONFIG__
(Ë

	)

97 
	#__b•_NUM_LED2_DEFINES__
 ((
deföed
 
__b•_LED2_BIT__
Ë+ \

	)

98 (
deföed
 
__b•_LED2_PORT__
) + \

99 (
deföed
 
__b•_LED2_DDR__
) + \

100 (
deföed
 
__b•_LED2_IS_ACTIVE_LOW__
))

101 #i‡(
__b•_NUM_LED2_DEFINES__
 == 4)

102 
	#__b•_LED2_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED2_BIT__
, 
__b•_LED2_PORT__
, 
__b•_LED2_DDR__
, 
__b•_LED2_IS_ACTIVE_LOW__
 )

	)

103 
	#__b•_LED2_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED2_BIT__
, 
__b•_LED2_PORT__
, 
__b•_LED2_DDR__
, 
__b•_LED2_IS_ACTIVE_LOW__
 )

	)

104 
	#__b•_LED2_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED2_BIT__
, 
__b•_LED2_PORT__
, 
__b•_LED2_DDR__
, 
__b•_LED2_IS_ACTIVE_LOW__
 )

	)

105 
	#__b•_LED2_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED2_BIT__
, 
__b•_LED2_PORT__
, 
__b•_LED2_DDR__
, 
__b•_LED2_IS_ACTIVE_LOW__
 )

	)

106 
	#__b•_LED2_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED2_BIT__
, 
__b•_LED2_PORT__
, 
__b•_LED2_DDR__
, 
__b•_LED2_IS_ACTIVE_LOW__
 )

	)

107 #ñi‡(
__b•_NUM_LED2_DEFINES__
 == 0)

108 
	#__b•_LED2_TURN_ON__
(Ë

	)

109 
	#__b•_LED2_TURN_OFF__
(Ë

	)

110 
	#__b•_LED2_TOGGLE__
(Ë

	)

111 
	#__b•_LED2_IS_ON__
(Ë 0

	)

112 
	#__b•_LED2_CONFIG__
(Ë

	)

119 
	#__b•_NUM_LED3_DEFINES__
 ((
deföed
 
__b•_LED3_BIT__
Ë+ \

	)

120 (
deföed
 
__b•_LED3_PORT__
) + \

121 (
deföed
 
__b•_LED3_DDR__
) + \

122 (
deföed
 
__b•_LED3_IS_ACTIVE_LOW__
))

123 #i‡(
__b•_NUM_LED3_DEFINES__
 == 4)

124 
	#__b•_LED3_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED3_BIT__
, 
__b•_LED3_PORT__
, 
__b•_LED3_DDR__
, 
__b•_LED3_IS_ACTIVE_LOW__
 )

	)

125 
	#__b•_LED3_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED3_BIT__
, 
__b•_LED3_PORT__
, 
__b•_LED3_DDR__
, 
__b•_LED3_IS_ACTIVE_LOW__
 )

	)

126 
	#__b•_LED3_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED3_BIT__
, 
__b•_LED3_PORT__
, 
__b•_LED3_DDR__
, 
__b•_LED3_IS_ACTIVE_LOW__
 )

	)

127 
	#__b•_LED3_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED3_BIT__
, 
__b•_LED3_PORT__
, 
__b•_LED3_DDR__
, 
__b•_LED3_IS_ACTIVE_LOW__
 )

	)

128 
	#__b•_LED3_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED3_BIT__
, 
__b•_LED3_PORT__
, 
__b•_LED3_DDR__
, 
__b•_LED3_IS_ACTIVE_LOW__
 )

	)

129 #ñi‡(
__b•_NUM_LED3_DEFINES__
 == 0)

130 
	#__b•_LED3_TURN_ON__
(Ë

	)

131 
	#__b•_LED3_TURN_OFF__
(Ë

	)

132 
	#__b•_LED3_TOGGLE__
(Ë

	)

133 
	#__b•_LED3_IS_ON__
(Ë 0

	)

134 
	#__b•_LED3_CONFIG__
(Ë

	)

141 
	#__b•_NUM_LED4_DEFINES__
 ((
deföed
 
__b•_LED4_BIT__
Ë+ \

	)

142 (
deföed
 
__b•_LED4_PORT__
) + \

143 (
deföed
 
__b•_LED4_DDR__
) + \

144 (
deföed
 
__b•_LED4_IS_ACTIVE_LOW__
))

145 #i‡(
__b•_NUM_LED4_DEFINES__
 == 4)

146 
	#__b•_LED4_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED4_BIT__
, 
__b•_LED4_PORT__
, 
__b•_LED4_DDR__
, 
__b•_LED4_IS_ACTIVE_LOW__
 )

	)

147 
	#__b•_LED4_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED4_BIT__
, 
__b•_LED4_PORT__
, 
__b•_LED4_DDR__
, 
__b•_LED4_IS_ACTIVE_LOW__
 )

	)

148 
	#__b•_LED4_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED4_BIT__
, 
__b•_LED4_PORT__
, 
__b•_LED4_DDR__
, 
__b•_LED4_IS_ACTIVE_LOW__
 )

	)

149 
	#__b•_LED4_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED4_BIT__
, 
__b•_LED4_PORT__
, 
__b•_LED4_DDR__
, 
__b•_LED4_IS_ACTIVE_LOW__
 )

	)

150 
	#__b•_LED4_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED4_BIT__
, 
__b•_LED4_PORT__
, 
__b•_LED4_DDR__
, 
__b•_LED4_IS_ACTIVE_LOW__
 )

	)

151 #ñi‡(
__b•_NUM_LED4_DEFINES__
 == 0)

152 
	#__b•_LED4_TURN_ON__
(Ë

	)

153 
	#__b•_LED4_TURN_OFF__
(Ë

	)

154 
	#__b•_LED4_TOGGLE__
(Ë

	)

155 
	#__b•_LED4_IS_ON__
(Ë 0

	)

156 
	#__b•_LED4_CONFIG__
(Ë

	)

162 
	#__b•_NUM_LED5_DEFINES__
 ((
deföed
 
__b•_LED5_BIT__
Ë+ \

	)

163 (
deföed
 
__b•_LED5_PORT__
) + \

164 (
deföed
 
__b•_LED5_DDR__
) + \

165 (
deföed
 
__b•_LED5_IS_ACTIVE_LOW__
))

166 #i‡(
__b•_NUM_LED5_DEFINES__
 == 4)

167 
	#__b•_LED5_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED5_BIT__
, 
__b•_LED5_PORT__
, 
__b•_LED5_DDR__
, 
__b•_LED5_IS_ACTIVE_LOW__
 )

	)

168 
	#__b•_LED5_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED5_BIT__
, 
__b•_LED5_PORT__
, 
__b•_LED5_DDR__
, 
__b•_LED5_IS_ACTIVE_LOW__
 )

	)

169 
	#__b•_LED5_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED5_BIT__
, 
__b•_LED5_PORT__
, 
__b•_LED5_DDR__
, 
__b•_LED5_IS_ACTIVE_LOW__
 )

	)

170 
	#__b•_LED5_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED5_BIT__
, 
__b•_LED5_PORT__
, 
__b•_LED5_DDR__
, 
__b•_LED5_IS_ACTIVE_LOW__
 )

	)

171 
	#__b•_LED5_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED5_BIT__
, 
__b•_LED5_PORT__
, 
__b•_LED5_DDR__
, 
__b•_LED5_IS_ACTIVE_LOW__
 )

	)

172 #ñi‡(
__b•_NUM_LED5_DEFINES__
 == 0)

173 
	#__b•_LED5_TURN_ON__
(Ë

	)

174 
	#__b•_LED5_TURN_OFF__
(Ë

	)

175 
	#__b•_LED5_TOGGLE__
(Ë

	)

176 
	#__b•_LED5_IS_ON__
(Ë 0

	)

177 
	#__b•_LED5_CONFIG__
(Ë

	)

183 
	#__b•_NUM_LED6_DEFINES__
 ((
deföed
 
__b•_LED6_BIT__
Ë+ \

	)

184 (
deföed
 
__b•_LED6_PORT__
) + \

185 (
deföed
 
__b•_LED6_DDR__
) + \

186 (
deföed
 
__b•_LED6_IS_ACTIVE_LOW__
))

187 #i‡(
__b•_NUM_LED6_DEFINES__
 == 4)

188 
	#__b•_LED6_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED6_BIT__
, 
__b•_LED6_PORT__
, 
__b•_LED6_DDR__
, 
__b•_LED6_IS_ACTIVE_LOW__
 )

	)

189 
	#__b•_LED6_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED6_BIT__
, 
__b•_LED6_PORT__
, 
__b•_LED6_DDR__
, 
__b•_LED6_IS_ACTIVE_LOW__
 )

	)

190 
	#__b•_LED6_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED6_BIT__
, 
__b•_LED6_PORT__
, 
__b•_LED6_DDR__
, 
__b•_LED6_IS_ACTIVE_LOW__
 )

	)

191 
	#__b•_LED6_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED6_BIT__
, 
__b•_LED6_PORT__
, 
__b•_LED6_DDR__
, 
__b•_LED6_IS_ACTIVE_LOW__
 )

	)

192 
	#__b•_LED6_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED6_BIT__
, 
__b•_LED6_PORT__
, 
__b•_LED6_DDR__
, 
__b•_LED6_IS_ACTIVE_LOW__
 )

	)

193 #ñi‡(
__b•_NUM_LED6_DEFINES__
 == 0)

194 
	#__b•_LED6_TURN_ON__
(Ë

	)

195 
	#__b•_LED6_TURN_OFF__
(Ë

	)

196 
	#__b•_LED6_TOGGLE__
(Ë

	)

197 
	#__b•_LED6_IS_ON__
(Ë 0

	)

198 
	#__b•_LED6_CONFIG__
(Ë

	)

204 
	#__b•_NUM_LED7_DEFINES__
 ((
deföed
 
__b•_LED7_BIT__
Ë+ \

	)

205 (
deföed
 
__b•_LED7_PORT__
) + \

206 (
deföed
 
__b•_LED7_DDR__
) + \

207 (
deföed
 
__b•_LED7_IS_ACTIVE_LOW__
))

208 #i‡(
__b•_NUM_LED7_DEFINES__
 == 4)

209 
	#__b•_LED7_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED7_BIT__
, 
__b•_LED7_PORT__
, 
__b•_LED7_DDR__
, 
__b•_LED7_IS_ACTIVE_LOW__
 )

	)

210 
	#__b•_LED7_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED7_BIT__
, 
__b•_LED7_PORT__
, 
__b•_LED7_DDR__
, 
__b•_LED7_IS_ACTIVE_LOW__
 )

	)

211 
	#__b•_LED7_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED7_BIT__
, 
__b•_LED7_PORT__
, 
__b•_LED7_DDR__
, 
__b•_LED7_IS_ACTIVE_LOW__
 )

	)

212 
	#__b•_LED7_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED7_BIT__
, 
__b•_LED7_PORT__
, 
__b•_LED7_DDR__
, 
__b•_LED7_IS_ACTIVE_LOW__
 )

	)

213 
	#__b•_LED7_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED7_BIT__
, 
__b•_LED7_PORT__
, 
__b•_LED7_DDR__
, 
__b•_LED7_IS_ACTIVE_LOW__
 )

	)

214 #ñi‡(
__b•_NUM_LED7_DEFINES__
 == 0)

215 
	#__b•_LED7_TURN_ON__
(Ë

	)

216 
	#__b•_LED7_TURN_OFF__
(Ë

	)

217 
	#__b•_LED7_TOGGLE__
(Ë

	)

218 
	#__b•_LED7_IS_ON__
(Ë 0

	)

219 
	#__b•_LED7_CONFIG__
(Ë

	)

225 
	#__b•_NUM_LED8_DEFINES__
 ((
deföed
 
__b•_LED8_BIT__
Ë+ \

	)

226 (
deföed
 
__b•_LED8_PORT__
) + \

227 (
deföed
 
__b•_LED8_DDR__
) + \

228 (
deföed
 
__b•_LED8_IS_ACTIVE_LOW__
))

229 #i‡(
__b•_NUM_LED8_DEFINES__
 == 4)

230 
	#__b•_LED8_TURN_ON__
(Ë
	`__b•_LED_TURN_ON__
 ( 
__b•_LED8_BIT__
, 
__b•_LED8_PORT__
, 
__b•_LED8_DDR__
, 
__b•_LED8_IS_ACTIVE_LOW__
 )

	)

231 
	#__b•_LED8_TURN_OFF__
(Ë
	`__b•_LED_TURN_OFF__
–
__b•_LED8_BIT__
, 
__b•_LED8_PORT__
, 
__b•_LED8_DDR__
, 
__b•_LED8_IS_ACTIVE_LOW__
 )

	)

232 
	#__b•_LED8_TOGGLE__
(Ë
	`__b•_LED_TOGGLE__
 ( 
__b•_LED8_BIT__
, 
__b•_LED8_PORT__
, 
__b•_LED8_DDR__
, 
__b•_LED8_IS_ACTIVE_LOW__
 )

	)

233 
	#__b•_LED8_IS_ON__
(Ë
	`__b•_LED_IS_ON__
 ( 
__b•_LED8_BIT__
, 
__b•_LED8_PORT__
, 
__b•_LED8_DDR__
, 
__b•_LED8_IS_ACTIVE_LOW__
 )

	)

234 
	#__b•_LED8_CONFIG__
(Ë
	`__b•_LED_CONFIG__
 ( 
__b•_LED8_BIT__
, 
__b•_LED8_PORT__
, 
__b•_LED8_DDR__
, 
__b•_LED8_IS_ACTIVE_LOW__
 )

	)

235 #ñi‡(
__b•_NUM_LED8_DEFINES__
 == 0)

236 
	#__b•_LED8_TURN_ON__
(Ë

	)

237 
	#__b•_LED8_TURN_OFF__
(Ë

	)

238 
	#__b•_LED8_TOGGLE__
(Ë

	)

239 
	#__b•_LED8_IS_ON__
(Ë 0

	)

240 
	#__b•_LED8_CONFIG__
(Ë

	)

252 #i‚de‡
__b•_NUM_LEDS__


255 #i‡((
__b•_NUM_LEDS__
 > 8) || (__bsp_NUM_LEDS__ < 0))

260 #i‡(((
__b•_NUM_LED1_DEFINES__
 != 0) + \

261 (
__b•_NUM_LED2_DEFINES__
 != 0) + \

262 (
__b•_NUM_LED3_DEFINES__
 != 0) + \

263 (
__b•_NUM_LED4_DEFINES__
 != 0) + \

264 (
__b•_NUM_LED5_DEFINES__
 != 0) + \

265 (
__b•_NUM_LED6_DEFINES__
 != 0) + \

266 (
__b•_NUM_LED7_DEFINES__
 != 0) + \

267 (
__b•_NUM_LED8_DEFINES__
 !0)Ë!
__b•_NUM_LEDS__
)

272 #i‚de‡
__b•_LED_BLINK_LOOP_COUNT__


	@platform/cc430/bsp/bsp_led_defs.h

39 #i‚de‡
BSP_LED_DEFS_H


40 
	#BSP_LED_DEFS_H


	)

47 
	~"b•_bﬂrd_defs.h
"

54 
	#__b•_NUM_LEDS__
 2

	)

55 
	#__b•_LED_BLINK_LOOP_COUNT__
 0x34000

	)

67 
	#__b•_LED1_BIT__
 0

	)

68 
	#__b•_LED1_PORT__
 
P1OUT


	)

69 
	#__b•_LED1_DDR__
 
P1DIR


	)

70 
	#__b•_LED1_IS_ACTIVE_LOW__
 0

	)

82 
	#__b•_LED2_BIT__
 6

	)

83 
	#__b•_LED2_PORT__
 
P3OUT


	)

84 
	#__b•_LED2_DDR__
 
P3DIR


	)

85 
	#__b•_LED2_IS_ACTIVE_LOW__
 0

	)

92 
	~"b•_gíîic_Àds.h
"

	@platform/cc430/bsp/bsp_leds.c

42 
	~"b•_Àds.h
"

43 
	~"b•_Àd_defs.h
"

50 
	#BSP_CONFIG_LED1
(Ë
	`__b•_LED1_CONFIG__
()

	)

51 
	#BSP_CONFIG_LED2
(Ë
	`__b•_LED2_CONFIG__
()

	)

52 
	#BSP_CONFIG_LED3
(Ë
	`__b•_LED3_CONFIG__
()

	)

53 
	#BSP_CONFIG_LED4
(Ë
	`__b•_LED4_CONFIG__
()

	)

54 
	#BSP_CONFIG_LED5
(Ë
	`__b•_LED5_CONFIG__
()

	)

55 
	#BSP_CONFIG_LED6
(Ë
	`__b•_LED6_CONFIG__
()

	)

56 
	#BSP_CONFIG_LED7
(Ë
	`__b•_LED7_CONFIG__
()

	)

57 
	#BSP_CONFIG_LED8
(Ë
	`__b•_LED8_CONFIG__
()

	)

59 #ifde‡
__b•_LED_EXTENDED_CONFIG__


60 
	#BSP_LED_EXTENDED_CONFIG
(Ë
	`__b•_LED_EXTENDED_CONFIG__
()

	)

62 
	#BSP_LED_EXTENDED_CONFIG
()

	)

76 
	$BSP_InôLeds
()

79 
	`BSP_CONFIG_LED1
();

80 
	`BSP_CONFIG_LED2
();

81 
	`BSP_CONFIG_LED3
();

82 
	`BSP_CONFIG_LED4
();

83 
	`BSP_CONFIG_LED5
();

84 
	`BSP_CONFIG_LED6
();

85 
	`BSP_CONFIG_LED7
();

86 
	`BSP_CONFIG_LED8
();

89 
	`BSP_LED_EXTENDED_CONFIG
();

92 
	`BSP_TURN_OFF_LED1
();

93 
	`BSP_TURN_OFF_LED2
();

94 
	`BSP_TURN_OFF_LED3
();

95 
	`BSP_TURN_OFF_LED4
();

96 
	`BSP_TURN_OFF_LED5
();

97 
	`BSP_TURN_OFF_LED6
();

98 
	`BSP_TURN_OFF_LED7
();

99 
	`BSP_TURN_OFF_LED8
();

100 
	}
}

	@platform/cc430/bsp/bsp_leds.h

38 #i‚de‡
BSP_LEDS_H


39 
	#BSP_LEDS_H


	)

46 
	~"b•_Àd_defs.h
"

47 
	~"b•_ma¸os.h
"

54 
	#BSP_NUM_LEDS
 
__b•_NUM_LEDS__


	)

63 
	#BSP_LED_BLINK_DELAY
(Ë
	`°
–{ vﬁ©ûê
uöt32_t
 
i
; \

	)

64 
	gi
=0; i<
	g__b•_LED_BLINK_LOOP_COUNT__
; i++) { }; } )

67 
	#BSP_TURN_ON_LED1
(Ë
	`__b•_LED1_TURN_ON__
()

	)

68 
	#BSP_TURN_OFF_LED1
(Ë
	`__b•_LED1_TURN_OFF__
()

	)

69 
	#BSP_TOGGLE_LED1
(Ë
	`__b•_LED1_TOGGLE__
()

	)

70 
	#BSP_LED1_IS_ON
(Ë
	`__b•_LED1_IS_ON__
()

	)

73 
	#BSP_TURN_ON_LED2
(Ë
	`__b•_LED2_TURN_ON__
()

	)

74 
	#BSP_TURN_OFF_LED2
(Ë
	`__b•_LED2_TURN_OFF__
()

	)

75 
	#BSP_TOGGLE_LED2
(Ë
	`__b•_LED2_TOGGLE__
()

	)

76 
	#BSP_LED2_IS_ON
(Ë
	`__b•_LED2_IS_ON__
()

	)

79 
	#BSP_TURN_ON_LED3
(Ë
	`__b•_LED3_TURN_ON__
()

	)

80 
	#BSP_TURN_OFF_LED3
(Ë
	`__b•_LED3_TURN_OFF__
()

	)

81 
	#BSP_TOGGLE_LED3
(Ë
	`__b•_LED3_TOGGLE__
()

	)

82 
	#BSP_LED3_IS_ON
(Ë
	`__b•_LED3_IS_ON__
()

	)

85 
	#BSP_TURN_ON_LED4
(Ë
	`__b•_LED4_TURN_ON__
()

	)

86 
	#BSP_TURN_OFF_LED4
(Ë
	`__b•_LED4_TURN_OFF__
()

	)

87 
	#BSP_TOGGLE_LED4
(Ë
	`__b•_LED4_TOGGLE__
()

	)

88 
	#BSP_LED4_IS_ON
(Ë
	`__b•_LED4_IS_ON__
()

	)

91 
	#BSP_TURN_ON_LED5
(Ë
	`__b•_LED5_TURN_ON__
()

	)

92 
	#BSP_TURN_OFF_LED5
(Ë
	`__b•_LED5_TURN_OFF__
()

	)

93 
	#BSP_TOGGLE_LED5
(Ë
	`__b•_LED5_TOGGLE__
()

	)

94 
	#BSP_LED5_IS_ON
(Ë
	`__b•_LED5_IS_ON__
()

	)

97 
	#BSP_TURN_ON_LED6
(Ë
	`__b•_LED6_TURN_ON__
()

	)

98 
	#BSP_TURN_OFF_LED6
(Ë
	`__b•_LED6_TURN_OFF__
()

	)

99 
	#BSP_TOGGLE_LED6
(Ë
	`__b•_LED6_TOGGLE__
()

	)

100 
	#BSP_LED6_IS_ON
(Ë
	`__b•_LED6_IS_ON__
()

	)

103 
	#BSP_TURN_ON_LED7
(Ë
	`__b•_LED7_TURN_ON__
()

	)

104 
	#BSP_TURN_OFF_LED7
(Ë
	`__b•_LED7_TURN_OFF__
()

	)

105 
	#BSP_TOGGLE_LED7
(Ë
	`__b•_LED7_TOGGLE__
()

	)

106 
	#BSP_LED7_IS_ON
(Ë
	`__b•_LED7_IS_ON__
()

	)

109 
	#BSP_TURN_ON_LED8
(Ë
	`__b•_LED8_TURN_ON__
()

	)

110 
	#BSP_TURN_OFF_LED8
(Ë
	`__b•_LED8_TURN_OFF__
()

	)

111 
	#BSP_TOGGLE_LED8
(Ë
	`__b•_LED8_TOGGLE__
()

	)

112 
	#BSP_LED8_IS_ON
(Ë
	`__b•_LED8_IS_ON__
()

	)

119 
BSP_InôLeds
();

127 #ifde‡
BSP_NO_LEDS


	@platform/cc430/bsp/bsp_macros.h

38 #i‚de‡
BSP_MACROS_H


39 
	#BSP_MACROS_H


	)

47 #i‚de‡
BV


48 
	#BV
(
n
Ë(1 << (n))

	)

74 
	#°
(
x
Ëdÿ{ x } 
__LINE__
 =-1)

	)

	@platform/cc430/bsp/bsp_msp430_defs.h

40 #i‚de‡
BSP_MSP430_DEFS_H


41 
	#BSP_MSP430_DEFS_H


	)

47 
	#BSP_MCU_MSP430


	)

55 #ifde‡
__IAR_SYSTEMS_ICC__


56 
	#BSP_COMPILER_IAR


	)

58 #i‡(
__VER__
 < 342)

68 #i‡((
__VER__
 =342Ë&& (
__SUBVERSION__
 == 'A')) && \

69 (
deföed
 (
__MSP430F1610__
Ë|| deföed (
__MSP430F1611__
Ë|| 
	$deföed
 (
__MSP430F1612__
))

70 
	~<m•430x16x.h
>

72 
	~<m•430.h
>

75 
	#__b•_ISTATE_T__
 
i°©e_t


	)

76 
	#__b•_ISR_FUNCTION__
(
f
,
v
Ë
	`__b•_QUOTED_PRAGMA__
(
ve˘‹
=vË
__öãºu±
 
	`f
(); \

	)

77 
	$__b•_QUOTED_PRAGMA__
(
ve˘‹
=
v
Ë
__öãºu±
 
	$f
()

80 
	~<öåösics.h
>

81 
	#BSP_EARLY_INIT
(Ë
__öåösic
 
	`__low_Àvñ_öô
()

	)

84 #ñi‡(
deföed
 
__TI_COMPILER_VERSION__
Ë&& (deföed 
__MSP430__
)

85 
	#BSP_COMPILER_CODE_COMPOSER


	)

88 #i‡(
__CC430F6137__
)

89 
	~<cc430x613x.h
>

91 
	~<m•430.h
>

94 
	#__b•_ISTATE_T__
 

	)

95 
	#__b•_ISR_FUNCTION__
(
f
,
v
Ë
	`__b•_QUOTED_PRAGMA__
(
ve˘‹
=vË
__öãºu±
 
	`f
()

	)

98 
	#BSP_EARLY_INIT
(Ë
	`_sy°em_¥e_öô
()

	)

105 #i‡(
deföed
 
BSP_COMPILER_IAR
Ë|| (deföed 
BSP_COMPILER_CODE_COMPOSER
)

106 
	~<öåösics.h
>

107 
	#__b•_ENABLE_INTERRUPTS__
(Ë
	`__íabÀ_öãºu±
()

	)

108 
	#__b•_DISABLE_INTERRUPTS__
(Ë
	`__dißbÀ_öãºu±
()

	)

109 
	#__b•_INTERRUPTS_ARE_ENABLED__
(Ë(
	`__gë_SR_ªgi°î
(Ë& 
GIE
)

	)

111 
	#__b•_GET_ISTATE__
(Ë
	`__gë_öãºu±_°©e
()

	)

112 
	#__b•_RESTORE_ISTATE__
(
x
Ë
	`__£t_öãºu±_°©e
(x)

	)

114 
	#__b•_QUOTED_PRAGMA__
(
x
Ë
	`_Pøgma
(#x)

	)

122 
	#__b•_LITTLE_ENDIAN__
 1

	)

123 
	#__b•_CODE_MEMSPACE__


	)

124 
	#__b•_XDATA_MEMSPACE__


	)

127 sig√d 
	töt8_t
;

128 sig√d 
	töt16_t
;

129 sig√d 
	töt32_t
;

131 
	tuöt8_t
;

132 
	tuöt16_t
;

133 
	tuöt32_t
;

136 #i‚de‡
NULL


137 
	#NULL
 0

	)

	@platform/cc430/bsp/bsp_uart.c

42 
	~"b•_buâ⁄s.h
"

43 
	~"b•_buâ⁄_defs.h
"

50 
	#BSP_CONFIG_BUTTON1
(Ë
	`__b•_BUTTON1_CONFIG__
()

	)

51 
	#BSP_CONFIG_BUTTON2
(Ë
	`__b•_BUTTON2_CONFIG__
()

	)

52 
	#BSP_CONFIG_BUTTON3
(Ë
	`__b•_BUTTON3_CONFIG__
()

	)

53 
	#BSP_CONFIG_BUTTON4
(Ë
	`__b•_BUTTON4_CONFIG__
()

	)

54 
	#BSP_CONFIG_BUTTON5
(Ë
	`__b•_BUTTON5_CONFIG__
()

	)

55 
	#BSP_CONFIG_BUTTON6
(Ë
	`__b•_BUTTON6_CONFIG__
()

	)

56 
	#BSP_CONFIG_BUTTON7
(Ë
	`__b•_BUTTON7_CONFIG__
()

	)

57 
	#BSP_CONFIG_BUTTON8
(Ë
	`__b•_BUTTON8_CONFIG__
()

	)

59 #ifde‡
__b•_BUTTON_EXTENDED_CONFIG__


60 
	#BSP_BUTTON_EXTENDED_CONFIG
(Ë
	`__b•_BUTTON_EXTENDED_CONFIG__
()

	)

62 
	#BSP_BUTTON_EXTENDED_CONFIG
()

	)

76 
	$BSP_InôUART
()

79 
	`BSP_CONFIG_BUTTON1
();

80 
	`BSP_CONFIG_BUTTON2
();

81 
	`BSP_CONFIG_BUTTON3
();

82 
	`BSP_CONFIG_BUTTON4
();

83 
	`BSP_CONFIG_BUTTON5
();

84 
	`BSP_CONFIG_BUTTON6
();

85 
	`BSP_CONFIG_BUTTON7
();

86 
	`BSP_CONFIG_BUTTON8
();

89 
	`BSP_BUTTON_EXTENDED_CONFIG
();

90 
	}
}

	@platform/cc430/bsp/bsp_uart.h

	@platform/cc430/bsp/bsp_uart_defs.h

	@platform/cc430/bsp/mrfi_board_defs.h

40 #i‚de‡
MRFI_BOARD_DEFS_H


41 
	#MRFI_BOARD_DEFS_H


	)

47 
	~"b•.h
"

59 #i‡(!
deföed
 
MRFI_CC430
)

65 
b•ISèã_t
 
	tmrfiRIFISèã_t
;

66 
	#MRFI_RIF_ENTER_CRITICAL_SECTION
(
x
Ë
	`BSP_ENTER_CRITICAL_SECTION
(x)

	)

67 
	#MRFI_RIF_EXIT_CRITICAL_SECTION
(
x
Ë
	`BSP_EXIT_CRITICAL_SECTION
(x)

	)

74 #i‚de‡
BSP_BOARD_CC430EM


	@platform/cc430/contiki-conf.h

1 
	#UIP_CONF_LL_802154
 1

	)

2 
	#UIP_CONF_LLH_LEN
 0

	)

6 
	#RIMEADDR_CONF_SIZE
 8

	)

8 #i‚de‡
NETSTACK_CONF_MAC


9 
	#NETSTACK_CONF_MAC
 
nuŒmac_802154_drivî


	)

12 #i‚de‡
NETSTACK_CONF_RDC


13 
	#NETSTACK_CONF_RDC
 
sic¶owmac_drivî


	)

16 #i‚de‡
NETSTACK_CONF_RADIO


17 
	#NETSTACK_CONF_RADIO
 
cc430Radio_drivî


	)

20 #i‚de‡
NETSTACK_CONF_FRAMER


21 
	#NETSTACK_CONF_FRAMER
 
‰amî_802154


	)

24 
	#NETSTACK_CONF_NETWORK
 
sic¶ow∑n_drivî


	)

26 
	#UIP_CONF_ROUTER
 0

	)

29 
	#MODE_PING_TEST
 1

	)

30 
	#MODE_TX
 0

	)

31 
	#MODE_RX
 0

	)

35 #i‚de‡
UIP_CONF_IPV6_RPL


36 
	#UIP_CONF_IPV6_RPL
 1

	)

40 
	#SICSLOWPAN_CONF_COMPRESSION_IPV6
 0

	)

41 
	#SICSLOWPAN_CONF_COMPRESSION_HC1
 1

	)

42 
	#SICSLOWPAN_CONF_COMPRESSION_HC01
 2

	)

43 
	#SICSLOWPAN_CONF_COMPRESSION
 
SICSLOWPAN_COMPRESSION_HC06


	)

44 #i‚de‡
SICSLOWPAN_CONF_FRAG


45 
	#SICSLOWPAN_CONF_FRAG
 0

	)

46 
	#SICSLOWPAN_CONF_MAXAGE
 8

	)

49 
	#SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS
 1

	)

51 
	#SICSLOWPAN_CONF_ADDR_CONTEXT_0
 { \

	)

52 
	gaddr_c⁄ãxts
[0].
	g¥efix
[0] = 0x20; \

53 
	gaddr_c⁄ãxts
[0].
	g¥efix
[1] = 0x01; \

54 
	gaddr_c⁄ãxts
[0].
	g¥efix
[2] = 0x06; \

55 
	gaddr_c⁄ãxts
[0].
	g¥efix
[3] = 0x30; \

56 
	gaddr_c⁄ãxts
[0].
	g¥efix
[4] = 0x03; \

57 
	gaddr_c⁄ãxts
[0].
	g¥efix
[5] = 0x01; \

58 
	gaddr_c⁄ãxts
[0].
	g¥efix
[6] = 0x64; \

59 
	gaddr_c⁄ãxts
[0].
	g¥efix
[7] = 0x53; \

62 #i‚de‡
SICSLOWPAN_CONF_MAX_MAC_TRANSMISSIONS


63 
	#SICSLOWPAN_CONF_MAX_MAC_TRANSMISSIONS
 3

	)

67 
	#UIP_CONF_IPV6_CHECKS
 1

	)

68 
	#UIP_CONF_IPV6_QUEUE_PKT
 0

	)

69 
	#UIP_CONF_IPV6_REASSEMBLY
 0

	)

70 
	#UIP_CONF_NETIF_MAX_ADDRESSES
 3

	)

71 
	#UIP_CONF_ND6_MAX_PREFIXES
 3

	)

72 
	#UIP_CONF_ND6_MAX_NEIGHBORS
 2

	)

73 
	#UIP_CONF_ND6_MAX_DEFROUTERS
 1

	)

74 
	#UIP_CONF_ICMP6
 1

	)

78 
	#UIP_CONF_DS6_NBR_NBU
 30

	)

81 
	#UIP_CONF_DS6_ROUTE_NBU
 30

	)

84 
	#UIP_CONF_ND6_SEND_RA
 0

	)

85 
	#UIP_CONF_ND6_REACHABLE_TIME
 600000

	)

86 
	#UIP_CONF_ND6_RETRANS_TIMER
 10000

	)

88 
	#UIP_CONF_IP_FORWARD
 0

	)

89 #i‚de‡
UIP_CONF_BUFFER_SIZE


90 
	#UIP_CONF_BUFFER_SIZE
 240

	)

94 
	#UIP_CONF_LLH_LEN
 0

	)

95 
	#UIP_CONF_LL_802154
 1

	)

97 
	#UIP_CONF_ICMP_DEST_UNREACH
 1

	)

99 
	#UIP_CONF_DHCP_LIGHT


	)

100 
	#UIP_CONF_RECEIVE_WINDOW
 48

	)

101 
	#UIP_CONF_TCP_MSS
 48

	)

102 
	#UIP_CONF_UDP_CONNS
 12

	)

103 
	#UIP_CONF_FWCACHE_SIZE
 30

	)

104 
	#UIP_CONF_BROADCAST
 1

	)

105 
	#UIP_ARCH_IPCHKSUM
 1

	)

106 
	#UIP_CONF_UDP
 1

	)

107 
	#UIP_CONF_UDP_CHECKSUMS
 1

	)

108 
	#UIP_CONF_PINGADDRCONF
 0

	)

109 
	#UIP_CONF_LOGGING
 0

	)

	@platform/cc430/radio/mrfi.c

42 
	~"mrfi_defs.h
"

51 #i‡(
deföed
 
MRFI_RADIO_FAMILY1
)

52 
	~"ødios/Ámûy1/mrfi_ødio.c
"

53 
	~"ødios/Ámûy1/mrfi_•i.c
"

54 
	~"ødios/comm⁄/mrfi_f1f2.c
"

55 
	~"b•_exã∫Æ/mrfi_bﬂrd.c
"

58 #ñi‡(
deföed
 
MRFI_RADIO_FAMILY2
)

59 
	~"ødios/Ámûy2/mrfi_ødio.c
"

60 
	~"ødios/comm⁄/mrfi_f1f2.c
"

63 #ñi‡(
deföed
 
MRFI_RADIO_FAMILY3
)

64 
	~"b•_exã∫Æ/mrfi_bﬂrd.c
"

65 
	~"ødios/Ámûy3/mrfi_•i.c
"

66 
	~"ødios/Ámûy3/mrfi_ødio.c
"

69 #ñi‡(
deföed
 
MRFI_RADIO_FAMILY4
)

70 
	~"ødios/Ámûy4/mrfi_ødio.c
"

73 #ñi‡(
deföed
 
MRFI_RADIO_FAMILY5
)

74 
	~"mrfi_ødio.c
"

75 
	~"mrfi_ødio_öãrÁ˚.c
"

78 #ñi‡(
deföed
 
MRFI_RADIO_FAMILY6
)

79 
	~"ødios/Ámûy6/mrfi_ødio.c
"

	@platform/cc430/radio/mrfi.h

38 #i‚de‡
MRFI_H


39 
	#MRFI_H


	)

46 
	~"b•.h
"

47 
	~"mrfi_defs.h
"

48 
	~"°döt.h
"

55 
	#MRFI_NUM_LOGICAL_CHANS
 
__mrfi_NUM_LOGICAL_CHANS__


	)

57 
	#MRFI_NUM_POWER_SETTINGS
 
__mrfi_NUM_POWER_SETTINGS__


	)

60 
	#MRFI_TX_RESULT_SUCCESS
 0

	)

61 
	#MRFI_TX_RESULT_FAILED
 1

	)

64 
	#MRFI_TX_TYPE_FORCED
 0

	)

65 
	#MRFI_TX_TYPE_CCA
 1

	)

77 #i‚de‡
SMPL_SECURE


78 
	#NWK_HDR_SIZE
 3

	)

79 
	#NWK_PAYLOAD
 
MAX_NWK_PAYLOAD


	)

81 
	#NWK_HDR_SIZE
 6

	)

82 
	#NWK_PAYLOAD
 (
MAX_NWK_PAYLOAD
+4)

	)

86 #ifde‡
MAX_APP_PAYLOAD


87 #i‚de‡
MAX_NWK_PAYLOAD


88 #îr‹ 
ERROR
: 
MAX_NWK_PAYLOAD
 
nŸ
 
deföed


90 #i‡
MAX_APP_PAYLOAD
 < 
NWK_PAYLOAD


91 
	#MAX_PAYLOAD
 
NWK_PAYLOAD


	)

93 
	#MAX_PAYLOAD
 
MAX_APP_PAYLOAD


	)

95 
	#MRFI_MAX_PAYLOAD_SIZE
 (
MAX_PAYLOAD
+
NWK_HDR_SIZE
Ë

	)

100 
	#MRFI_ADDR_SIZE
 
__mrfi_ADDR_SIZE__


	)

101 #i‚de‡
MRFI_MAX_PAYLOAD_SIZE


102 
	#MRFI_MAX_PAYLOAD_SIZE
 
__mrfi_MAX_PAYLOAD_SIZE__


	)

106 
	#MRFI_MAX_FRAME_SIZE
 (
MRFI_MAX_PAYLOAD_SIZE
 + 
__mrfi_FRAME_OVERHEAD_SIZE__
)

	)

109 
	#MAX_802154_PKT_SIZE
 127

	)

110 
	#MRFI_MAX_FRAME_SIZE
 (
MAX_802154_PKT_SIZE
 + 
__mrfi_LENGTH_FIELD_SIZE__
)

	)

111 
	#MRFI_MAX_FCF_LENGTH
 
__mrfi_FCF_SIZE__


	)

112 
	#MRFI_DSN_SIZE
 
__mrfi_DSN_SIZE__


	)

115 
	#MRFI_RX_METRICS_SIZE
 
__mrfi_RX_METRICS_SIZE__


	)

116 
	#MRFI_RX_METRICS_RSSI_OFS
 
__mrfi_RX_METRICS_RSSI_OFS__


	)

117 
	#MRFI_RX_METRICS_CRC_LQI_OFS
 
__mrfi_RX_METRICS_CRC_LQI_OFS__


	)

120 
	#MRFI_RADIO_STATE_UNKNOWN
 0

	)

121 
	#MRFI_RADIO_STATE_OFF
 1

	)

122 
	#MRFI_RADIO_STATE_IDLE
 2

	)

123 
	#MRFI_RADIO_STATE_RX
 3

	)

125 
	#MAX_HOPS
 4

	)

136 
	#PLATFORM_FACTOR_CONSTANT
 (2 + 2*(
MAX_HOPS
*(
MRFI_CCA_RETRIES
*(8*
MRFI_BACKOFF_PERIOD_USECS
)/1000)))

	)

143 
	#MRFI_GET_PAYLOAD_LEN
(
p
Ë
	`__mrfi_GET_PAYLOAD_LEN__
’)

	)

144 
	#MRFI_SET_PAYLOAD_LEN
(
p
,
x
Ë
	`__mrfi_SET_PAYLOAD_LEN__
’,x)

	)

146 
	#MRFI_P_DST_ADDR
(
p
Ë
	`__mrfi_P_DST_ADDR__
’)

	)

147 
	#MRFI_P_SRC_ADDR
(
p
Ë
	`__mrfi_P_SRC_ADDR__
’)

	)

148 
	#MRFI_P_PAYLOAD
(
p
Ë
	`__mrfi_P_PAYLOAD__
’)

	)

156 
uöt8_t
 
	m‰ame
[
MRFI_MAX_FRAME_SIZE
];

157 
uöt8_t
 
	mrxMërics
[
MRFI_RX_METRICS_SIZE
];

158 } 
	tmrfiPackë_t
;

165 
MRFI_Inô
();

166 
MRFI_Pª∑ª
(const *, );

167 
MRFI_√wTønsmô
();

168 
MRFI_£nd
(const *, );

169 
MRFI_ªad
(*, );

170 
MRFI_cˇ
();

171 
MRFI_isRecvPkt
();

172 
MRFI_isPktPíd
();

173 
uöt8_t
 
MRFI_Tønsmô
(
mrfiPackë_t
 *, uint8_t);

174 
MRFI_Re˚ive
(
mrfiPackë_t
 *);

175 
MRFI_RxCom∂ëeISR
();

176 
uöt8_t
 
MRFI_GëRadioSèã
();

177 
MRFI_RxOn
();

178 
MRFI_RxIdÀ
();

179 
öt8_t
 
MRFI_Rssi
();

180 
MRFI_SëLogiˇlCh™√l
(
uöt8_t
);

181 
uöt8_t
 
MRFI_SëRxAddrFûãr
(uint8_t *);

182 
MRFI_E«bÀRxAddrFûãr
();

183 
MRFI_DißbÀRxAddrFûãr
();

184 
MRFI_SÀï
();

185 
MRFI_WakeUp
();

186 
uöt8_t
 
MRFI_R™domByã
();

187 
MRFI_DñayMs
(
uöt16_t
);

188 
MRFI_RïlyDñay
();

189 
MRFI_Po°KûlSem
();

190 
MRFI_SëRFPwr
(
uöt8_t
);

196 c⁄° 
uöt8_t
 
mrfiBrﬂdˇ°Addr
[];

197 
uöt8_t
 
mrfiPktRe˚iveFœg
;

198 
uöt8_t
 
mrfi_pkt_tx_≥nd
;

	@platform/cc430/radio/mrfi_defs.h

37 #i‚de‡
MRFI_DEFS_H


38 
	#MRFI_DEFS_H


	)

45 
	~"b•.h
"

47 
	#MRFI_CC430


	)

53 
	#MRFI_CCA_RETRIES
 4

	)

55 
	#MRFI_ASSERT
(
x
Ë
	`BSP_ASSERT
(x)

	)

56 
	#MRFI_FORCE_ASSERT
(Ë
	`BSP_FORCE_ASSERT
()

	)

57 
	#MRFI_ASSERTS_ARE_ON
 
BSP_ASSERTS_ARE_ON


	)

66 #i‡(
deföed
 
MRFI_CC1100
) || \

67 (
deföed
 
	gMRFI_CC1101
) || \

68 (
deföed
 
	gMRFI_CC1100E_470
) || \

69 (
deföed
 
	gMRFI_CC1100E_950
) || \

70 (
deföed
 
	gMRFI_CC2500
)

71 
	#MRFI_RADIO_FAMILY1


	)

74 #ñi‡(
deföed
 
MRFI_CC1110
) || \

75 (
deföed
 
	gMRFI_CC1111
) || \

76 (
deföed
 
	gMRFI_CC2510
) || \

77 (
deföed
 
	gMRFI_CC2511
)

78 
	#MRFI_RADIO_FAMILY2


	)

81 #ñi‡(
deföed
 
MRFI_CC2420
) || \

82 (
deföed
 
	gMRFI_CC2520
)

84 
	#MRFI_RADIO_FAMILY3


	)

87 #ñi‡(
deföed
 
MRFI_CC2430
) || \

88 (
deföed
 
	gMRFI_CC2431
)

89 
	#MRFI_RADIO_FAMILY4


	)

92 #ñi‡(
deföed
 
MRFI_CC430
)

93 
	#MRFI_RADIO_FAMILY5


	)

96 #ñi‡(
deföed
 
MRFI_CC2530
)

98 
	#MRFI_RADIO_FAMILY6


	)

109 #i‡(
deföed
 
MRFI_RADIO_FAMILY1
Ë|| (deföed 
MRFI_RADIO_FAMILY2
Ë|| (deföed 
MRFI_RADIO_FAMILY5
)

111 
	#__mrfi_LENGTH_FIELD_SIZE__
 1

	)

114 
	#__mrfi_FCF_SIZE__
 2

	)

115 
	#__mrfi_DSN_SIZE__
 1

	)

116 
	#__mrfi_ADDR_SIZE__
 4

	)

118 
	#__mrfi_MAC_MAX_ADDR_FIELD_LENGTH__
 20

	)

121 
	#__mrfi_ADDR_SIZE__
 4

	)

122 
	#__mrfi_MAX_PAYLOAD_SIZE__
 20

	)

124 
	#__mrfi_RX_METRICS_SIZE__
 2

	)

125 
	#__mrfi_RX_METRICS_RSSI_OFS__
 0

	)

126 
	#__mrfi_RX_METRICS_CRC_LQI_OFS__
 1

	)

127 
	#__mrfi_RX_METRICS_CRC_OK_MASK__
 0x80

	)

128 
	#__mrfi_RX_METRICS_LQI_MASK__
 0x7F

	)

130 
	#__mrfi_NUM_LOGICAL_CHANS__
 4

	)

131 
	#__mrfi_NUM_POWER_SETTINGS__
 3

	)

133 
	#__mrfi_BACKOFF_PERIOD_USECS__
 250

	)

135 
	#__mrfi_LENGTH_FIELD_OFS__
 0

	)

136 
	#__mrfi_DST_ADDR_OFS__
 (
__mrfi_LENGTH_FIELD_OFS__
 + 
__mrfi_LENGTH_FIELD_SIZE__
)

	)

137 
	#__mrfi_SRC_ADDR_OFS__
 (
__mrfi_DST_ADDR_OFS__
 + 
__mrfi_ADDR_SIZE__
)

	)

138 
	#__mrfi_PAYLOAD_OFS__
 (
__mrfi_SRC_ADDR_OFS__
 + 
__mrfi_ADDR_SIZE__
)

	)

140 
	#__mrfi_HEADER_SIZE__
 (2 * 
__mrfi_ADDR_SIZE__
)

	)

141 
	#__mrfi_FRAME_OVERHEAD_SIZE__
 (
__mrfi_LENGTH_FIELD_SIZE__
 + 
__mrfi_HEADER_SIZE__
)

	)

143 
	#__mrfi_GET_PAYLOAD_LEN__
(
p
Ë(’)->
‰ame
[
__mrfi_LENGTH_FIELD_OFS__
] - 
__mrfi_HEADER_SIZE__
)

	)

144 
	#__mrfi_SET_PAYLOAD_LEN__
(
p
,
x
Ë
	`°
–’)->
‰ame
[
__mrfi_LENGTH_FIELD_OFS__
] = x + 
__mrfi_HEADER_SIZE__
; )

	)

153 #i‡(
deföed
 
MRFI_RADIO_FAMILY3
Ë|| (deföed 
MRFI_RADIO_FAMILY4
Ë|| (deföed 
MRFI_RADIO_FAMILY6
)

155 
	#__mrfi_LENGTH_FIELD_SIZE__
 1

	)

156 
	#__mrfi_FCF_SIZE__
 2

	)

157 
	#__mrfi_DSN_SIZE__
 1

	)

158 
	#__mrfi_ADDR_SIZE__
 4

	)

159 
	#__mrfi_MAX_PAYLOAD_SIZE__
 20

	)

161 
	#__mrfi_RX_METRICS_SIZE__
 2

	)

162 
	#__mrfi_RX_METRICS_RSSI_OFS__
 0

	)

163 
	#__mrfi_RX_METRICS_CRC_LQI_OFS__
 1

	)

164 
	#__mrfi_RX_METRICS_CRC_OK_MASK__
 0x80

	)

165 
	#__mrfi_RX_METRICS_LQI_MASK__
 0x7F

	)

167 
	#__mrfi_NUM_LOGICAL_CHANS__
 4

	)

168 
	#__mrfi_NUM_POWER_SETTINGS__
 3

	)

170 
	#__mrfi_BACKOFF_PERIOD_USECS__
 250

	)

172 
	#__mrfi_LENGTH_FIELD_OFS__
 0

	)

173 
	#__mrfi_FCF_OFS__
 (
__mrfi_LENGTH_FIELD_OFS__
 + 
__mrfi_LENGTH_FIELD_SIZE__
)

	)

174 
	#__mrfi_DSN_OFS__
 (
__mrfi_FCF_OFS__
 + 
__mrfi_FCF_SIZE__
)

	)

175 
	#__mrfi_DST_ADDR_OFS__
 (
__mrfi_DSN_OFS__
 + 
__mrfi_DSN_SIZE__
)

	)

176 
	#__mrfi_SRC_ADDR_OFS__
 (
__mrfi_DST_ADDR_OFS__
 + 
__mrfi_ADDR_SIZE__
)

	)

177 
	#__mrfi_PAYLOAD_OFS__
 (
__mrfi_SRC_ADDR_OFS__
 + 
__mrfi_ADDR_SIZE__
)

	)

179 
	#__mrfi_HEADER_SIZE__
 ((2 * 
__mrfi_ADDR_SIZE__
Ë+ 
__mrfi_FCF_SIZE__
 + 
__mrfi_DSN_SIZE__
)

	)

180 
	#__mrfi_FRAME_OVERHEAD_SIZE__
 (
__mrfi_LENGTH_FIELD_SIZE__
 + 
__mrfi_HEADER_SIZE__
)

	)

182 
	#__mrfi_GET_PAYLOAD_LEN__
(
p
Ë(’)->
‰ame
[
__mrfi_LENGTH_FIELD_OFS__
] - 
__mrfi_HEADER_SIZE__
)

	)

183 
	#__mrfi_SET_PAYLOAD_LEN__
(
p
,
x
Ë
	`°
–’)->
‰ame
[
__mrfi_LENGTH_FIELD_OFS__
] = x + 
__mrfi_HEADER_SIZE__
; )

	)

192 
	#__mrfi_P_DST_ADDR__
(
p
Ë(&(’)->
‰ame
[
__mrfi_DST_ADDR_OFS__
]))

	)

193 
	#__mrfi_P_SRC_ADDR__
(
p
Ë(&(’)->
‰ame
[
__mrfi_SRC_ADDR_OFS__
]))

	)

194 
	#__mrfi_P_PAYLOAD__
(
p
Ë(&(’)->
‰ame
[
__mrfi_PAYLOAD_OFS__
]))

	)

203 
	#MRFI_NUM_SUPPORTED_RADIOS_SELECTED
 ((
deföed
 
MRFI_CC1100
Ë+ \

	)

204 (
deföed
 
	gMRFI_CC1101
) + \

205 (
deföed
 
	gMRFI_CC1110
) + \

206 (
deföed
 
	gMRFI_CC1111
) + \

207 (
deföed
 
	gMRFI_CC1100E_470
) + \

208 (
deföed
 
	gMRFI_CC1100E_950
) + \

209 (
deföed
 
	gMRFI_CC2500
) + \

210 (
deföed
 
	gMRFI_CC2510
) + \

211 (
deföed
 
	gMRFI_CC2511
) + \

212 (
deföed
 
	gMRFI_CC2430
) + \

213 (
deföed
 
	gMRFI_CC2431
) + \

214 (
deföed
 
	gMRFI_CC2520
) + \

215 (
deföed
 
	gMRFI_CC430
) + \

216 (
deföed
 
	gMRFI_CC2530
))

217 #i‡(
MRFI_NUM_SUPPORTED_RADIOS_SELECTED
 == 0)

219 #ñi‡(
MRFI_NUM_SUPPORTED_RADIOS_SELECTED
 > 1)

224 #i‡(!
deföed
 
MRFI_RADIO_FAMILY1
) && \

225 (!
deföed
 
	gMRFI_RADIO_FAMILY2
) && \

226 (!
deföed
 
	gMRFI_RADIO_FAMILY3
) && \

227 (!
deföed
 
	gMRFI_RADIO_FAMILY4
) && \

228 (!
deföed
 
	gMRFI_RADIO_FAMILY5
) && \

229 (!
deföed
 
	gMRFI_RADIO_FAMILY6
)

	@platform/cc430/radio/mrfi_radio.c

43 
	~<°rög.h
>

44 
	~"mrfi.h
"

45 
	~"b•.h
"

46 
	~"b•_ma¸os.h
"

47 
	~"mrfi_bﬂrd_defs.h
"

48 
	~"mrfi_defs.h
"

49 
	~"mrfi_ødio_öãrÁ˚.h
"

50 
	~"sm¨åf_CC430.h
"

51 
	~"ødio.h
"

57 c⁄° 
uöt8_t
 
	gmrfiBrﬂdˇ°Addr
[] = { 0xFF, 0xFF, 0xFF, 0xFF };

60 
BSP_STATIC_ASSERT
(
MRFI_ADDR_SIZE
 =(((
mrfiBrﬂdˇ°Addr
)/(mrfiBroadcastAddr[0])) * (mrfiBroadcastAddr[0])));

66 #i‡(
deföed
 
MRFI_CC430
)

67 
	#MRFI_RSSI_OFFSET
 74

	)

72 
	#MRFI_LENGTH_FIELD_OFS
 
__mrfi_LENGTH_FIELD_OFS__


	)

73 
	#MRFI_LENGTH_FIELD_SIZE
 
__mrfi_LENGTH_FIELD_SIZE__


	)

74 
	#MRFI_HEADER_SIZE
 
__mrfi_HEADER_SIZE__


	)

75 
	#MRFI_FRAME_BODY_OFS
 
__mrfi_DST_ADDR_OFS__


	)

76 
	#MRFI_BACKOFF_PERIOD_USECS
 
__mrfi_BACKOFF_PERIOD_USECS__


	)

78 
	#MRFI_RANDOM_OFFSET
 67

	)

79 
	#MRFI_RANDOM_MULTIPLIER
 109

	)

80 
	#MRFI_MIN_SMPL_FRAME_SIZE
 (
MRFI_HEADER_SIZE
 + 
NWK_HDR_SIZE
)

	)

82 
	#MRFI_RADIO_INST_WRITE_WAIT
(Ë !(
RF1AIFCTL1
 & 
RFINSTRIFG
));

	)

85 
	#MRFI_RX_METRICS_CRC_OK_MASK
 
__mrfi_RX_METRICS_CRC_OK_MASK__


	)

86 
	#MRFI_RX_METRICS_LQI_MASK
 
__mrfi_RX_METRICS_LQI_MASK__


	)

91 
	#MRFI_RADIO_PARTNUM
 0x00

	)

92 
	#MRFI_RADIO_VERSION
 0x06

	)

95 
	#MRFI_SETTING_IOCFG0
 27

	)

98 
	#MRFI_SETTING_IOCFG1
 30

	)

104 
	#MRFI_SETTING_MCSM0
 (0x10)

	)

111 
	#MRFI_SETTING_MCSM1
 0x3C

	)

118 
	#MRFI_SETTING_PKTLEN
 (
MRFI_MAX_FRAME_SIZE
 - 
MRFI_LENGTH_FIELD_SIZE
)

	)

121 
	#MRFI_SETTING_PKTCTRL0
 (0x05 | (
SMARTRF_SETTING_PKTCTRL0
 & 
	`BV
(6)))

	)

124 
	#MRFI_SETTING_FIFOTHR
 (0x07 | (
SMARTRF_SETTING_FIFOTHR
 & (
	`BV
(4)|BV(5)|BV(6)|BV(7))))

	)

130 
	#MRFI_MAX_DELAY_US
 16

	)

133 
	#PKTCTRL1_BASE_VALUE
 
	`BV
(2)

	)

134 
	#PKTCTRL1_ADDR_FILTER_OFF
 
PKTCTRL1_BASE_VALUE


	)

135 
	#PKTCTRL1_ADDR_FILTER_ON
 (
PKTCTRL1_BASE_VALUE
 | (
	`BV
(0)|BV(1)))

	)

137 #ifde‡
MRFI_ASSERTS_ARE_ON


138 
	#RX_FILTER_ADDR_INITIAL_VALUE
 0xFF

	)

146 #i‡
deföed
(
SW_TIMER
)

147 
	#APP_USEC_VALUE
 1000

	)

149 
	#APP_USEC_VALUE
 1000

	)

156 
	#MRFI_ENABLE_SYNC_PIN_INT
(Ë(
RF1AIE
 |
	`BV
(9))

	)

157 
	#MRFI_DISABLE_SYNC_PIN_INT
(Ë(
RF1AIE
 &~
	`BV
(9))

	)

158 
	#MRFI_CLEAR_SYNC_PIN_INT_FLAG
(Ë(
RF1AIFG
 &~
	`BV
(9))

	)

159 
	#MRFI_SYNC_PIN_INT_IS_ENABLED
(Ë(
RF1AIE
 & 
	`BV
(9))

	)

160 
	#MRFI_SYNC_PIN_IS_HIGH
(Ë(
RF1AIN
 & 
	`BV
(9))

	)

161 
	#MRFI_SYNC_PIN_INT_FLAG_IS_SET
(Ë(
RF1AIFG
 & 
	`BV
(9))

	)

164 
	#MRFI_CLEAR_PAPD_PIN_INT_FLAG
(Ë(
RF1AIFG
 &~
	`BV
(0))

	)

165 
	#MRFI_PAPD_PIN_IS_HIGH
(Ë(
RF1AIN
 & 
	`BV
(0))

	)

166 
	#MRFI_PAPD_INT_FLAG_IS_SET
(Ë(
RF1AIFG
 & 
	`BV
(0))

	)

170 
	#MRFI_RSSI_VALID_WAIT
(Ë!(
RF1AIN
 & 
	`BV
(1)));

	)

176 
	#MRFI_STROBE
(
cmd
Ë
	`mrfiRadioI¡îÁ˚CmdSåobe
(cmd)

	)

177 
	#MRFI_RADIO_REG_READ
(
ªg
Ë
	`mrfiRadioI¡îÁ˚RódReg
‘eg)

	)

178 
	#MRFI_RADIO_REG_WRITE
(
ªg
, 
vÆue
Ë
	`mrfiRadioI¡îÁ˚WrôeReg
‘eg, vÆue)

	)

179 
	#MRFI_RADIO_WRITE_TX_FIFO
(
pD©a
, 
Àn
Ë
	`mrfiRadioI¡îÁ˚WrôeTxFifo
’D©a,Üí)

	)

180 
	#MRFI_NEW_RADIO_WRITE_TX_FIFO
(
pD©a
, 
Àn
, 
pos
Ë
	`mrfiRadioI¡îÁ˚NewWrôeTxFifo
’D©a,Üí,Öos)

	)

181 
	#MRFI_RADIO_READ_RX_FIFO
(
pD©a
, 
Àn
Ë
	`mrfiRadioI¡îÁ˚RódRxFifo
’D©a,Üí)

	)

184 
	#MRFI_STROBE_IDLE_AND_WAIT
(Ë\

	)

186 
MRFI_STROBE
–
SIDLE
 ); \

188 
MRFI_STROBE
–
SNOP
 ) & 0xF0) ; \

196 c⁄° 
uöt8_t
 
	gmrfiRadioCfg
[][2] =

199 { 
IOCFG0
, 
MRFI_SETTING_IOCFG0
 },

200 { 
IOCFG1
, 
MRFI_SETTING_IOCFG1
 },

201 { 
MCSM1
, 
MRFI_SETTING_MCSM1
 },

202 { 
MCSM0
, 
MRFI_SETTING_MCSM0
 },

203 { 
PKTLEN
, 
MRFI_SETTING_PKTLEN
 },

204 { 
PKTCTRL0
, 
MRFI_SETTING_PKTCTRL0
 },

205 { 
FIFOTHR
, 
MRFI_SETTING_FIFOTHR
 },

209 { 
FSCTRL1
, 
SMARTRF_SETTING_FSCTRL1
 },

210 { 
FSCTRL0
, 
SMARTRF_SETTING_FSCTRL0
 },

211 { 
FREQ2
, 
SMARTRF_SETTING_FREQ2
 },

212 { 
FREQ1
, 
SMARTRF_SETTING_FREQ1
 },

213 { 
FREQ0
, 
SMARTRF_SETTING_FREQ0
 },

214 { 
MDMCFG4
, 
SMARTRF_SETTING_MDMCFG4
 },

215 { 
MDMCFG3
, 
SMARTRF_SETTING_MDMCFG3
 },

216 { 
MDMCFG2
, 
SMARTRF_SETTING_MDMCFG2
 },

217 { 
MDMCFG1
, 
SMARTRF_SETTING_MDMCFG1
 },

218 { 
MDMCFG0
, 
SMARTRF_SETTING_MDMCFG0
 },

219 { 
DEVIATN
, 
SMARTRF_SETTING_DEVIATN
 },

220 { 
FOCCFG
, 
SMARTRF_SETTING_FOCCFG
 },

221 { 
BSCFG
, 
SMARTRF_SETTING_BSCFG
 },

222 { 
AGCCTRL2
, 
SMARTRF_SETTING_AGCCTRL2
 },

223 { 
AGCCTRL1
, 
SMARTRF_SETTING_AGCCTRL1
 },

224 { 
AGCCTRL0
, 
SMARTRF_SETTING_AGCCTRL0
 },

225 { 
FREND1
, 
SMARTRF_SETTING_FREND1
 },

226 { 
FREND0
, 
SMARTRF_SETTING_FREND0
 },

227 { 
FSCAL3
, 
SMARTRF_SETTING_FSCAL3
 },

228 { 
FSCAL2
, 
SMARTRF_SETTING_FSCAL2
 },

229 { 
FSCAL1
, 
SMARTRF_SETTING_FSCAL1
 },

230 { 
FSCAL0
, 
SMARTRF_SETTING_FSCAL0
 },

231 { 
TEST2
, 
SMARTRF_SETTING_TEST2
 },

232 { 
TEST1
, 
SMARTRF_SETTING_TEST1
 },

233 { 
TEST0
, 
SMARTRF_SETTING_TEST0
 },

249 c⁄° 
uöt8_t
 
	gmrfiLogiˇlCh™TabÀ
[] =

251 
SMARTRF_SETTING_CHANNR
,

257 
BSP_STATIC_ASSERT
(
__mrfi_NUM_LOGICAL_CHANS__
 =(((
mrfiLogiˇlCh™TabÀ
)/(mrfiLogicalChanTable[0])) * (mrfiLogicalChanTable[0])));

275 c⁄° 
uöt8_t
 
	gmrfiRFPowîTabÀ
[] =

283 
BSP_STATIC_ASSERT
(
__mrfi_NUM_POWER_SETTINGS__
 =(((
mrfiRFPowîTabÀ
)/(mrfiRFPowerTable[0])) * (mrfiRFPowerTable[0])));

289 
Mrfi_SyncPöRxI§
();

290 
Mrfi_RxModeOn
();

291 
Mrfi_R™domBackoffDñay
();

292 
Mrfi_RxModeOff
();

293 
Mrfi_DñayU£c
(
uöt16_t
 
howL⁄g
);

294 
Mrfi_DñayU£cSem
(
uöt16_t
 
howL⁄g
);

295 
öt8_t
 
Mrfi_CÆcuœãRssi
(
uöt8_t
 
øwVÆue
);

296 
uöt8_t
 
Mrfi_RxAddrIsFûãªd
(uöt8_à* 
pAddr
);

303 
uöt8_t
 
	gmrfiRadioSèã
 = 
MRFI_RADIO_STATE_UNKNOWN
;

304 
mrfiPackë_t
 
	gmrfiIncomögPackë
;

305 
uöt8_t
 
	gmrfiRndSìd
 = 0;

308 vﬁ©ûê
uöt8_t
 
	gsKûlSem
 = 0;

309 vﬁ©ûê
uöt8_t
 
	gsRïlyDñayC⁄ãxt
 = 0;

310 
uöt16_t
 
	gsRïlyDñaySˇœr
 = 0;

311 
uöt16_t
 
	gsBackoffHñ≥r
 = 0;

313 
uöt8_t
 
	gmrfiRxFûãrE«bÀd
 = 0;

314 
uöt8_t
 
	gmrfiRxFûãrAddr
[
MRFI_ADDR_SIZE
] = { 
RX_FILTER_ADDR_INITIAL_VALUE
 };

317 
uöt32_t
 
	g¸cFaû
 = 0;

318 
uöt32_t
 
	g¸cPass
 = 0;

319 
uöt32_t
 
	gnoFøme
 = 0;

326 
uöt8_t
 
	gmrfiPktRe˚iveFœg
;

327 
uöt8_t
 
	gmrfi_pkt_tx_≥nd
;

340 
	$MRFI_Inô
()

346 
	`mem£t
(&
mrfiIncomögPackë
, 0x0, (mrfiIncomingPacket));

349 
	`mrfiRadioI¡îÁ˚Inô
();

352 
	`MRFI_STROBE
–
SRES
 );

355 
	`MRFI_ASSERT
–
	`MRFI_RADIO_REG_READ
–
PARTNUM
 ) =
MRFI_RADIO_PARTNUM
 );

356 
	`MRFI_ASSERT
–
	`MRFI_RADIO_REG_READ
–
VERSION
 ) =
MRFI_RADIO_VERSION
 );

359 
	`MRFI_STROBE_IDLE_AND_WAIT
();

384 
RF1AIES
 = 
	`BV
(0) | BV(9);

388 
uöt8_t
 
ªadbackPATabÀVÆue
 = 0;

389 
b•ISèã_t
 
s
;

391 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

393  !(
RF1AIFCTL1
 & 
RFINSTRIFG
));

394 
RF1AINSTRW
 = 0x7E51;

396  !(
RF1AIFCTL1
 & 
RFINSTRIFG
));

397 
RF1AINSTRB
 = 
RF_SNOP
;

399  !(
RF1AIFCTL1
 & 
RFINSTRIFG
));

400 
RF1AINSTRB
 = 0xFE;

402  !(
RF1AIFCTL1
 & 
RFDINIFG
));

403 
RF1ADINB
 = 0x00;

405  !(
RF1AIFCTL1
 & 
RFDOUTIFG
));

406 
ªadbackPATabÀVÆue
 = 
RF1ADOUT0B
;

408 
	`MRFI_ASSERT
(
ªadbackPATabÀVÆue
 == 0x51);

410  !(
RF1AIFCTL1
 & 
RFINSTRIFG
));

411 
RF1AINSTRB
 = 
RF_SNOP
;

413 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

419 
uöt8_t
 
i
;

421 
i
=0; i<((
mrfiRadioCfg
)/(mrfiRadioCfg[0])); i++)

423 
	`MRFI_RADIO_REG_WRITE
(
mrfiRadioCfg
[
i
][0], mrfiRadioCfg[i][1]);

430 
uöt8_t
 
i
;

432 
i
=0; i<((
mrfiRadioCfg
)/(mrfiRadioCfg[0])); i++)

434 
	`MRFI_ASSERT
–
mrfiRadioCfg
[
i
][1] =
	`MRFI_RADIO_REG_READ
(mrfiRadioCfg[i][0]) );

439 
	`MRFI_SëLogiˇlCh™√l
( 0 );

442 
	`MRFI_SëRFPwr
(
MRFI_NUM_POWER_SETTINGS
- 1);

449 
	`MRFI_STROBE
–
SRX
 );

452 
	`MRFI_RSSI_VALID_WAIT
();

455 
uöt8_t
 
i
;

456 
i
=0; i<16; i++)

459 
mrfiRndSìd
 = (mrfiRndSìd << 1Ë| (
	`MRFI_RADIO_REG_READ
(
RSSI
) & 0x01);

464 
mrfiRndSìd
 |= 0x0080;

467 
	`Mrfi_RxModeOff
();

474 
	`MRFI_STROBE
–
SXOFF
 );

477 
mrfiRadioSèã
 = 
MRFI_RADIO_STATE_OFF
;

506 
	#MRFI_RADIO_OSC_FREQ
 26000000

	)

507 
	#PHY_PREAMBLE_SYNC_BYTES
 8

	)

510 
uöt32_t
 
d©aR©e
, 
bôs
;

511 
uöt16_t
 
exp⁄ít
, 
m™tisß
;

514 
m™tisß
 = 256 + 
SMARTRF_SETTING_MDMCFG3
;

517 
exp⁄ít
 = 28 - (
SMARTRF_SETTING_MDMCFG4
 & 0x0F);

520 
d©aR©e
 = 
m™tisß
 * (
MRFI_RADIO_OSC_FREQ
>>
exp⁄ít
);

522 
bôs
 = ((
uöt32_t
)((
PHY_PREAMBLE_SYNC_BYTES
 + 
MRFI_MAX_FRAME_SIZE
)*8))*10000;

525 
sRïlyDñaySˇœr
 = 
PLATFORM_FACTOR_CONSTANT
 + (((
bôs
/
d©aR©e
)+5)/10);

535 
sBackoffHñ≥r
 = 
MRFI_BACKOFF_PERIOD_USECS
 + (
sRïlyDñaySˇœr
>>5)*1000;

539 
	`mem£t
(
mrfiIncomögPackë
.
‰ame
, 0x00, (mrfiIncomingPacket.frame));

540 
	`mem£t
(
mrfiIncomögPackë
.
rxMërics
, 0x00, (mrfiIncomingPacket.rxMetrics));

543 
	`BSP_ENABLE_INTERRUPTS
();

546 
	}
}

562 
	$MRFI_Pª∑ª
(c⁄° *
∑ylﬂd
, 
Àn
)

564 
uöt8_t
 
ªtu∫VÆue
 = 
MRFI_TX_RESULT_FAILED
;

566 
mrfiPackë_t
 *
pPackë
 = (mrfiPackë_t*)
∑ylﬂd
;

571 
	`MRFI_ASSERT
–
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
 );

574 
	`Mrfi_RxModeOff
();

580 
	`MRFI_RADIO_WRITE_TX_FIFO
(&(
pPackë
->
‰ame
[0]), 
Àn
);

582 (
ªtu∫VÆue
);

583 
	}
}

598 
	$MRFI_√wTønsmô
(
Àn
)

601 
	`MRFI_STROBE
–
STX
 );

604 !
	`MRFI_SYNC_PIN_INT_FLAG_IS_SET
());

607 
	`MRFI_CLEAR_SYNC_PIN_INT_FLAG
();

609  
MRFI_TX_RESULT_SUCCESS
;

610 
	}
}

626 
	$MRFI_£nd
(c⁄° *
∑ylﬂd
, 
∑ylﬂd_Àn
)

628 
uöt8_t
 
cˇRërõs
;

629 
uöt8_t
 
txBufLí
 = 
∑ylﬂd_Àn
;

630 
uöt8_t
 
ªtu∫VÆue
 = 
MRFI_TX_RESULT_SUCCESS
;

631 
mrfiPackë_t
 * 
pPackë
 = (mrfiPackë_à*)
∑ylﬂd
;

632 
uöt8_t
 
isTxRemFœg
 = 0x0;

633 
uöt8_t
 
txBufPos
 = 0x0;

636 
	`MRFI_ASSERT
–
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
 );

639 
	`Mrfi_RxModeOff
();

648 
isTxRemFœg
 = 
	`MRFI_NEW_RADIO_WRITE_TX_FIFO
(&(
pPackë
->
‰ame
[0]), 
txBufLí
, &
txBufPos
);

656 
cˇRërõs
 = 
MRFI_CCA_RETRIES
;

672 
	`MRFI_STROBE
–
SRX
 );

675 
	`MRFI_RSSI_VALID_WAIT
();

684 
	`MRFI_CLEAR_PAPD_PIN_INT_FLAG
();

687 
	`MRFI_STROBE
–
STX
 );

689 
isTxRemFœg
)

693 
isTxRemFœg
 = 
	`MRFI_NEW_RADIO_WRITE_TX_FIFO
(

694 &(
pPackë
->
‰ame
[0]), 
txBufLí
, &
txBufPos
);

702 
	`Mrfi_DñayU£c
(25);

709 i‡(
	`MRFI_PAPD_INT_FLAG_IS_SET
())

717 
	`MRFI_CLEAR_PAPD_PIN_INT_FLAG
();

723 !
	`MRFI_PAPD_PIN_IS_HIGH
());

740 
	`MRFI_STROBE_IDLE_AND_WAIT
();

743 
	`MRFI_STROBE
–
SFRX
 );

746 i‡(
cˇRërõs
 != 0)

749 
	`Mrfi_R™domBackoffDñay
();

752 
cˇRërõs
--;

757 
ªtu∫VÆue
 = 
MRFI_TX_RESULT_FAILED
;

772 
	`MRFI_STROBE
–
SFTX
 );

777 if(
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
)

779 
	`Mrfi_RxModeOn
();

782 –
ªtu∫VÆue
 );

783 
	}
}

797 
uöt8_t
 
	$MRFI_Tønsmô
(
mrfiPackë_t
 * 
pPackë
, 
uöt8_t
 
txTy≥
)

799 
uöt8_t
 
cˇRërõs
;

800 
uöt8_t
 
txBufLí
;

801 
uöt8_t
 
ªtu∫VÆue
 = 
MRFI_TX_RESULT_SUCCESS
;

804 
	`MRFI_ASSERT
–
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
 );

807 
	`Mrfi_RxModeOff
();

810 
txBufLí
 = 
pPackë
->
‰ame
[
MRFI_LENGTH_FIELD_OFS
] + 
MRFI_LENGTH_FIELD_SIZE
;

816 
	`MRFI_RADIO_WRITE_TX_FIFO
(&(
pPackë
->
‰ame
[0]), 
txBufLí
);

823 i‡(
txTy≥
 =
MRFI_TX_TYPE_FORCED
)

826 
	`MRFI_STROBE
–
STX
 );

829 !
	`MRFI_SYNC_PIN_INT_FLAG_IS_SET
());

832 
	`MRFI_CLEAR_SYNC_PIN_INT_FLAG
();

841 
	`MRFI_ASSERT
–
txTy≥
 =
MRFI_TX_TYPE_CCA
 );

844 
cˇRërõs
 = 
MRFI_CCA_RETRIES
;

860 
	`MRFI_STROBE
–
SRX
 );

863 
	`MRFI_RSSI_VALID_WAIT
();

872 
	`MRFI_CLEAR_PAPD_PIN_INT_FLAG
();

875 
	`MRFI_STROBE
–
STX
 );

883 
	`Mrfi_DñayU£c
(25);

890 i‡(
	`MRFI_PAPD_INT_FLAG_IS_SET
())

898 
	`MRFI_CLEAR_PAPD_PIN_INT_FLAG
();

904 !
	`MRFI_PAPD_PIN_IS_HIGH
());

921 
	`MRFI_STROBE_IDLE_AND_WAIT
();

924 
	`MRFI_STROBE
–
SFRX
 );

927 i‡(
cˇRërõs
 != 0)

930 
	`Mrfi_R™domBackoffDñay
();

933 
cˇRërõs
--;

938 
ªtu∫VÆue
 = 
MRFI_TX_RESULT_FAILED
;

954 
	`MRFI_STROBE
–
SFTX
 );

959 if(
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
)

961 
	`Mrfi_RxModeOn
();

964 –
ªtu∫VÆue
 );

965 
	}
}

982 
	$MRFI_ªad
(*
pPackë
, 
Àn
)

986 
MRFI_FRAME_BODY_OFS
);

987  
mrfiIncomögPackë
.
‰ame
[
MRFI_LENGTH_FIELD_OFS
];

988 
	}
}

990 
	$MRFI_Re˚ive
(
mrfiPackë_t
 * 
pPackë
)

992 *
pPackë
 = 
mrfiIncomögPackë
;

993 
	}
}

1009 
	$MRFI_cˇ
()

1011 
uöt8_t
 
ªgVÆue
, 
gdoSèã
;

1012 
mrfiRIFISèã_t
 
s
;

1015 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

1018 
	`MRFI_RADIO_INST_WRITE_WAIT
();

1021 
gdoSèã
 = 
	`MRFI_RADIO_REG_READ
(
IOCFG2
);

1024 
	`MRFI_RADIO_REG_WRITE
(
IOCFG2
, 0x09);

1027 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

1029 
ªgVÆue
 = 
	`MRFI_RADIO_REG_READ
(
PKTSTATUS
);

1032 
	`MRFI_RADIO_REG_WRITE
(
IOCFG2
, 
gdoSèã
);

1034  (
ªgVÆue
 & 0x4);

1036 
	}
}

1051 
	$MRFI_isRecvPkt
()

1055 if(
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
)

1063 
	}
}

1078 
	$MRFI_isPktPíd
()

1080 (
mrfiPktRe˚iveFœg
);

1081 
	}
}

1097 
	$MRFI_ødioOff
()

1099 
mrfiRIFISèã_t
 
s
;

1100 
uöt8_t
 
°©usByã
 = 0x0;

1101 
uöt8_t
 
√wRadioSèã
 = 0xFF;

1104 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

1107 
	`MRFI_RADIO_INST_WRITE_WAIT
();

1109 
°©usByã
 = 
	`MRFI_STROBE
(
SXOFF
);

1110 
√wRadioSèã
 = (0x70 & 
°©usByã
) >> 4;

1112 if(
√wRadioSèã
 == 0x0)

1114 
mrfiRadioSèã
 = 
MRFI_RADIO_STATE_OFF
;

1118 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

1120  
√wRadioSèã
;

1121 
	}
}

1140 
	$Mrfi_SyncPöRxI§
()

1142 
uöt8_t
 
rxByãs
;

1143 
uöt8_t
 
‰ameLí
;

1144 
uöt16_t
 
ªmPackëSize
 = 0, 
∑ckëOff£t
 = 0;

1145 
uöt8_t
 
rxRïót
 = 0;

1152 
	`MRFI_ASSERT
–
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
 );

1171 
uöt8_t
 
rxByãsVîify
;

1172 
rxByãsVîify
 = 
	`MRFI_RADIO_REG_READ
–
RXBYTES
 );

1176 
rxByãs
 = 
rxByãsVîify
;

1177 
rxByãsVîify
 = 
	`MRFI_RADIO_REG_READ
–
RXBYTES
 );

1179 
rxByãs
 !
rxByãsVîify
);

1195 i‡(
rxByãs
 == 0)

1208 if(0 =
rxRïót
)

1211 
	`MRFI_RADIO_READ_RX_FIFO
(&
‰ameLí
, 
MRFI_LENGTH_FIELD_SIZE
);

1212 
ªmPackëSize
 = 
‰ameLí
;

1215 
	`mem£t
(
mrfiIncomögPackë
.
‰ame
, 0x00, (mrfiIncomingPacket.frame));

1218 
mrfiIncomögPackë
.
‰ame
[
MRFI_LENGTH_FIELD_OFS
] = 
‰ameLí
;

1219 
∑ckëOff£t
 = 
MRFI_FRAME_BODY_OFS
;

1220 if(
rxByãs
 =(
ªmPackëSize
 + 
MRFI_LENGTH_FIELD_SIZE
 + 
MRFI_RX_METRICS_SIZE
))

1223 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
‰ame
[
∑ckëOff£t
]), 
ªmPackëSize
);

1224 
ªmPackëSize
 = 0;

1226 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
rxMërics
[0]), 
MRFI_RX_METRICS_SIZE
);

1240 if(
rxByãs
 < (
ªmPackëSize
 + 
MRFI_RX_METRICS_SIZE
))

1242 if(
rxByãs
 !
MRFI_RX_METRICS_SIZE
)

1244 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
‰ame
[
∑ckëOff£t
]), 
rxByãs
 - 2);

1245 
ªmPackëSize
 -(
rxByãs
 - 2);

1246 
∑ckëOff£t
 +(
rxByãs
 - 2);

1248 
rxRïót
 ++;

1253 if(
rxByãs
 !
MRFI_RX_METRICS_SIZE
)

1254 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
‰ame
[
∑ckëOff£t
]), 
rxByãs
 - 2);

1256 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
rxMërics
[0]), 
MRFI_RX_METRICS_SIZE
);

1257 
ªmPackëSize
 = 0;

1259 
	`Mrfi_DñayU£c
(1000);

1262 }
ªmPackëSize
 && (
rxRïót
 < 5));

1264 if((0 !
rxRïót
 && 
rxByãs
 == 0) || (rxRepeat >=5))

1267 
b•ISèã_t
 
s
;

1268 
noFøme
++;

1276 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

1277 
	`MRFI_STROBE_IDLE_AND_WAIT
();

1278 
	`MRFI_STROBE
–
SFRX
 );

1279 
	`MRFI_STROBE
–
SRX
 );

1280 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

1302 i‡(!(
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_CRC_LQI_OFS
] & 
MRFI_RX_METRICS_CRC_OK_MASK
))

1305 
¸cFaû
++;

1310 
¸cPass
++;

1318 i‡(!
	`Mrfi_RxAddrIsFûãªd
(
	`MRFI_P_DST_ADDR
(&
mrfiIncomögPackë
)))

1327 
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_RSSI_OFS
] =

1328 
	`Mrfi_CÆcuœãRssi
(
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_RSSI_OFS
]);

1331 
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_CRC_LQI_OFS
] =

1332 (
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_CRC_LQI_OFS
] & 
MRFI_RX_METRICS_LQI_MASK
);

1339 
mrfiPktRe˚iveFœg
 = 1;

1348 
	}
}

1365 
	$Mrfi_SyncPöRxI§
()

1367 
uöt8_t
 
‰ameLí
 = 0x00;

1368 
uöt8_t
 
rxByãs
;

1375 
	`MRFI_ASSERT
–
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
 );

1392 
uöt8_t
 
rxByãsVîify
;

1394 
rxByãsVîify
 = 
	`MRFI_RADIO_REG_READ
–
RXBYTES
 );

1398 
rxByãs
 = 
rxByãsVîify
;

1399 
rxByãsVîify
 = 
	`MRFI_RADIO_REG_READ
–
RXBYTES
 );

1401 
rxByãs
 !
rxByãsVîify
);

1417 i‡(
rxByãs
 == 0)

1431 
	`MRFI_RADIO_READ_RX_FIFO
(&
‰ameLí
, 
MRFI_LENGTH_FIELD_SIZE
);

1454 i‡((
rxByãs
 !(
‰ameLí
 + 
MRFI_LENGTH_FIELD_SIZE
 + 
MRFI_RX_METRICS_SIZE
)) ||

1455 ((
‰ameLí
 + 
MRFI_LENGTH_FIELD_SIZE
Ë> 
MRFI_MAX_FRAME_SIZE
) ||

1456 (
‰ameLí
 < 
MRFI_MIN_SMPL_FRAME_SIZE
)

1459 
b•ISèã_t
 
s
;

1460 
noFøme
++;

1468 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

1469 
	`MRFI_STROBE_IDLE_AND_WAIT
();

1470 
	`MRFI_STROBE
–
SFRX
 );

1471 
	`MRFI_STROBE
–
SRX
 );

1472 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

1486 
	`mem£t
(
mrfiIncomögPackë
.
‰ame
, 0x00, (mrfiIncomingPacket.frame));

1489 
mrfiIncomögPackë
.
‰ame
[
MRFI_LENGTH_FIELD_OFS
] = 
‰ameLí
;

1492 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
‰ame
[
MRFI_FRAME_BODY_OFS
]), 
‰ameLí
);

1495 
	`MRFI_RADIO_READ_RX_FIFO
(&(
mrfiIncomögPackë
.
rxMërics
[0]), 
MRFI_RX_METRICS_SIZE
);

1513 i‡(!(
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_CRC_LQI_OFS
] & 
MRFI_RX_METRICS_CRC_OK_MASK
))

1516 
¸cFaû
++;

1521 
¸cPass
++;

1529 i‡(!
	`Mrfi_RxAddrIsFûãªd
(
	`MRFI_P_DST_ADDR
(&
mrfiIncomögPackë
)))

1538 
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_RSSI_OFS
] =

1539 
	`Mrfi_CÆcuœãRssi
(
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_RSSI_OFS
]);

1542 
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_CRC_LQI_OFS
] =

1543 (
mrfiIncomögPackë
.
rxMërics
[
MRFI_RX_METRICS_CRC_LQI_OFS
] & 
MRFI_RX_METRICS_LQI_MASK
);

1559 
	}
}

1572 
	$Mrfi_RxModeOn
()

1575 
	`MRFI_CLEAR_SYNC_PIN_INT_FLAG
();

1578 
	`MRFI_STROBE
–
SRX
 );

1581 
	`MRFI_ENABLE_SYNC_PIN_INT
();

1582 
	}
}

1595 
	$MRFI_RxOn
()

1598 
	`MRFI_ASSERT
–
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
 );

1601 if(
mrfiRadioSèã
 !
MRFI_RADIO_STATE_RX
)

1603 
mrfiRadioSèã
 = 
MRFI_RADIO_STATE_RX
;

1604 
	`Mrfi_RxModeOn
();

1606 
	}
}

1618 
	$Mrfi_RxModeOff
()

1621 
	`MRFI_DISABLE_SYNC_PIN_INT
();

1624 
	`MRFI_STROBE_IDLE_AND_WAIT
();

1627 
	`MRFI_STROBE
–
SFRX
 );

1630 
	`MRFI_CLEAR_SYNC_PIN_INT_FLAG
();

1631 
	}
}

1645 
	$MRFI_RxIdÀ
()

1648 
	`MRFI_ASSERT
–
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
 );

1651 if(
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
)

1653 
	`Mrfi_RxModeOff
();

1654 
mrfiRadioSèã
 = 
MRFI_RADIO_STATE_IDLE
;

1656 
	}
}

1669 
	$MRFI_SÀï
()

1671 
b•ISèã_t
 
s
;

1676 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

1679 if(
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
)

1682 
	`MRFI_RxIdÀ
();

1689 
	`MRFI_STROBE
–
SXOFF
 );

1692 
mrfiRadioSèã
 = 
MRFI_RADIO_STATE_OFF
;

1695 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

1698 
	}
}

1711 
	$MRFI_WakeUp
()

1714 if(
mrfiRadioSèã
 !
MRFI_RADIO_STATE_OFF
)

1719 
	`MRFI_STROBE_IDLE_AND_WAIT
();

1722 
mrfiRadioSèã
 = 
MRFI_RADIO_STATE_IDLE
;

1725 
	}
}

1739 
	$BSP_ISR_FUNCTION
–
MRFI_RadioI§
, 
CC1101_VECTOR
 )

1741 
uöt16_t
 
c‹eI¡Sour˚
 = 
RF1AIV
;

1742 
uöt16_t
 
öãrÁ˚I¡Sour˚
 = 
RF1AIFIV
;

1745 if(
öãrÁ˚I¡Sour˚
)

1747 if(
öãrÁ˚I¡Sour˚
 =
RF1AIFIV_RFERRIFG
)

1749 
uöt16_t
 
öãrÁ˚Eº‹
 = 
RF1AIFERRV
;

1751 if(
öãrÁ˚Eº‹
 =
RF1AIFERRV_LVERR
)

1755 if(
öãrÁ˚Eº‹
 =
RF1AIFERRV_OPERR
)

1759 if(
öãrÁ˚Eº‹
 =
RF1AIFERRV_OUTERR
)

1763 if(
öãrÁ˚Eº‹
 =
RF1AIFERRV_OPOVERR
)

1772 
	`MRFI_FORCE_ASSERT
();

1776 
	`MRFI_FORCE_ASSERT
();

1781 
	`MRFI_FORCE_ASSERT
();

1786 if(
c‹eI¡Sour˚
)

1789 if(
c‹eI¡Sour˚
 =
RF1AIV_RFIFG9
)

1791 if(
	`MRFI_SYNC_PIN_INT_IS_ENABLED
())

1801 
	`MRFI_CLEAR_SYNC_PIN_INT_FLAG
();

1803 
	`Mrfi_SyncPöRxI§
();

1808 
	`MRFI_FORCE_ASSERT
();

1814 
	`MRFI_FORCE_ASSERT
();

1817 
	}
}

1830 
öt8_t
 
	$MRFI_Rssi
()

1832 
uöt8_t
 
ªgVÆue
;

1835 
	`MRFI_ASSERT
–
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
 );

1843 
	`MRFI_RSSI_VALID_WAIT
();

1846 
ªgVÆue
 = 
	`MRFI_RADIO_REG_READ
–
RSSI
 );

1849 –
	`Mrfi_CÆcuœãRssi
(
ªgVÆue
) );

1850 
	}
}

1863 
öt8_t
 
	$Mrfi_CÆcuœãRssi
(
uöt8_t
 
øwVÆue
)

1865 
öt16_t
 
rssi
;

1870 if(
øwVÆue
 >= 128)

1872 
rssi
 = (
öt16_t
)(
øwVÆue
 - 256)/2 - 
MRFI_RSSI_OFFSET
;

1876 
rssi
 = (
øwVÆue
/2Ë- 
MRFI_RSSI_OFFSET
;

1880 if(
rssi
 < -128)

1882 
rssi
 = -128;

1885  
rssi
;

1886 
	}
}

1900 
uöt8_t
 
	$MRFI_R™domByã
()

1902 
mrfiRndSìd
 = (mrfiRndSìd*
MRFI_RANDOM_MULTIPLIER
Ë+ 
MRFI_RANDOM_OFFSET
;

1904  
mrfiRndSìd
;

1905 
	}
}

1917 
	$Mrfi_R™domBackoffDñay
()

1919 
uöt8_t
 
backoffs
;

1920 
uöt8_t
 
i
;

1923 
backoffs
 = (
	`MRFI_R™domByã
() & 0x0F) + 1;

1926 
i
=0; i<
backoffs
; i++)

1928 
	`Mrfi_DñayU£c
–
sBackoffHñ≥r
 );

1930 
	}
}

1948 
	$Mrfi_DñayU£c
(
uöt16_t
 
howL⁄g
)

1950 
b•ISèã_t
 
s
;

1951 
uöt16_t
 
cou¡
 = 
howL⁄g
/
MRFI_MAX_DELAY_US
;

1953 i‡(
howL⁄g
)

1957 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

1958 
	`BSP_DELAY_USECS
(
MRFI_MAX_DELAY_US
);

1959 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

1960 } 
cou¡
--);

1964 
	}
}

1981 
	$Mrfi_DñayU£cSem
(
uöt16_t
 
howL⁄g
)

1983 
b•ISèã_t
 
s
;

1984 
uöt16_t
 
cou¡
 = 
howL⁄g
/
MRFI_MAX_DELAY_US
;

1986 i‡(
howL⁄g
)

1990 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

1991 
	`BSP_DELAY_USECS
(
MRFI_MAX_DELAY_US
);

1992 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

1993 i‡(
sKûlSem
)

1997 } 
cou¡
--);

2001 
	}
}

2013 
	$MRFI_DñayMs
(
uöt16_t
 
mûli£c⁄ds
)

2015 
mûli£c⁄ds
)

2017 
	`Mrfi_DñayU£c
–
APP_USEC_VALUE
 );

2018 
mûli£c⁄ds
--;

2020 
	}
}

2035 
	$MRFI_RïlyDñay
()

2037 
b•ISèã_t
 
s
;

2038 
uöt16_t
 
mûli£c⁄ds
 = 
sRïlyDñaySˇœr
;

2040 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

2041 
sRïlyDñayC⁄ãxt
 = 1;

2042 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

2044 
mûli£c⁄ds
)

2046 
	`Mrfi_DñayU£cSem
–
APP_USEC_VALUE
 );

2047 i‡(
sKûlSem
)

2051 
mûli£c⁄ds
--;

2054 
	`BSP_ENTER_CRITICAL_SECTION
(
s
);

2055 
sKûlSem
 = 0;

2056 
sRïlyDñayC⁄ãxt
 = 0;

2057 
	`BSP_EXIT_CRITICAL_SECTION
(
s
);

2058 
	}
}

2071 
	$MRFI_Po°KûlSem
()

2074 i‡(
sRïlyDñayC⁄ãxt
)

2076 
sKûlSem
 = 1;

2080 
	}
}

2092 
uöt8_t
 
	$MRFI_GëRadioSèã
()

2094  
mrfiRadioSèã
;

2095 
	}
}

2108 
	$MRFI_SëLogiˇlCh™√l
(
uöt8_t
 
ch™
)

2111 
	`MRFI_ASSERT
–
ch™
 < 
MRFI_NUM_LOGICAL_CHANS
 );

2114 
	`Mrfi_RxModeOff
();

2116 
	`MRFI_RADIO_REG_WRITE
–
CHANNR
, 
mrfiLogiˇlCh™TabÀ
[
ch™
] );

2119 if(
mrfiRadioSèã
 =
MRFI_RADIO_STATE_RX
)

2121 
	`Mrfi_RxModeOn
();

2123 
	}
}

2135 
	$MRFI_SëRFPwr
(
uöt8_t
 
Àvñ
)

2138 
	`MRFI_ASSERT
–
Àvñ
 < 
MRFI_NUM_POWER_SETTINGS
 );

2140 
	`MRFI_RADIO_REG_WRITE
(
PATABLE
, 
mrfiRFPowîTabÀ
[
Àvñ
]);

2143 
	}
}

2155 
uöt8_t
 
	$MRFI_SëRxAddrFûãr
(
uöt8_t
 * 
pAddr
)

2161 i‡(
pAddr
[0] =
mrfiBrﬂdˇ°Addr
[0])

2171 
	`MRFI_RADIO_REG_WRITE
–
ADDR
, 
pAddr
[0] );

2175 
uöt8_t
 
i
;

2177 
i
=0; i<
MRFI_ADDR_SIZE
; i++)

2179 
mrfiRxFûãrAddr
[
i
] = 
pAddr
[i];

2185 
	}
}

2198 
	$MRFI_E«bÀRxAddrFûãr
()

2200 
	`MRFI_ASSERT
(
mrfiRxFûãrAddr
[0] !
mrfiBrﬂdˇ°Addr
[0]);

2203 
mrfiRxFûãrE«bÀd
 = 1;

2206 
	`MRFI_RADIO_REG_WRITE
–
PKTCTRL1
, 
PKTCTRL1_ADDR_FILTER_ON
 );

2207 
	}
}

2220 
	$MRFI_DißbÀRxAddrFûãr
()

2223 
mrfiRxFûãrE«bÀd
 = 0;

2226 
	`MRFI_RADIO_REG_WRITE
–
PKTCTRL1
, 
PKTCTRL1_ADDR_FILTER_OFF
 );

2227 
	}
}

2241 
uöt8_t
 
	$Mrfi_RxAddrIsFûãªd
(
uöt8_t
 * 
pAddr
)

2243 
uöt8_t
 
i
;

2244 
uöt8_t
 
addrByã
;

2245 
uöt8_t
 
fûãrAddrM©ches
;

2246 
uöt8_t
 
brﬂdˇ°AddrM©ches
;

2249 i‡(!
mrfiRxFûãrE«bÀd
)

2259 
fûãrAddrM©ches
 = 0;

2260 
brﬂdˇ°AddrM©ches
 = 0;

2263 
i
=0; i<
MRFI_ADDR_SIZE
; i++)

2266 
addrByã
 = 
pAddr
[
i
];

2269 i‡(
addrByã
 =
mrfiRxFûãrAddr
[
i
])

2271 
fûãrAddrM©ches
++;

2273 i‡(
addrByã
 =
mrfiBrﬂdˇ°Addr
[
i
])

2275 
brﬂdˇ°AddrM©ches
++;

2284 i‡((
brﬂdˇ°AddrM©ches
 =
MRFI_ADDR_SIZE
Ë|| (
fûãrAddrM©ches
 == MRFI_ADDR_SIZE))

2294 
	}
}

2300 c⁄° 
ødio_drivî
 
	gcc430Radio_drivî
 =

2302 
MRFI_Inô
,

2303 
MRFI_Pª∑ª
,

2304 
MRFI_√wTønsmô
,

2305 
MRFI_£nd
,

2306 
MRFI_ªad
,

2307 
MRFI_cˇ
,

2308 
MRFI_isRecvPkt
,

2309 
MRFI_isPktPíd
,

2310 
MRFI_WakeUp
,

2311 
MRFI_SÀï


2321 
	#MRFI_RADIO_TX_FIFO_SIZE
 64

	)

2322 
	#MRFI_RADIO_MAX_PKTLEN
 (
MRFI_RADIO_TX_FIFO_SIZE
 - 
MRFI_LENGTH_FIELD_SIZE
 - 
MRFI_RX_METRICS_SIZE
)

	)

2323 #i‡(
MRFI_RADIO_MAX_PKTLEN
 != 61)

2328 #i‡(
MRFI_SETTING_PKTLEN
 > 
MRFI_RADIO_MAX_PKTLEN
)

2333 #i‡((
MRFI_MAX_FRAME_SIZE
 + 
MRFI_RX_METRICS_SIZE
Ë> 
MRFI_RADIO_TX_FIFO_SIZE
)

2338 #i‡((!
deföed
 
SMARTRF_RADIO_CC430
))

2347 
BSP_STATIC_ASSERT
((
mrfiRadioCfg
) == (((mrfiRadioCfg)/(mrfiRadioCfg[0])) * (mrfiRadioCfg[0])));

2355 
BSP_STATIC_ASSERT
((
mrfiLogiˇlCh™TabÀ
) == (((mrfiLogicalChanTable)/(mrfiLogicalChanTable[0])) * (mrfiLogicalChanTable[0])));

2356 
BSP_STATIC_ASSERT
((
mrfiBrﬂdˇ°Addr
) == (((mrfiBroadcastAddr)/(mrfiBroadcastAddr[0])) * (mrfiBroadcastAddr[0])));

	@platform/cc430/radio/mrfi_radio_interface.c

43 
	~"mrfi_ødio_öãrÁ˚.h
"

55 
	#MRFI_RADIO_STATUS_READ_CLEAR
(Ë
RF1AIFCTL1
 &~(
RFSTATIFG
);

	)

57 
	#MRFI_RADIO_STATUS_READ_WAIT
(Ë !(
RF1AIFCTL1
 & 
RFSTATIFG
Ë);

	)

58 
	#MRFI_RADIO_INST_WRITE_WAIT
(Ë !(
RF1AIFCTL1
 & 
RFINSTRIFG
));

	)

59 
	#MRFI_RADIO_DATA_WRITE_WAIT
(Ë !(
RF1AIFCTL1
 & 
RFDINIFG
Ë);

	)

60 
	#MRFI_RADIO_DATA_READ_WAIT
(Ë !(
RF1AIFCTL1
 & 
RFDOUTIFG
Ë);

	)

62 
	#MRFI_RIF_DEBUG


	)

63 #ifde‡
MRFI_RIF_DEBUG


64 
	#MRFI_RIF_ASSERT
(
x
Ë
	`BSP_ASSERT
(x)

	)

66 
	#MRFI_RIF_ASSERT
(
x
)

	)

86 
	$mrfiRadioI¡îÁ˚Inô
()

96 
	}
}

110 
uöt8_t
 
	$mrfiRadioI¡îÁ˚CmdSåobe
(
uöt8_t
 
addr
)

112 
uöt8_t
 
°©usByã
, 
gdoSèã
;

113 
mrfiRIFISèã_t
 
s
;

118 
	`MRFI_RIF_ASSERT
–(
addr
 =0xBDË|| (add∏>
RF_SRES
Ë&& (add∏<
RF_SNOP
));

121 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

124 
	`MRFI_RADIO_STATUS_READ_CLEAR
();

127 
	`MRFI_RADIO_INST_WRITE_WAIT
();

129 i‡((
addr
 > 
RF_SRES
Ë&& (add∏< 
RF_SNOP
))

132 
gdoSèã
 = 
	`MRFI_RADIO_REG_READ
(
IOCFG2
);

135 
	`MRFI_RADIO_REG_WRITE
(
IOCFG2
, 0x29);

137 
RF1AINSTRB
 = 
addr
;

140 i‡((
RF1AIN
 & 0x04) == 0x04)

142 i‡–(
addr
 =
RF_SXOFF
Ë|| (add∏=
RF_SPWD
Ë|| (add∏=
RF_SWOR
) )

149 (
RF1AIN
 & 0x04) == 0x04);

152 
	`Mrfi_DñayU£c
(760);

157 
	`MRFI_RADIO_REG_WRITE
(
IOCFG2
, 
gdoSèã
);

162 
RF1AINSTRB
 = 
addr
;

166 
°©usByã
 = 
RF1ASTAT0B
;

169 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

172  
°©usByã
;

173 
	}
}

186 
uöt8_t
 
	$mrfiRadioI¡îÁ˚RódReg
(
uöt8_t
 
addr
)

188 
mrfiRIFISèã_t
 
s
;

189 
uöt8_t
 
ªgVÆue
;

192 
	`MRFI_RIF_ASSERT
–(
addr
 <= 0x3B) || (addr == 0x3E) );

195 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

198 
	`MRFI_RADIO_INST_WRITE_WAIT
();

200 if–(
addr
 <= 0x2E) || (addr == 0x3E))

203 
RF1AINSTR1B
 = (0x80 | 
addr
);

208 
RF1AINSTR1B
 = (0xC0 | 
addr
);

212 
ªgVÆue
 = 
RF1ADOUT1B
;

215 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

217 –
ªgVÆue
);

218 
	}
}

232 
	$mrfiRadioI¡îÁ˚WrôeReg
(
uöt8_t
 
addr
, uöt8_à
vÆue
)

234 
mrfiRIFISèã_t
 
s
;

237 
	`MRFI_RIF_ASSERT
((
addr
 <= 0x2E) || (addr == 0x3E));

240 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

243 
	`MRFI_RADIO_INST_WRITE_WAIT
();

246 
RF1AINSTRB
 = (0x00 | 
addr
);

249 
	`MRFI_RADIO_DATA_WRITE_WAIT
();

252 
RF1ADINB
 = 
vÆue
;

255 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

256 
	}
}

270 
uöt8_t
 
	$mrfiRadioI¡îÁ˚NewWrôeTxFifo
(
uöt8_t
 * 
pD©a
, uöt8_à
Àn
, uöt8_t* 
pos
)

272 
mrfiRIFISèã_t
 
s
;

273 
uöt8_t
 
txByãs
;

274 
uöt8_t
 
ªtFœg
 = 0;

276 
	`MRFI_RIF_ASSERT
(
Àn
 != 0);

288 
uöt8_t
 
txByãsVîify
;

289 
txByãsVîify
 = 
	`MRFI_RADIO_REG_READ
–
RXBYTES
 );

293 
txByãs
 = 
txByãsVîify
;

294 
txByãsVîify
 = 
	`MRFI_RADIO_REG_READ
–
RXBYTES
 );

296 
txByãs
 !
txByãsVîify
);

300 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

303 
	`MRFI_RADIO_INST_WRITE_WAIT
();

306 
RF1AINSTRB
 = 0x7F;

308 
	#MRFI_MAX_TXFIFO_SIZE
 61

	)

313 
	`MRFI_RADIO_DATA_WRITE_WAIT
();

316 
RF1ADINB
 = *(
pD©a
+ (*
pos
));

318 
pD©a
++;

319 (*
pos
)++;

320 
txByãs
 ++;

322 }(
txByãs
 <
MRFI_MAX_TXFIFO_SIZE
Ë&& ((*
pos
)<
Àn
));

324 if((*
pos
Ë=
Àn
)

326 
ªtFœg
 = 1;

330 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

331  (
ªtFœg
);

332 
	}
}

346 
	$mrfiRadioI¡îÁ˚WrôeTxFifo
(
uöt8_t
 * 
pD©a
, uöt8_à
Àn
)

348 
mrfiRIFISèã_t
 
s
;

350 
	`MRFI_RIF_ASSERT
(
Àn
 != 0);

353 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

356 
	`MRFI_RADIO_INST_WRITE_WAIT
();

359 
RF1AINSTRB
 = 0x7F;

364 
	`MRFI_RADIO_DATA_WRITE_WAIT
();

367 
RF1ADINB
 = *
pD©a
;

369 
pD©a
++;

370 
Àn
--;

372 }
Àn
);

375 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

376 
	}
}

390 
uöt8_t
 
	gmëhod
 = 2;

391 
	$mrfiRadioI¡îÁ˚RódRxFifo
(
uöt8_t
 * 
pD©a
, uöt8_à
Àn
)

393 
mrfiRIFISèã_t
 
s
;

395 
	`MRFI_RIF_ASSERT
(
Àn
 != 0);

398 
	`MRFI_RIF_ENTER_CRITICAL_SECTION
(
s
);

400 if(
mëhod
 == 1)

403 
	`MRFI_RADIO_INST_WRITE_WAIT
();

406 
RF1AINSTRB
 = 0xFF;

411 
RF1ADINB
 = 0;

414 
	`MRFI_RADIO_DATA_READ_WAIT
();

417 *
pD©a
 = 
RF1ADOUT0B
;

419 
pD©a
++;

420 
Àn
--;

422 }
Àn
);

425 if(
mëhod
 == 2)

430 
	`MRFI_RADIO_INST_WRITE_WAIT
();

433 
RF1AINSTR1B
 = 0xBF;

436 *
pD©a
 = 
RF1ADOUT1B
;

438 
pD©a
++;

439 
Àn
--;

441 }
Àn
);

445 
	`MRFI_RIF_EXIT_CRITICAL_SECTION
(
s
);

446 
	}
}

	@platform/cc430/radio/mrfi_radio_interface.h

38 #i‚de‡
MRFI_RADIO_INTERFACE_H


39 
	#MRFI_RADIO_INTERFACE_H


	)

45 
	~"b•.h
"

54 
	#IOCFG2
 0x00

	)

55 
	#IOCFG1
 0x01

	)

56 
	#IOCFG0
 0x02

	)

57 
	#FIFOTHR
 0x03

	)

58 
	#SYNC1
 0x04

	)

59 
	#SYNC0
 0x05

	)

60 
	#PKTLEN
 0x06

	)

61 
	#PKTCTRL1
 0x07

	)

62 
	#PKTCTRL0
 0x08

	)

63 
	#ADDR
 0x09

	)

64 
	#CHANNR
 0x0A

	)

65 
	#FSCTRL1
 0x0B

	)

66 
	#FSCTRL0
 0x0C

	)

67 
	#FREQ2
 0x0D

	)

68 
	#FREQ1
 0x0E

	)

69 
	#FREQ0
 0x0F

	)

70 
	#MDMCFG4
 0x10

	)

71 
	#MDMCFG3
 0x11

	)

72 
	#MDMCFG2
 0x12

	)

73 
	#MDMCFG1
 0x13

	)

74 
	#MDMCFG0
 0x14

	)

75 
	#DEVIATN
 0x15

	)

76 
	#MCSM2
 0x16

	)

77 
	#MCSM1
 0x17

	)

78 
	#MCSM0
 0x18

	)

79 
	#FOCCFG
 0x19

	)

80 
	#BSCFG
 0x1A

	)

81 
	#AGCCTRL2
 0x1B

	)

82 
	#AGCCTRL1
 0x1C

	)

83 
	#AGCCTRL0
 0x1D

	)

84 
	#WOREVT1
 0x1E

	)

85 
	#WOREVT0
 0x1F

	)

86 
	#WORCTRL
 0x20

	)

87 
	#FREND1
 0x21

	)

88 
	#FREND0
 0x22

	)

89 
	#FSCAL3
 0x23

	)

90 
	#FSCAL2
 0x24

	)

91 
	#FSCAL1
 0x25

	)

92 
	#FSCAL0
 0x26

	)

93 
	#RCCTRL1
 0x27

	)

94 
	#RCCTRL0
 0x28

	)

95 
	#FSTEST
 0x29

	)

96 
	#PTEST
 0x2A

	)

97 
	#AGCTEST
 0x2B

	)

98 
	#TEST2
 0x2C

	)

99 
	#TEST1
 0x2D

	)

100 
	#TEST0
 0x2E

	)

103 
	#PARTNUM
 0x30

	)

104 
	#VERSION
 0x31

	)

105 
	#FREQEST
 0x32

	)

106 
	#LQI
 0x33

	)

107 
	#RSSI
 0x34

	)

108 
	#MARCSTATE
 0x35

	)

109 
	#WORTIME1
 0x36

	)

110 
	#WORTIME0
 0x37

	)

111 
	#PKTSTATUS
 0x38

	)

112 
	#VCO_VC_DAC
 0x39

	)

113 
	#TXBYTES
 0x3A

	)

114 
	#RXBYTES
 0x3B

	)

117 
	#PATABLE
 0x3E

	)

120 
	#SRES
 0x30

	)

121 
	#SFSTXON
 0x31

	)

122 
	#SXOFF
 0x32

	)

123 
	#SCAL
 0x33

	)

124 
	#SRX
 0x34

	)

125 
	#STX
 0x35

	)

126 
	#SIDLE
 0x36

	)

127 
	#SRSVD
 0x37

	)

128 
	#SWOR
 0x38

	)

129 
	#SPWD
 0x39

	)

130 
	#SFRX
 0x3A

	)

131 
	#SFTX
 0x3B

	)

132 
	#SWORRST
 0x3C

	)

133 
	#SNOP
 0x3D

	)

140 
mrfiRadioI¡îÁ˚Inô
();

141 
mrfiRadioI¡îÁ˚WrôeReg
(
uöt8_t
 
addr
, uöt8_à
vÆue
);

142 
mrfiRadioI¡îÁ˚WrôeTxFifo
(
uöt8_t
 * 
pWrôeD©a
, uöt8_à
Àn
);

143 
uöt8_t
 
mrfiRadioI¡îÁ˚NewWrôeTxFifo
(uöt8_à* 
pWrôeD©a
, uöt8_à
Àn
, uöt8_à* 
pos
);

144 
mrfiRadioI¡îÁ˚RódRxFifo
(
uöt8_t
 * 
pRódD©a
, uöt8_à
Àn
);

146 
uöt8_t
 
mrfiRadioI¡îÁ˚CmdSåobe
(uöt8_à
addr
);

147 
uöt8_t
 
mrfiRadioI¡îÁ˚RódReg
(uöt8_à
addr
);

	@platform/cc430/radio/smartrf_CC430.h

9 #i‚de‡
SMARTRF_CC430_H


10 
	#SMARTRF_CC430_H


	)

12 
	#SMARTRF_RADIO_CC430


	)

14 
	#SMARTRF_SETTING_FSCTRL1
 0x0C

	)

15 
	#SMARTRF_SETTING_FSCTRL0
 0x00

	)

16 
	#SMARTRF_SETTING_FREQ2
 0x22

	)

17 
	#SMARTRF_SETTING_FREQ1
 0xB1

	)

18 
	#SMARTRF_SETTING_FREQ0
 0x3B

	)

19 
	#SMARTRF_SETTING_MDMCFG4
 0x2D

	)

20 
	#SMARTRF_SETTING_MDMCFG3
 0x3B

	)

21 
	#SMARTRF_SETTING_MDMCFG2
 0x13

	)

22 
	#SMARTRF_SETTING_MDMCFG1
 0x22

	)

23 
	#SMARTRF_SETTING_MDMCFG0
 0xF8

	)

24 
	#SMARTRF_SETTING_CHANNR
 0x14

	)

25 
	#SMARTRF_SETTING_DEVIATN
 0x62

	)

26 
	#SMARTRF_SETTING_FREND1
 0xB6

	)

27 
	#SMARTRF_SETTING_FREND0
 0x10

	)

28 
	#SMARTRF_SETTING_MCSM0
 0x18

	)

29 
	#SMARTRF_SETTING_FOCCFG
 0x1D

	)

30 
	#SMARTRF_SETTING_BSCFG
 0x1C

	)

31 
	#SMARTRF_SETTING_AGCCTRL2
 0xC7

	)

32 
	#SMARTRF_SETTING_AGCCTRL1
 0x00

	)

33 
	#SMARTRF_SETTING_AGCCTRL0
 0xB0

	)

34 
	#SMARTRF_SETTING_FSCAL3
 0xEA

	)

35 
	#SMARTRF_SETTING_FSCAL2
 0x2A

	)

36 
	#SMARTRF_SETTING_FSCAL1
 0x00

	)

37 
	#SMARTRF_SETTING_FSCAL0
 0x1F

	)

38 
	#SMARTRF_SETTING_FSTEST
 0x59

	)

39 
	#SMARTRF_SETTING_TEST2
 0x88

	)

40 
	#SMARTRF_SETTING_TEST1
 0x31

	)

41 
	#SMARTRF_SETTING_TEST0
 0x09

	)

42 
	#SMARTRF_SETTING_FIFOTHR
 0x07

	)

43 
	#SMARTRF_SETTING_IOCFG2
 0x29

	)

44 
	#SMARTRF_SETTING_IOCFG0
 0x06

	)

45 
	#SMARTRF_SETTING_PKTCTRL1
 0x04

	)

46 
	#SMARTRF_SETTING_PKTCTRL0
 0x05

	)

47 
	#SMARTRF_SETTING_ADDR
 0x00

	)

48 
	#SMARTRF_SETTING_PKTLEN
 0xFF

	)

	@platform/cc430f6147.h

23 #i‚de‡
__CC430F6147


24 
	#__CC430F6147


	)

26 
	#__MSP430_HEADER_VERSION__
 1058

	)

28 #ifde‡
__˝lu•lus


38 
	#SFR_8BIT
(
addªss
Ëvﬁ©ûê
	)
address

39 
	#SFR_16BIT
(
addªss
Ëvﬁ©ûê
	)
address

41 (* 
__SFR_FARPTR
)();

42 
	#SFR_20BIT
(
addªss
Ë
__SFR_FARPTR
 
	)
address

43 
	#SFR_32BIT
(
addªss
Ëvﬁ©ûê
	)
address

51 
	#BIT0
 (0x0001)

	)

52 
	#BIT1
 (0x0002)

	)

53 
	#BIT2
 (0x0004)

	)

54 
	#BIT3
 (0x0008)

	)

55 
	#BIT4
 (0x0010)

	)

56 
	#BIT5
 (0x0020)

	)

57 
	#BIT6
 (0x0040)

	)

58 
	#BIT7
 (0x0080)

	)

59 
	#BIT8
 (0x0100)

	)

60 
	#BIT9
 (0x0200)

	)

61 
	#BITA
 (0x0400)

	)

62 
	#BITB
 (0x0800)

	)

63 
	#BITC
 (0x1000)

	)

64 
	#BITD
 (0x2000)

	)

65 
	#BITE
 (0x4000)

	)

66 
	#BITF
 (0x8000)

	)

72 
	#C
 (0x0001)

	)

73 
	#Z
 (0x0002)

	)

74 
	#N
 (0x0004)

	)

75 
	#V
 (0x0100)

	)

76 
	#GIE
 (0x0008)

	)

77 
	#CPUOFF
 (0x0010)

	)

78 
	#OSCOFF
 (0x0020)

	)

79 
	#SCG0
 (0x0040)

	)

80 
	#SCG1
 (0x0080)

	)

84 #ifde‡
__ASM_HEADER__


85 
	#LPM0
 (
CPUOFF
)

	)

86 
	#LPM1
 (
SCG0
+
CPUOFF
)

	)

87 
	#LPM2
 (
SCG1
+
CPUOFF
)

	)

88 
	#LPM3
 (
SCG1
+
SCG0
+
CPUOFF
)

	)

89 
	#LPM4
 (
SCG1
+
SCG0
+
OSCOFF
+
CPUOFF
)

	)

93 
	#LPM0_bôs
 (
CPUOFF
)

	)

94 
	#LPM1_bôs
 (
SCG0
+
CPUOFF
)

	)

95 
	#LPM2_bôs
 (
SCG1
+
CPUOFF
)

	)

96 
	#LPM3_bôs
 (
SCG1
+
SCG0
+
CPUOFF
)

	)

97 
	#LPM4_bôs
 (
SCG1
+
SCG0
+
OSCOFF
+
CPUOFF
)

	)

99 
	~"ö430.h
"

101 
	#LPM0
 
	`_bis_SR_ªgi°î
(
LPM0_bôs
Ë

	)

102 
	#LPM0_EXIT
 
	`_bic_SR_ªgi°î_⁄_exô
(
LPM0_bôs
Ë

	)

103 
	#LPM1
 
	`_bis_SR_ªgi°î
(
LPM1_bôs
Ë

	)

104 
	#LPM1_EXIT
 
	`_bic_SR_ªgi°î_⁄_exô
(
LPM1_bôs
Ë

	)

105 
	#LPM2
 
	`_bis_SR_ªgi°î
(
LPM2_bôs
Ë

	)

106 
	#LPM2_EXIT
 
	`_bic_SR_ªgi°î_⁄_exô
(
LPM2_bôs
Ë

	)

107 
	#LPM3
 
	`_bis_SR_ªgi°î
(
LPM3_bôs
Ë

	)

108 
	#LPM3_EXIT
 
	`_bic_SR_ªgi°î_⁄_exô
(
LPM3_bôs
Ë

	)

109 
	#LPM4
 
	`_bis_SR_ªgi°î
(
LPM4_bôs
Ë

	)

110 
	#LPM4_EXIT
 
	`_bic_SR_ªgi°î_⁄_exô
(
LPM4_bôs
Ë

	)

116 
	#__MSP430_HAS_MSP430XV2_CPU__


	)

125 
	#__MSP430_HAS_ADC10_A__


	)

126 
	#__MSP430_BASEADDRESS_ADC10_A__
 0x0740

	)

128 
SFR_16BIT
(
ADC10CTL0
);

129 
SFR_8BIT
(
ADC10CTL0_L
);

130 
SFR_8BIT
(
ADC10CTL0_H
);

131 
SFR_16BIT
(
ADC10CTL1
);

132 
SFR_8BIT
(
ADC10CTL1_L
);

133 
SFR_8BIT
(
ADC10CTL1_H
);

134 
SFR_16BIT
(
ADC10CTL2
);

135 
SFR_8BIT
(
ADC10CTL2_L
);

136 
SFR_8BIT
(
ADC10CTL2_H
);

137 
SFR_16BIT
(
ADC10LO
);

138 
SFR_8BIT
(
ADC10LO_L
);

139 
SFR_8BIT
(
ADC10LO_H
);

140 
SFR_16BIT
(
ADC10HI
);

141 
SFR_8BIT
(
ADC10HI_L
);

142 
SFR_8BIT
(
ADC10HI_H
);

143 
SFR_16BIT
(
ADC10MCTL0
);

144 
SFR_8BIT
(
ADC10MCTL0_L
);

145 
SFR_8BIT
(
ADC10MCTL0_H
);

146 
SFR_16BIT
(
ADC10MEM0
);

147 
SFR_8BIT
(
ADC10MEM0_L
);

148 
SFR_8BIT
(
ADC10MEM0_H
);

149 
SFR_16BIT
(
ADC10IE
);

150 
SFR_8BIT
(
ADC10IE_L
);

151 
SFR_8BIT
(
ADC10IE_H
);

152 
SFR_16BIT
(
ADC10IFG
);

153 
SFR_8BIT
(
ADC10IFG_L
);

154 
SFR_8BIT
(
ADC10IFG_H
);

155 
SFR_16BIT
(
ADC10IV
);

156 
SFR_8BIT
(
ADC10IV_L
);

157 
SFR_8BIT
(
ADC10IV_H
);

160 
	#ADC10SC
 (0x0001Ë

	)

161 
	#ADC10ENC
 (0x0002Ë

	)

162 
	#ADC10ON
 (0x0010Ë

	)

163 
	#ADC10MSC
 (0x0080Ë

	)

164 
	#ADC10SHT0
 (0x0100Ë

	)

165 
	#ADC10SHT1
 (0x0200Ë

	)

166 
	#ADC10SHT2
 (0x0400Ë

	)

167 
	#ADC10SHT3
 (0x0800Ë

	)

170 
	#ADC10SC_L
 (0x0001Ë

	)

171 
	#ADC10ENC_L
 (0x0002Ë

	)

172 
	#ADC10ON_L
 (0x0010Ë

	)

173 
	#ADC10MSC_L
 (0x0080Ë

	)

176 
	#ADC10SHT0_H
 (0x0001Ë

	)

177 
	#ADC10SHT1_H
 (0x0002Ë

	)

178 
	#ADC10SHT2_H
 (0x0004Ë

	)

179 
	#ADC10SHT3_H
 (0x0008Ë

	)

181 
	#ADC10SHT_0
 (0*0x100uË

	)

182 
	#ADC10SHT_1
 (1*0x100uË

	)

183 
	#ADC10SHT_2
 (2*0x100uË

	)

184 
	#ADC10SHT_3
 (3*0x100uË

	)

185 
	#ADC10SHT_4
 (4*0x100uË

	)

186 
	#ADC10SHT_5
 (5*0x100uË

	)

187 
	#ADC10SHT_6
 (6*0x100uË

	)

188 
	#ADC10SHT_7
 (7*0x100uË

	)

189 
	#ADC10SHT_8
 (8*0x100uË

	)

190 
	#ADC10SHT_9
 (9*0x100uË

	)

191 
	#ADC10SHT_10
 (10*0x100uË

	)

192 
	#ADC10SHT_11
 (11*0x100uË

	)

193 
	#ADC10SHT_12
 (12*0x100uË

	)

194 
	#ADC10SHT_13
 (13*0x100uË

	)

195 
	#ADC10SHT_14
 (14*0x100uË

	)

196 
	#ADC10SHT_15
 (15*0x100uË

	)

199 
	#ADC10BUSY
 (0x0001Ë

	)

200 
	#ADC10CONSEQ0
 (0x0002Ë

	)

201 
	#ADC10CONSEQ1
 (0x0004Ë

	)

202 
	#ADC10SSEL0
 (0x0008Ë

	)

203 
	#ADC10SSEL1
 (0x0010Ë

	)

204 
	#ADC10DIV0
 (0x0020Ë

	)

205 
	#ADC10DIV1
 (0x0040Ë

	)

206 
	#ADC10DIV2
 (0x0080Ë

	)

207 
	#ADC10ISSH
 (0x0100Ë

	)

208 
	#ADC10SHP
 (0x0200Ë

	)

209 
	#ADC10SHS0
 (0x0400Ë

	)

210 
	#ADC10SHS1
 (0x0800Ë

	)

213 
	#ADC10BUSY_L
 (0x0001Ë

	)

214 
	#ADC10CONSEQ0_L
 (0x0002Ë

	)

215 
	#ADC10CONSEQ1_L
 (0x0004Ë

	)

216 
	#ADC10SSEL0_L
 (0x0008Ë

	)

217 
	#ADC10SSEL1_L
 (0x0010Ë

	)

218 
	#ADC10DIV0_L
 (0x0020Ë

	)

219 
	#ADC10DIV1_L
 (0x0040Ë

	)

220 
	#ADC10DIV2_L
 (0x0080Ë

	)

223 
	#ADC10ISSH_H
 (0x0001Ë

	)

224 
	#ADC10SHP_H
 (0x0002Ë

	)

225 
	#ADC10SHS0_H
 (0x0004Ë

	)

226 
	#ADC10SHS1_H
 (0x0008Ë

	)

228 
	#ADC10CONSEQ_0
 (0*2uË

	)

229 
	#ADC10CONSEQ_1
 (1*2uË

	)

230 
	#ADC10CONSEQ_2
 (2*2uË

	)

231 
	#ADC10CONSEQ_3
 (3*2uË

	)

233 
	#ADC10SSEL_0
 (0*8uË

	)

234 
	#ADC10SSEL_1
 (1*8uË

	)

235 
	#ADC10SSEL_2
 (2*8uË

	)

236 
	#ADC10SSEL_3
 (3*8uË

	)

238 
	#ADC10DIV_0
 (0*0x20uË

	)

239 
	#ADC10DIV_1
 (1*0x20uË

	)

240 
	#ADC10DIV_2
 (2*0x20uË

	)

241 
	#ADC10DIV_3
 (3*0x20uË

	)

242 
	#ADC10DIV_4
 (4*0x20uË

	)

243 
	#ADC10DIV_5
 (5*0x20uË

	)

244 
	#ADC10DIV_6
 (6*0x20uË

	)

245 
	#ADC10DIV_7
 (7*0x20uË

	)

247 
	#ADC10SHS_0
 (0*0x400uË

	)

248 
	#ADC10SHS_1
 (1*0x400uË

	)

249 
	#ADC10SHS_2
 (2*0x400uË

	)

250 
	#ADC10SHS_3
 (3*0x400uË

	)

253 
	#ADC10REFBURST
 (0x0001Ë

	)

254 
	#ADC10SR
 (0x0004Ë

	)

255 
	#ADC10DF
 (0x0008Ë

	)

256 
	#ADC10RES
 (0x0010Ë

	)

257 
	#ADC10PDIV0
 (0x0100Ë

	)

258 
	#ADC10PDIV1
 (0x0200Ë

	)

261 
	#ADC10REFBURST_L
 (0x0001Ë

	)

262 
	#ADC10SR_L
 (0x0004Ë

	)

263 
	#ADC10DF_L
 (0x0008Ë

	)

264 
	#ADC10RES_L
 (0x0010Ë

	)

267 
	#ADC10PDIV0_H
 (0x0001Ë

	)

268 
	#ADC10PDIV1_H
 (0x0002Ë

	)

270 
	#ADC10PDIV_0
 (0x0000Ë

	)

271 
	#ADC10PDIV_1
 (0x0100Ë

	)

272 
	#ADC10PDIV_2
 (0x0200Ë

	)

273 
	#ADC10PDIV_3
 (0x0300Ë

	)

275 
	#ADC10PDIV__1
 (0x0000Ë

	)

276 
	#ADC10PDIV__4
 (0x0100Ë

	)

277 
	#ADC10PDIV__64
 (0x0200Ë

	)

280 
	#ADC10INCH0
 (0x0001Ë

	)

281 
	#ADC10INCH1
 (0x0002Ë

	)

282 
	#ADC10INCH2
 (0x0004Ë

	)

283 
	#ADC10INCH3
 (0x0008Ë

	)

284 
	#ADC10SREF0
 (0x0010Ë

	)

285 
	#ADC10SREF1
 (0x0020Ë

	)

286 
	#ADC10SREF2
 (0x0040Ë

	)

289 
	#ADC10INCH0_L
 (0x0001Ë

	)

290 
	#ADC10INCH1_L
 (0x0002Ë

	)

291 
	#ADC10INCH2_L
 (0x0004Ë

	)

292 
	#ADC10INCH3_L
 (0x0008Ë

	)

293 
	#ADC10SREF0_L
 (0x0010Ë

	)

294 
	#ADC10SREF1_L
 (0x0020Ë

	)

295 
	#ADC10SREF2_L
 (0x0040Ë

	)

299 
	#ADC10INCH_0
 (0Ë

	)

300 
	#ADC10INCH_1
 (1Ë

	)

301 
	#ADC10INCH_2
 (2Ë

	)

302 
	#ADC10INCH_3
 (3Ë

	)

303 
	#ADC10INCH_4
 (4Ë

	)

304 
	#ADC10INCH_5
 (5Ë

	)

305 
	#ADC10INCH_6
 (6Ë

	)

306 
	#ADC10INCH_7
 (7Ë

	)

307 
	#ADC10INCH_8
 (8Ë

	)

308 
	#ADC10INCH_9
 (9Ë

	)

309 
	#ADC10INCH_10
 (10Ë

	)

310 
	#ADC10INCH_11
 (11Ë

	)

311 
	#ADC10INCH_12
 (12Ë

	)

312 
	#ADC10INCH_13
 (13Ë

	)

313 
	#ADC10INCH_14
 (14Ë

	)

314 
	#ADC10INCH_15
 (15Ë

	)

316 
	#ADC10SREF_0
 (0*0x10uË

	)

317 
	#ADC10SREF_1
 (1*0x10uË

	)

318 
	#ADC10SREF_2
 (2*0x10uË

	)

319 
	#ADC10SREF_3
 (3*0x10uË

	)

320 
	#ADC10SREF_4
 (4*0x10uË

	)

321 
	#ADC10SREF_5
 (5*0x10uË

	)

322 
	#ADC10SREF_6
 (6*0x10uË

	)

323 
	#ADC10SREF_7
 (7*0x10uË

	)

326 
	#ADC10IE0
 (0x0001Ë

	)

327 
	#ADC10INIE
 (0x0002Ë

	)

328 
	#ADC10LOIE
 (0x0004Ë

	)

329 
	#ADC10HIIE
 (0x0008Ë

	)

330 
	#ADC10OVIE
 (0x0010Ë

	)

331 
	#ADC10TOVIE
 (0x0020Ë

	)

334 
	#ADC10IE0_L
 (0x0001Ë

	)

335 
	#ADC10INIE_L
 (0x0002Ë

	)

336 
	#ADC10LOIE_L
 (0x0004Ë

	)

337 
	#ADC10HIIE_L
 (0x0008Ë

	)

338 
	#ADC10OVIE_L
 (0x0010Ë

	)

339 
	#ADC10TOVIE_L
 (0x0020Ë

	)

344 
	#ADC10IFG0
 (0x0001Ë

	)

345 
	#ADC10INIFG
 (0x0002Ë

	)

346 
	#ADC10LOIFG
 (0x0004Ë

	)

347 
	#ADC10HIIFG
 (0x0008Ë

	)

348 
	#ADC10OVIFG
 (0x0010Ë

	)

349 
	#ADC10TOVIFG
 (0x0020Ë

	)

352 
	#ADC10IFG0_L
 (0x0001Ë

	)

353 
	#ADC10INIFG_L
 (0x0002Ë

	)

354 
	#ADC10LOIFG_L
 (0x0004Ë

	)

355 
	#ADC10HIIFG_L
 (0x0008Ë

	)

356 
	#ADC10OVIFG_L
 (0x0010Ë

	)

357 
	#ADC10TOVIFG_L
 (0x0020Ë

	)

362 
	#ADC10IV_NONE
 (0x0000Ë

	)

363 
	#ADC10IV_ADC10OVIFG
 (0x0002Ë

	)

364 
	#ADC10IV_ADC10TOVIFG
 (0x0004Ë

	)

365 
	#ADC10IV_ADC10HIIFG
 (0x0006Ë

	)

366 
	#ADC10IV_ADC10LOIFG
 (0x0008Ë

	)

367 
	#ADC10IV_ADC10INIFG
 (0x000AË

	)

368 
	#ADC10IV_ADC10IFG
 (0x000CË

	)

373 
	#__MSP430_HAS_AES__


	)

374 
	#__MSP430_BASEADDRESS_AES__
 0x09C0

	)

376 
SFR_16BIT
(
AESACTL0
);

377 
SFR_8BIT
(
AESACTL0_L
);

378 
SFR_8BIT
(
AESACTL0_H
);

379 
SFR_16BIT
(
AESASTAT
);

380 
SFR_8BIT
(
AESASTAT_L
);

381 
SFR_8BIT
(
AESASTAT_H
);

382 
SFR_16BIT
(
AESAKEY
);

383 
SFR_8BIT
(
AESAKEY_L
);

384 
SFR_8BIT
(
AESAKEY_H
);

385 
SFR_16BIT
(
AESADIN
);

386 
SFR_8BIT
(
AESADIN_L
);

387 
SFR_8BIT
(
AESADIN_H
);

388 
SFR_16BIT
(
AESADOUT
);

389 
SFR_8BIT
(
AESADOUT_L
);

390 
SFR_8BIT
(
AESADOUT_H
);

393 
	#AESOP0
 (0x0001Ë

	)

394 
	#AESOP1
 (0x0002Ë

	)

395 
	#AESSWRST
 (0x0080Ë

	)

396 
	#AESRDYIFG
 (0x0100Ë

	)

397 
	#AESERRFG
 (0x0800Ë

	)

398 
	#AESRDYIE
 (0x1000Ë

	)

401 
	#AESOP0_L
 (0x0001Ë

	)

402 
	#AESOP1_L
 (0x0002Ë

	)

403 
	#AESSWRST_L
 (0x0080Ë

	)

406 
	#AESRDYIFG_H
 (0x0001Ë

	)

407 
	#AESERRFG_H
 (0x0008Ë

	)

408 
	#AESRDYIE_H
 (0x0010Ë

	)

410 
	#AESOP_0
 (0x0000Ë

	)

411 
	#AESOP_1
 (0x0001Ë

	)

412 
	#AESOP_2
 (0x0002Ë

	)

413 
	#AESOP_3
 (0x0003Ë

	)

416 
	#AESBUSY
 (0x0001Ë

	)

417 
	#AESKEYWR
 (0x0002Ë

	)

418 
	#AESDINWR
 (0x0004Ë

	)

419 
	#AESDOUTRD
 (0x0008Ë

	)

420 
	#AESKEYCNT0
 (0x0010Ë

	)

421 
	#AESKEYCNT1
 (0x0020Ë

	)

422 
	#AESKEYCNT2
 (0x0040Ë

	)

423 
	#AESKEYCNT3
 (0x0080Ë

	)

424 
	#AESDINCNT0
 (0x0100Ë

	)

425 
	#AESDINCNT1
 (0x0200Ë

	)

426 
	#AESDINCNT2
 (0x0400Ë

	)

427 
	#AESDINCNT3
 (0x0800Ë

	)

428 
	#AESDOUTCNT0
 (0x1000Ë

	)

429 
	#AESDOUTCNT1
 (0x2000Ë

	)

430 
	#AESDOUTCNT2
 (0x4000Ë

	)

431 
	#AESDOUTCNT3
 (0x8000Ë

	)

434 
	#AESBUSY_L
 (0x0001Ë

	)

435 
	#AESKEYWR_L
 (0x0002Ë

	)

436 
	#AESDINWR_L
 (0x0004Ë

	)

437 
	#AESDOUTRD_L
 (0x0008Ë

	)

438 
	#AESKEYCNT0_L
 (0x0010Ë

	)

439 
	#AESKEYCNT1_L
 (0x0020Ë

	)

440 
	#AESKEYCNT2_L
 (0x0040Ë

	)

441 
	#AESKEYCNT3_L
 (0x0080Ë

	)

444 
	#AESDINCNT0_H
 (0x0001Ë

	)

445 
	#AESDINCNT1_H
 (0x0002Ë

	)

446 
	#AESDINCNT2_H
 (0x0004Ë

	)

447 
	#AESDINCNT3_H
 (0x0008Ë

	)

448 
	#AESDOUTCNT0_H
 (0x0010Ë

	)

449 
	#AESDOUTCNT1_H
 (0x0020Ë

	)

450 
	#AESDOUTCNT2_H
 (0x0040Ë

	)

451 
	#AESDOUTCNT3_H
 (0x0080Ë

	)

456 
	#__MSP430_HAS_COMPB__


	)

457 
	#__MSP430_BASEADDRESS_COMPB__
 0x08C0

	)

459 
SFR_16BIT
(
CBCTL0
);

460 
SFR_8BIT
(
CBCTL0_L
);

461 
SFR_8BIT
(
CBCTL0_H
);

462 
SFR_16BIT
(
CBCTL1
);

463 
SFR_8BIT
(
CBCTL1_L
);

464 
SFR_8BIT
(
CBCTL1_H
);

465 
SFR_16BIT
(
CBCTL2
);

466 
SFR_8BIT
(
CBCTL2_L
);

467 
SFR_8BIT
(
CBCTL2_H
);

468 
SFR_16BIT
(
CBCTL3
);

469 
SFR_8BIT
(
CBCTL3_L
);

470 
SFR_8BIT
(
CBCTL3_H
);

471 
SFR_16BIT
(
CBINT
);

472 
SFR_8BIT
(
CBINT_L
);

473 
SFR_8BIT
(
CBINT_H
);

474 
SFR_16BIT
(
CBIV
);

477 
	#CBIPSEL0
 (0x0001Ë

	)

478 
	#CBIPSEL1
 (0x0002Ë

	)

479 
	#CBIPSEL2
 (0x0004Ë

	)

480 
	#CBIPSEL3
 (0x0008Ë

	)

484 
	#CBIPEN
 (0x0080Ë

	)

485 
	#CBIMSEL0
 (0x0100Ë

	)

486 
	#CBIMSEL1
 (0x0200Ë

	)

487 
	#CBIMSEL2
 (0x0400Ë

	)

488 
	#CBIMSEL3
 (0x0800Ë

	)

492 
	#CBIMEN
 (0x8000Ë

	)

495 
	#CBIPSEL0_L
 (0x0001Ë

	)

496 
	#CBIPSEL1_L
 (0x0002Ë

	)

497 
	#CBIPSEL2_L
 (0x0004Ë

	)

498 
	#CBIPSEL3_L
 (0x0008Ë

	)

502 
	#CBIPEN_L
 (0x0080Ë

	)

511 
	#CBIMSEL0_H
 (0x0001Ë

	)

512 
	#CBIMSEL1_H
 (0x0002Ë

	)

513 
	#CBIMSEL2_H
 (0x0004Ë

	)

514 
	#CBIMSEL3_H
 (0x0008Ë

	)

518 
	#CBIMEN_H
 (0x0080Ë

	)

520 
	#CBIPSEL_0
 (0x0000Ë

	)

521 
	#CBIPSEL_1
 (0x0001Ë

	)

522 
	#CBIPSEL_2
 (0x0002Ë

	)

523 
	#CBIPSEL_3
 (0x0003Ë

	)

524 
	#CBIPSEL_4
 (0x0004Ë

	)

525 
	#CBIPSEL_5
 (0x0005Ë

	)

526 
	#CBIPSEL_6
 (0x0006Ë

	)

527 
	#CBIPSEL_7
 (0x0007Ë

	)

528 
	#CBIPSEL_8
 (0x0008Ë

	)

529 
	#CBIPSEL_9
 (0x0009Ë

	)

530 
	#CBIPSEL_10
 (0x000AË

	)

531 
	#CBIPSEL_11
 (0x000BË

	)

532 
	#CBIPSEL_12
 (0x000CË

	)

533 
	#CBIPSEL_13
 (0x000DË

	)

534 
	#CBIPSEL_14
 (0x000EË

	)

535 
	#CBIPSEL_15
 (0x000FË

	)

537 
	#CBIMSEL_0
 (0x0000Ë

	)

538 
	#CBIMSEL_1
 (0x0100Ë

	)

539 
	#CBIMSEL_2
 (0x0200Ë

	)

540 
	#CBIMSEL_3
 (0x0300Ë

	)

541 
	#CBIMSEL_4
 (0x0400Ë

	)

542 
	#CBIMSEL_5
 (0x0500Ë

	)

543 
	#CBIMSEL_6
 (0x0600Ë

	)

544 
	#CBIMSEL_7
 (0x0700Ë

	)

545 
	#CBIMSEL_8
 (0x0800Ë

	)

546 
	#CBIMSEL_9
 (0x0900Ë

	)

547 
	#CBIMSEL_10
 (0x0A00Ë

	)

548 
	#CBIMSEL_11
 (0x0B00Ë

	)

549 
	#CBIMSEL_12
 (0x0C00Ë

	)

550 
	#CBIMSEL_13
 (0x0D00Ë

	)

551 
	#CBIMSEL_14
 (0x0E00Ë

	)

552 
	#CBIMSEL_15
 (0x0F00Ë

	)

555 
	#CBOUT
 (0x0001Ë

	)

556 
	#CBOUTPOL
 (0x0002Ë

	)

557 
	#CBF
 (0x0004Ë

	)

558 
	#CBIES
 (0x0008Ë

	)

559 
	#CBSHORT
 (0x0010Ë

	)

560 
	#CBEX
 (0x0020Ë

	)

561 
	#CBFDLY0
 (0x0040Ë

	)

562 
	#CBFDLY1
 (0x0080Ë

	)

563 
	#CBPWRMD0
 (0x0100Ë

	)

564 
	#CBPWRMD1
 (0x0200Ë

	)

565 
	#CBON
 (0x0400Ë

	)

566 
	#CBMRVL
 (0x0800Ë

	)

567 
	#CBMRVS
 (0x1000Ë

	)

573 
	#CBOUT_L
 (0x0001Ë

	)

574 
	#CBOUTPOL_L
 (0x0002Ë

	)

575 
	#CBF_L
 (0x0004Ë

	)

576 
	#CBIES_L
 (0x0008Ë

	)

577 
	#CBSHORT_L
 (0x0010Ë

	)

578 
	#CBEX_L
 (0x0020Ë

	)

579 
	#CBFDLY0_L
 (0x0040Ë

	)

580 
	#CBFDLY1_L
 (0x0080Ë

	)

586 
	#CBPWRMD0_H
 (0x0001Ë

	)

587 
	#CBPWRMD1_H
 (0x0002Ë

	)

588 
	#CBON_H
 (0x0004Ë

	)

589 
	#CBMRVL_H
 (0x0008Ë

	)

590 
	#CBMRVS_H
 (0x0010Ë

	)

595 
	#CBFDLY_0
 (0x0000Ë

	)

596 
	#CBFDLY_1
 (0x0040Ë

	)

597 
	#CBFDLY_2
 (0x0080Ë

	)

598 
	#CBFDLY_3
 (0x00C0Ë

	)

600 
	#CBPWRMD_0
 (0x0000Ë

	)

601 
	#CBPWRMD_1
 (0x0100Ë

	)

602 
	#CBPWRMD_2
 (0x0200Ë

	)

603 
	#CBPWRMD_3
 (0x0300Ë

	)

606 
	#CBREF00
 (0x0001Ë

	)

607 
	#CBREF01
 (0x0002Ë

	)

608 
	#CBREF02
 (0x0004Ë

	)

609 
	#CBREF03
 (0x0008Ë

	)

610 
	#CBREF04
 (0x0010Ë

	)

611 
	#CBRSEL
 (0x0020Ë

	)

612 
	#CBRS0
 (0x0040Ë

	)

613 
	#CBRS1
 (0x0080Ë

	)

614 
	#CBREF10
 (0x0100Ë

	)

615 
	#CBREF11
 (0x0200Ë

	)

616 
	#CBREF12
 (0x0400Ë

	)

617 
	#CBREF13
 (0x0800Ë

	)

618 
	#CBREF14
 (0x1000Ë

	)

619 
	#CBREFL0
 (0x2000Ë

	)

620 
	#CBREFL1
 (0x4000Ë

	)

621 
	#CBREFACC
 (0x8000Ë

	)

624 
	#CBREF00_L
 (0x0001Ë

	)

625 
	#CBREF01_L
 (0x0002Ë

	)

626 
	#CBREF02_L
 (0x0004Ë

	)

627 
	#CBREF03_L
 (0x0008Ë

	)

628 
	#CBREF04_L
 (0x0010Ë

	)

629 
	#CBRSEL_L
 (0x0020Ë

	)

630 
	#CBRS0_L
 (0x0040Ë

	)

631 
	#CBRS1_L
 (0x0080Ë

	)

634 
	#CBREF10_H
 (0x0001Ë

	)

635 
	#CBREF11_H
 (0x0002Ë

	)

636 
	#CBREF12_H
 (0x0004Ë

	)

637 
	#CBREF13_H
 (0x0008Ë

	)

638 
	#CBREF14_H
 (0x0010Ë

	)

639 
	#CBREFL0_H
 (0x0020Ë

	)

640 
	#CBREFL1_H
 (0x0040Ë

	)

641 
	#CBREFACC_H
 (0x0080Ë

	)

643 
	#CBREF0_0
 (0x0000Ë

	)

644 
	#CBREF0_1
 (0x0001Ë

	)

645 
	#CBREF0_2
 (0x0002Ë

	)

646 
	#CBREF0_3
 (0x0003Ë

	)

647 
	#CBREF0_4
 (0x0004Ë

	)

648 
	#CBREF0_5
 (0x0005Ë

	)

649 
	#CBREF0_6
 (0x0006Ë

	)

650 
	#CBREF0_7
 (0x0007Ë

	)

651 
	#CBREF0_8
 (0x0008Ë

	)

652 
	#CBREF0_9
 (0x0009Ë

	)

653 
	#CBREF0_10
 (0x000AË

	)

654 
	#CBREF0_11
 (0x000BË

	)

655 
	#CBREF0_12
 (0x000CË

	)

656 
	#CBREF0_13
 (0x000DË

	)

657 
	#CBREF0_14
 (0x000EË

	)

658 
	#CBREF0_15
 (0x000FË

	)

659 
	#CBREF0_16
 (0x0010Ë

	)

660 
	#CBREF0_17
 (0x0011Ë

	)

661 
	#CBREF0_18
 (0x0012Ë

	)

662 
	#CBREF0_19
 (0x0013Ë

	)

663 
	#CBREF0_20
 (0x0014Ë

	)

664 
	#CBREF0_21
 (0x0015Ë

	)

665 
	#CBREF0_22
 (0x0016Ë

	)

666 
	#CBREF0_23
 (0x0017Ë

	)

667 
	#CBREF0_24
 (0x0018Ë

	)

668 
	#CBREF0_25
 (0x0019Ë

	)

669 
	#CBREF0_26
 (0x001AË

	)

670 
	#CBREF0_27
 (0x001BË

	)

671 
	#CBREF0_28
 (0x001CË

	)

672 
	#CBREF0_29
 (0x001DË

	)

673 
	#CBREF0_30
 (0x001EË

	)

674 
	#CBREF0_31
 (0x001FË

	)

676 
	#CBRS_0
 (0x0000Ë

	)

677 
	#CBRS_1
 (0x0040Ë

	)

678 
	#CBRS_2
 (0x0080Ë

	)

679 
	#CBRS_3
 (0x00C0Ë

	)

681 
	#CBREF1_0
 (0x0000Ë

	)

682 
	#CBREF1_1
 (0x0100Ë

	)

683 
	#CBREF1_2
 (0x0200Ë

	)

684 
	#CBREF1_3
 (0x0300Ë

	)

685 
	#CBREF1_4
 (0x0400Ë

	)

686 
	#CBREF1_5
 (0x0500Ë

	)

687 
	#CBREF1_6
 (0x0600Ë

	)

688 
	#CBREF1_7
 (0x0700Ë

	)

689 
	#CBREF1_8
 (0x0800Ë

	)

690 
	#CBREF1_9
 (0x0900Ë

	)

691 
	#CBREF1_10
 (0x0A00Ë

	)

692 
	#CBREF1_11
 (0x0B00Ë

	)

693 
	#CBREF1_12
 (0x0C00Ë

	)

694 
	#CBREF1_13
 (0x0D00Ë

	)

695 
	#CBREF1_14
 (0x0E00Ë

	)

696 
	#CBREF1_15
 (0x0F00Ë

	)

697 
	#CBREF1_16
 (0x1000Ë

	)

698 
	#CBREF1_17
 (0x1100Ë

	)

699 
	#CBREF1_18
 (0x1200Ë

	)

700 
	#CBREF1_19
 (0x1300Ë

	)

701 
	#CBREF1_20
 (0x1400Ë

	)

702 
	#CBREF1_21
 (0x1500Ë

	)

703 
	#CBREF1_22
 (0x1600Ë

	)

704 
	#CBREF1_23
 (0x1700Ë

	)

705 
	#CBREF1_24
 (0x1800Ë

	)

706 
	#CBREF1_25
 (0x1900Ë

	)

707 
	#CBREF1_26
 (0x1A00Ë

	)

708 
	#CBREF1_27
 (0x1B00Ë

	)

709 
	#CBREF1_28
 (0x1C00Ë

	)

710 
	#CBREF1_29
 (0x1D00Ë

	)

711 
	#CBREF1_30
 (0x1E00Ë

	)

712 
	#CBREF1_31
 (0x1F00Ë

	)

714 
	#CBREFL_0
 (0x0000Ë

	)

715 
	#CBREFL_1
 (0x2000Ë

	)

716 
	#CBREFL_2
 (0x4000Ë

	)

717 
	#CBREFL_3
 (0x6000Ë

	)

719 
	#CBPD0
 (0x0001Ë

	)

720 
	#CBPD1
 (0x0002Ë

	)

721 
	#CBPD2
 (0x0004Ë

	)

722 
	#CBPD3
 (0x0008Ë

	)

723 
	#CBPD4
 (0x0010Ë

	)

724 
	#CBPD5
 (0x0020Ë

	)

725 
	#CBPD6
 (0x0040Ë

	)

726 
	#CBPD7
 (0x0080Ë

	)

727 
	#CBPD8
 (0x0100Ë

	)

728 
	#CBPD9
 (0x0200Ë

	)

729 
	#CBPD10
 (0x0400Ë

	)

730 
	#CBPD11
 (0x0800Ë

	)

731 
	#CBPD12
 (0x1000Ë

	)

732 
	#CBPD13
 (0x2000Ë

	)

733 
	#CBPD14
 (0x4000Ë

	)

734 
	#CBPD15
 (0x8000Ë

	)

736 
	#CBPD0_L
 (0x0001Ë

	)

737 
	#CBPD1_L
 (0x0002Ë

	)

738 
	#CBPD2_L
 (0x0004Ë

	)

739 
	#CBPD3_L
 (0x0008Ë

	)

740 
	#CBPD4_L
 (0x0010Ë

	)

741 
	#CBPD5_L
 (0x0020Ë

	)

742 
	#CBPD6_L
 (0x0040Ë

	)

743 
	#CBPD7_L
 (0x0080Ë

	)

745 
	#CBPD8_H
 (0x0001Ë

	)

746 
	#CBPD9_H
 (0x0002Ë

	)

747 
	#CBPD10_H
 (0x0004Ë

	)

748 
	#CBPD11_H
 (0x0008Ë

	)

749 
	#CBPD12_H
 (0x0010Ë

	)

750 
	#CBPD13_H
 (0x0020Ë

	)

751 
	#CBPD14_H
 (0x0040Ë

	)

752 
	#CBPD15_H
 (0x0080Ë

	)

755 
	#CBIFG
 (0x0001Ë

	)

756 
	#CBIIFG
 (0x0002Ë

	)

763 
	#CBIE
 (0x0100Ë

	)

764 
	#CBIIE
 (0x0200Ë

	)

773 
	#CBIFG_L
 (0x0001Ë

	)

774 
	#CBIIFG_L
 (0x0002Ë

	)

795 
	#CBIE_H
 (0x0001Ë

	)

796 
	#CBIIE_H
 (0x0002Ë

	)

805 
	#CBIV_NONE
 (0x0000Ë

	)

806 
	#CBIV_CBIFG
 (0x0002Ë

	)

807 
	#CBIV_CBIIFG
 (0x0004Ë

	)

812 
	#__MSP430_HAS_CC1101__


	)

813 
	#__MSP430_BASEADDRESS_CC1101__
 0x0F00

	)

815 
SFR_16BIT
(
RF1AIFCTL0
);

816 
SFR_8BIT
(
RF1AIFCTL0_L
);

817 
SFR_8BIT
(
RF1AIFCTL0_H
);

818 
SFR_16BIT
(
RF1AIFCTL1
);

819 
SFR_8BIT
(
RF1AIFCTL1_L
);

820 
SFR_8BIT
(
RF1AIFCTL1_H
);

821 
	#RF1AIFIFG
 
RF1AIFCTL1_L


	)

822 
	#RF1AIFIE
 
RF1AIFCTL1_H


	)

823 
SFR_16BIT
(
RF1AIFCTL2
);

824 
SFR_8BIT
(
RF1AIFCTL2_L
);

825 
SFR_8BIT
(
RF1AIFCTL2_H
);

826 
SFR_16BIT
(
RF1AIFERR
);

827 
SFR_8BIT
(
RF1AIFERR_L
);

828 
SFR_8BIT
(
RF1AIFERR_H
);

829 
SFR_16BIT
(
RF1AIFERRV
);

830 
SFR_8BIT
(
RF1AIFERRV_L
);

831 
SFR_8BIT
(
RF1AIFERRV_H
);

832 
SFR_16BIT
(
RF1AIFIV
);

833 
SFR_8BIT
(
RF1AIFIV_L
);

834 
SFR_8BIT
(
RF1AIFIV_H
);

835 
SFR_16BIT
(
RF1AINSTRW
);

836 
SFR_8BIT
(
RF1AINSTRW_L
);

837 
SFR_8BIT
(
RF1AINSTRW_H
);

838 
	#RF1ADINB
 
RF1AINSTRW_L


	)

839 
	#RF1AINSTRB
 
RF1AINSTRW_H


	)

840 
SFR_16BIT
(
RF1AINSTR1W
);

841 
SFR_8BIT
(
RF1AINSTR1W_L
);

842 
SFR_8BIT
(
RF1AINSTR1W_H
);

843 
	#RF1AINSTR1B
 
RF1AINSTR1W_H


	)

844 
SFR_16BIT
(
RF1AINSTR2W
);

845 
SFR_8BIT
(
RF1AINSTR2W_L
);

846 
SFR_8BIT
(
RF1AINSTR2W_H
);

847 
	#RF1AINSTR2B
 
RF1AINSTR1W_H


	)

848 
SFR_16BIT
(
RF1ADINW
);

849 
SFR_8BIT
(
RF1ADINW_L
);

850 
SFR_8BIT
(
RF1ADINW_H
);

852 
SFR_16BIT
(
RF1ASTAT0W
);

853 
SFR_8BIT
(
RF1ASTAT0W_L
);

854 
SFR_8BIT
(
RF1ASTAT0W_H
);

855 
	#RF1ADOUT0B
 
RF1ASTAT0W_L


	)

856 
	#RF1ASTAT0B
 
RF1ASTAT0W_H


	)

857 
	#RF1ASTATW
 
RF1ASTAT0W


	)

858 
	#RF1ADOUTB
 
RF1ASTAT0W_L


	)

859 
	#RF1ASTATB
 
RF1ASTAT0W_H


	)

860 
SFR_16BIT
(
RF1ASTAT1W
);

861 
SFR_8BIT
(
RF1ASTAT1W_L
);

862 
SFR_8BIT
(
RF1ASTAT1W_H
);

863 
	#RF1ADOUT1B
 
RF1ASTAT1W_L


	)

864 
	#RF1ASTAT1B
 
RF1ASTAT1W_H


	)

865 
SFR_16BIT
(
RF1ASTAT2W
);

866 
SFR_8BIT
(
RF1ASTAT2W_L
);

867 
SFR_8BIT
(
RF1ASTAT2W_H
);

868 
	#RF1ADOUT2B
 
RF1ASTAT2W_L


	)

869 
	#RF1ASTAT2B
 
RF1ASTAT2W_H


	)

870 
SFR_16BIT
(
RF1ADOUT0W
);

871 
SFR_8BIT
(
RF1ADOUT0W_L
);

872 
SFR_8BIT
(
RF1ADOUT0W_H
);

873 
	#RF1ADOUTW
 
RF1ADOUT0W


	)

874 
	#RF1ADOUTW_L
 
RF1ADOUT0W_L


	)

875 
	#RF1ADOUTW_H
 
RF1ADOUT0W_H


	)

876 
SFR_16BIT
(
RF1ADOUT1W
);

877 
SFR_8BIT
(
RF1ADOUT1W_L
);

878 
SFR_8BIT
(
RF1ADOUT1W_H
);

879 
SFR_16BIT
(
RF1ADOUT2W
);

880 
SFR_8BIT
(
RF1ADOUT2W_L
);

881 
SFR_8BIT
(
RF1ADOUT2W_H
);

882 
SFR_16BIT
(
RF1AIN
);

883 
SFR_8BIT
(
RF1AIN_L
);

884 
SFR_8BIT
(
RF1AIN_H
);

885 
SFR_16BIT
(
RF1AIFG
);

886 
SFR_8BIT
(
RF1AIFG_L
);

887 
SFR_8BIT
(
RF1AIFG_H
);

888 
SFR_16BIT
(
RF1AIES
);

889 
SFR_8BIT
(
RF1AIES_L
);

890 
SFR_8BIT
(
RF1AIES_H
);

891 
SFR_16BIT
(
RF1AIE
);

892 
SFR_8BIT
(
RF1AIE_L
);

893 
SFR_8BIT
(
RF1AIE_H
);

894 
SFR_16BIT
(
RF1AIV
);

895 
SFR_8BIT
(
RF1AIV_L
);

896 
SFR_8BIT
(
RF1AIV_H
);

897 
SFR_16BIT
(
RF1ARXFIFO
);

898 
SFR_8BIT
(
RF1ARXFIFO_L
);

899 
SFR_8BIT
(
RF1ARXFIFO_H
);

900 
SFR_16BIT
(
RF1ATXFIFO
);

901 
SFR_8BIT
(
RF1ATXFIFO_L
);

902 
SFR_8BIT
(
RF1ATXFIFO_H
);

905 
	#RFFIFOEN
 (0x0001Ë

	)

906 
	#RFENDIAN
 (0x0002Ë

	)

909 
	#RFFIFOEN_L
 (0x0001Ë

	)

910 
	#RFENDIAN_L
 (0x0002Ë

	)

915 
	#RFRXIFG
 (0x0001Ë

	)

916 
	#RFTXIFG
 (0x0002Ë

	)

917 
	#RFERRIFG
 (0x0004Ë

	)

918 
	#RFINSTRIFG
 (0x0010Ë

	)

919 
	#RFDINIFG
 (0x0020Ë

	)

920 
	#RFSTATIFG
 (0x0040Ë

	)

921 
	#RFDOUTIFG
 (0x0080Ë

	)

922 
	#RFRXIE
 (0x0100Ë

	)

923 
	#RFTXIE
 (0x0200Ë

	)

924 
	#RFERRIE
 (0x0400Ë

	)

925 
	#RFINSTRIE
 (0x1000Ë

	)

926 
	#RFDINIE
 (0x2000Ë

	)

927 
	#RFSTATIE
 (0x4000Ë

	)

928 
	#RFDOUTIE
 (0x8000Ë

	)

931 
	#RFRXIFG_L
 (0x0001Ë

	)

932 
	#RFTXIFG_L
 (0x0002Ë

	)

933 
	#RFERRIFG_L
 (0x0004Ë

	)

934 
	#RFINSTRIFG_L
 (0x0010Ë

	)

935 
	#RFDINIFG_L
 (0x0020Ë

	)

936 
	#RFSTATIFG_L
 (0x0040Ë

	)

937 
	#RFDOUTIFG_L
 (0x0080Ë

	)

940 
	#RFRXIE_H
 (0x0001Ë

	)

941 
	#RFTXIE_H
 (0x0002Ë

	)

942 
	#RFERRIE_H
 (0x0004Ë

	)

943 
	#RFINSTRIE_H
 (0x0010Ë

	)

944 
	#RFDINIE_H
 (0x0020Ë

	)

945 
	#RFSTATIE_H
 (0x0040Ë

	)

946 
	#RFDOUTIE_H
 (0x0080Ë

	)

949 
	#LVERR
 (0x0001Ë

	)

950 
	#OPERR
 (0x0002Ë

	)

951 
	#OUTERR
 (0x0004Ë

	)

952 
	#OPOVERR
 (0x0008Ë

	)

955 
	#LVERR_L
 (0x0001Ë

	)

956 
	#OPERR_L
 (0x0002Ë

	)

957 
	#OUTERR_L
 (0x0004Ë

	)

958 
	#OPOVERR_L
 (0x0008Ë

	)

963 
	#RF1AIFERRV_NONE
 (0x0000Ë

	)

964 
	#RF1AIFERRV_LVERR
 (0x0002Ë

	)

965 
	#RF1AIFERRV_OPERR
 (0x0004Ë

	)

966 
	#RF1AIFERRV_OUTERR
 (0x0006Ë

	)

967 
	#RF1AIFERRV_OPOVERR
 (0x0008Ë

	)

970 
	#RF1AIFIV_NONE
 (0x0000Ë

	)

971 
	#RF1AIFIV_RFERRIFG
 (0x0002Ë

	)

972 
	#RF1AIFIV_RFDOUTIFG
 (0x0004Ë

	)

973 
	#RF1AIFIV_RFSTATIFG
 (0x0006Ë

	)

974 
	#RF1AIFIV_RFDINIFG
 (0x0008Ë

	)

975 
	#RF1AIFIV_RFINSTRIFG
 (0x000AË

	)

976 
	#RF1AIFIV_RFRXIFG
 (0x000CË

	)

977 
	#RF1AIFIV_RFTXIFG
 (0x000EË

	)

980 
	#RF1AIV_NONE
 (0x0000Ë

	)

981 
	#RF1AIV_RFIFG0
 (0x0002Ë

	)

982 
	#RF1AIV_RFIFG1
 (0x0004Ë

	)

983 
	#RF1AIV_RFIFG2
 (0x0006Ë

	)

984 
	#RF1AIV_RFIFG3
 (0x0008Ë

	)

985 
	#RF1AIV_RFIFG4
 (0x000AË

	)

986 
	#RF1AIV_RFIFG5
 (0x000CË

	)

987 
	#RF1AIV_RFIFG6
 (0x000EË

	)

988 
	#RF1AIV_RFIFG7
 (0x0010Ë

	)

989 
	#RF1AIV_RFIFG8
 (0x0012Ë

	)

990 
	#RF1AIV_RFIFG9
 (0x0014Ë

	)

991 
	#RF1AIV_RFIFG10
 (0x0016Ë

	)

992 
	#RF1AIV_RFIFG11
 (0x0018Ë

	)

993 
	#RF1AIV_RFIFG12
 (0x001AË

	)

994 
	#RF1AIV_RFIFG13
 (0x001CË

	)

995 
	#RF1AIV_RFIFG14
 (0x001EË

	)

996 
	#RF1AIV_RFIFG15
 (0x0020Ë

	)

999 
	#IOCFG2
 0x00

	)

1000 
	#IOCFG1
 0x01

	)

1001 
	#IOCFG0
 0x02

	)

1002 
	#FIFOTHR
 0x03

	)

1003 
	#SYNC1
 0x04

	)

1004 
	#SYNC0
 0x05

	)

1005 
	#PKTLEN
 0x06

	)

1006 
	#PKTCTRL1
 0x07

	)

1007 
	#PKTCTRL0
 0x08

	)

1008 
	#ADDR
 0x09

	)

1009 
	#CHANNR
 0x0A

	)

1010 
	#FSCTRL1
 0x0B

	)

1011 
	#FSCTRL0
 0x0C

	)

1012 
	#FREQ2
 0x0D

	)

1013 
	#FREQ1
 0x0E

	)

1014 
	#FREQ0
 0x0F

	)

1015 
	#MDMCFG4
 0x10

	)

1016 
	#MDMCFG3
 0x11

	)

1017 
	#MDMCFG2
 0x12

	)

1018 
	#MDMCFG1
 0x13

	)

1019 
	#MDMCFG0
 0x14

	)

1020 
	#DEVIATN
 0x15

	)

1021 
	#MCSM2
 0x16

	)

1022 
	#MCSM1
 0x17

	)

1023 
	#MCSM0
 0x18

	)

1024 
	#FOCCFG
 0x19

	)

1025 
	#BSCFG
 0x1A

	)

1026 
	#AGCCTRL2
 0x1B

	)

1027 
	#AGCCTRL1
 0x1C

	)

1028 
	#AGCCTRL0
 0x1D

	)

1029 
	#WOREVT1
 0x1E

	)

1030 
	#WOREVT0
 0x1F

	)

1031 
	#WORCTRL
 0x20

	)

1032 
	#FREND1
 0x21

	)

1033 
	#FREND0
 0x22

	)

1034 
	#FSCAL3
 0x23

	)

1035 
	#FSCAL2
 0x24

	)

1036 
	#FSCAL1
 0x25

	)

1037 
	#FSCAL0
 0x26

	)

1040 
	#FSTEST
 0x29

	)

1041 
	#PTEST
 0x2A

	)

1042 
	#AGCTEST
 0x2B

	)

1043 
	#TEST2
 0x2C

	)

1044 
	#TEST1
 0x2D

	)

1045 
	#TEST0
 0x2E

	)

1048 
	#PARTNUM
 0x30

	)

1049 
	#VERSION
 0x31

	)

1050 
	#FREQEST
 0x32

	)

1051 
	#LQI
 0x33

	)

1052 
	#RSSI
 0x34

	)

1053 
	#MARCSTATE
 0x35

	)

1054 
	#WORTIME1
 0x36

	)

1055 
	#WORTIME0
 0x37

	)

1056 
	#PKTSTATUS
 0x38

	)

1057 
	#VCO_VC_DAC
 0x39

	)

1058 
	#TXBYTES
 0x3A

	)

1059 
	#RXBYTES
 0x3B

	)

1062 
	#PATABLE
 0x3E

	)

1063 
	#TXFIFO
 0x3F

	)

1064 
	#RXFIFO
 0x3F

	)

1068 
	#RF_SRES
 0x30

	)

1069 
	#RF_SFSTXON
 0x31

	)

1070 
	#RF_SXOFF
 0x32

	)

1071 
	#RF_SCAL
 0x33

	)

1072 
	#RF_SRX
 0x34

	)

1073 
	#RF_STX
 0x35

	)

1074 
	#RF_SIDLE
 0x36

	)

1076 
	#RF_SWOR
 0x38

	)

1077 
	#RF_SPWD
 0x39

	)

1078 
	#RF_SFRX
 0x3A

	)

1079 
	#RF_SFTX
 0x3B

	)

1080 
	#RF_SWORRST
 0x3C

	)

1081 
	#RF_SNOP
 0x3D

	)

1083 
	#RF_RXSTAT
 0x80

	)

1084 
	#RF_TXSTAT
 0x00

	)

1087 
	#RF_SNGLREGRD
 0x80

	)

1088 
	#RF_SNGLREGWR
 0x00

	)

1089 
	#RF_REGRD
 0xC0

	)

1090 
	#RF_REGWR
 0x40

	)

1091 
	#RF_STATREGRD
 0xC0

	)

1092 
	#RF_SNGLPATABRD
 (
RF_SNGLREGRD
+
PATABLE
)

	)

1093 
	#RF_SNGLPATABWR
 (
RF_SNGLREGWR
+
PATABLE
)

	)

1094 
	#RF_PATABRD
 (
RF_REGRD
+
PATABLE
)

	)

1095 
	#RF_PATABWR
 (
RF_REGWR
+
PATABLE
)

	)

1096 
	#RF_SNGLRXRD
 (
RF_SNGLREGRD
+
RXFIFO
)

	)

1097 
	#RF_SNGLTXWR
 (
RF_SNGLREGWR
+
TXFIFO
)

	)

1098 
	#RF_RXFIFORD
 (
RF_REGRD
+
RXFIFO
)

	)

1099 
	#RF_TXFIFOWR
 (
RF_REGWR
+
TXFIFO
)

	)

1104 
	#__MSP430_HAS_CRC__


	)

1105 
	#__MSP430_BASEADDRESS_CRC__
 0x0150

	)

1107 
SFR_16BIT
(
CRCDI
);

1108 
SFR_8BIT
(
CRCDI_L
);

1109 
SFR_8BIT
(
CRCDI_H
);

1110 
SFR_16BIT
(
CRCDIRB
);

1111 
SFR_8BIT
(
CRCDIRB_L
);

1112 
SFR_8BIT
(
CRCDIRB_H
);

1113 
SFR_16BIT
(
CRCINIRES
);

1114 
SFR_8BIT
(
CRCINIRES_L
);

1115 
SFR_8BIT
(
CRCINIRES_H
);

1116 
SFR_16BIT
(
CRCRESR
);

1117 
SFR_8BIT
(
CRCRESR_L
);

1118 
SFR_8BIT
(
CRCRESR_H
);

1123 
	#__MSP430_HAS_DMAX_3__


	)

1124 
	#__MSP430_BASEADDRESS_DMAX_3__
 0x0500

	)

1126 
SFR_16BIT
(
DMACTL0
);

1127 
SFR_8BIT
(
DMACTL0_L
);

1128 
SFR_8BIT
(
DMACTL0_H
);

1129 
SFR_16BIT
(
DMACTL1
);

1130 
SFR_8BIT
(
DMACTL1_L
);

1131 
SFR_8BIT
(
DMACTL1_H
);

1132 
SFR_16BIT
(
DMACTL2
);

1133 
SFR_8BIT
(
DMACTL2_L
);

1134 
SFR_8BIT
(
DMACTL2_H
);

1135 
SFR_16BIT
(
DMACTL3
);

1136 
SFR_8BIT
(
DMACTL3_L
);

1137 
SFR_8BIT
(
DMACTL3_H
);

1138 
SFR_16BIT
(
DMACTL4
);

1139 
SFR_8BIT
(
DMACTL4_L
);

1140 
SFR_8BIT
(
DMACTL4_H
);

1141 
SFR_16BIT
(
DMAIV
);

1142 
SFR_8BIT
(
DMAIV_L
);

1143 
SFR_8BIT
(
DMAIV_H
);

1145 
SFR_16BIT
(
DMA0CTL
);

1146 
SFR_8BIT
(
DMA0CTL_L
);

1147 
SFR_8BIT
(
DMA0CTL_H
);

1148 
SFR_20BIT
(
DMA0SA
);

1149 
SFR_16BIT
(
DMA0SAL
);

1150 
SFR_20BIT
(
DMA0DA
);

1151 
SFR_16BIT
(
DMA0DAL
);

1152 
SFR_16BIT
(
DMA0SZ
);

1154 
SFR_16BIT
(
DMA1CTL
);

1155 
SFR_8BIT
(
DMA1CTL_L
);

1156 
SFR_8BIT
(
DMA1CTL_H
);

1157 
SFR_20BIT
(
DMA1SA
);

1158 
SFR_16BIT
(
DMA1SAL
);

1159 
SFR_20BIT
(
DMA1DA
);

1160 
SFR_16BIT
(
DMA1DAL
);

1161 
SFR_16BIT
(
DMA1SZ
);

1163 
SFR_16BIT
(
DMA2CTL
);

1164 
SFR_8BIT
(
DMA2CTL_L
);

1165 
SFR_8BIT
(
DMA2CTL_H
);

1166 
SFR_20BIT
(
DMA2SA
);

1167 
SFR_16BIT
(
DMA2SAL
);

1168 
SFR_20BIT
(
DMA2DA
);

1169 
SFR_16BIT
(
DMA2DAL
);

1170 
SFR_16BIT
(
DMA2SZ
);

1173 
	#DMA0TSEL0
 (0x0001Ë

	)

1174 
	#DMA0TSEL1
 (0x0002Ë

	)

1175 
	#DMA0TSEL2
 (0x0004Ë

	)

1176 
	#DMA0TSEL3
 (0x0008Ë

	)

1177 
	#DMA0TSEL4
 (0x0010Ë

	)

1178 
	#DMA1TSEL0
 (0x0100Ë

	)

1179 
	#DMA1TSEL1
 (0x0200Ë

	)

1180 
	#DMA1TSEL2
 (0x0400Ë

	)

1181 
	#DMA1TSEL3
 (0x0800Ë

	)

1182 
	#DMA1TSEL4
 (0x1000Ë

	)

1185 
	#DMA0TSEL0_L
 (0x0001Ë

	)

1186 
	#DMA0TSEL1_L
 (0x0002Ë

	)

1187 
	#DMA0TSEL2_L
 (0x0004Ë

	)

1188 
	#DMA0TSEL3_L
 (0x0008Ë

	)

1189 
	#DMA0TSEL4_L
 (0x0010Ë

	)

1192 
	#DMA1TSEL0_H
 (0x0001Ë

	)

1193 
	#DMA1TSEL1_H
 (0x0002Ë

	)

1194 
	#DMA1TSEL2_H
 (0x0004Ë

	)

1195 
	#DMA1TSEL3_H
 (0x0008Ë

	)

1196 
	#DMA1TSEL4_H
 (0x0010Ë

	)

1199 
	#DMA2TSEL0
 (0x0001Ë

	)

1200 
	#DMA2TSEL1
 (0x0002Ë

	)

1201 
	#DMA2TSEL2
 (0x0004Ë

	)

1202 
	#DMA2TSEL3
 (0x0008Ë

	)

1203 
	#DMA2TSEL4
 (0x0010Ë

	)

1206 
	#DMA2TSEL0_L
 (0x0001Ë

	)

1207 
	#DMA2TSEL1_L
 (0x0002Ë

	)

1208 
	#DMA2TSEL2_L
 (0x0004Ë

	)

1209 
	#DMA2TSEL3_L
 (0x0008Ë

	)

1210 
	#DMA2TSEL4_L
 (0x0010Ë

	)

1215 
	#ENNMI
 (0x0001Ë

	)

1216 
	#ROUNDROBIN
 (0x0002Ë

	)

1217 
	#DMARMWDIS
 (0x0004Ë

	)

1220 
	#ENNMI_L
 (0x0001Ë

	)

1221 
	#ROUNDROBIN_L
 (0x0002Ë

	)

1222 
	#DMARMWDIS_L
 (0x0004Ë

	)

1227 
	#DMAREQ
 (0x0001Ë

	)

1228 
	#DMAABORT
 (0x0002Ë

	)

1229 
	#DMAIE
 (0x0004Ë

	)

1230 
	#DMAIFG
 (0x0008Ë

	)

1231 
	#DMAEN
 (0x0010Ë

	)

1232 
	#DMALEVEL
 (0x0020Ë

	)

1233 
	#DMASRCBYTE
 (0x0040Ë

	)

1234 
	#DMADSTBYTE
 (0x0080Ë

	)

1235 
	#DMASRCINCR0
 (0x0100Ë

	)

1236 
	#DMASRCINCR1
 (0x0200Ë

	)

1237 
	#DMADSTINCR0
 (0x0400Ë

	)

1238 
	#DMADSTINCR1
 (0x0800Ë

	)

1239 
	#DMADT0
 (0x1000Ë

	)

1240 
	#DMADT1
 (0x2000Ë

	)

1241 
	#DMADT2
 (0x4000Ë

	)

1244 
	#DMAREQ_L
 (0x0001Ë

	)

1245 
	#DMAABORT_L
 (0x0002Ë

	)

1246 
	#DMAIE_L
 (0x0004Ë

	)

1247 
	#DMAIFG_L
 (0x0008Ë

	)

1248 
	#DMAEN_L
 (0x0010Ë

	)

1249 
	#DMALEVEL_L
 (0x0020Ë

	)

1250 
	#DMASRCBYTE_L
 (0x0040Ë

	)

1251 
	#DMADSTBYTE_L
 (0x0080Ë

	)

1254 
	#DMASRCINCR0_H
 (0x0001Ë

	)

1255 
	#DMASRCINCR1_H
 (0x0002Ë

	)

1256 
	#DMADSTINCR0_H
 (0x0004Ë

	)

1257 
	#DMADSTINCR1_H
 (0x0008Ë

	)

1258 
	#DMADT0_H
 (0x0010Ë

	)

1259 
	#DMADT1_H
 (0x0020Ë

	)

1260 
	#DMADT2_H
 (0x0040Ë

	)

1262 
	#DMASWDW
 (0*0x0040uË

	)

1263 
	#DMASBDW
 (1*0x0040uË

	)

1264 
	#DMASWDB
 (2*0x0040uË

	)

1265 
	#DMASBDB
 (3*0x0040uË

	)

1267 
	#DMASRCINCR_0
 (0*0x0100uË

	)

1268 
	#DMASRCINCR_1
 (1*0x0100uË

	)

1269 
	#DMASRCINCR_2
 (2*0x0100uË

	)

1270 
	#DMASRCINCR_3
 (3*0x0100uË

	)

1272 
	#DMADSTINCR_0
 (0*0x0400uË

	)

1273 
	#DMADSTINCR_1
 (1*0x0400uË

	)

1274 
	#DMADSTINCR_2
 (2*0x0400uË

	)

1275 
	#DMADSTINCR_3
 (3*0x0400uË

	)

1277 
	#DMADT_0
 (0*0x1000uË

	)

1278 
	#DMADT_1
 (1*0x1000uË

	)

1279 
	#DMADT_2
 (2*0x1000uË

	)

1280 
	#DMADT_3
 (3*0x1000uË

	)

1281 
	#DMADT_4
 (4*0x1000uË

	)

1282 
	#DMADT_5
 (5*0x1000uË

	)

1283 
	#DMADT_6
 (6*0x1000uË

	)

1284 
	#DMADT_7
 (7*0x1000uË

	)

1287 
	#DMAIV_NONE
 (0x0000Ë

	)

1288 
	#DMAIV_DMA0IFG
 (0x0002Ë

	)

1289 
	#DMAIV_DMA1IFG
 (0x0004Ë

	)

1290 
	#DMAIV_DMA2IFG
 (0x0006Ë

	)

1292 
	#DMA0TSEL_0
 (0*0x0001uË

	)

1293 
	#DMA0TSEL_1
 (1*0x0001uË

	)

1294 
	#DMA0TSEL_2
 (2*0x0001uË

	)

1295 
	#DMA0TSEL_3
 (3*0x0001uË

	)

1296 
	#DMA0TSEL_4
 (4*0x0001uË

	)

1297 
	#DMA0TSEL_5
 (5*0x0001uË

	)

1298 
	#DMA0TSEL_6
 (6*0x0001uË

	)

1299 
	#DMA0TSEL_7
 (7*0x0001uË

	)

1300 
	#DMA0TSEL_8
 (8*0x0001uË

	)

1301 
	#DMA0TSEL_9
 (9*0x0001uË

	)

1302 
	#DMA0TSEL_10
 (10*0x0001uË

	)

1303 
	#DMA0TSEL_11
 (11*0x0001uË

	)

1304 
	#DMA0TSEL_12
 (12*0x0001uË

	)

1305 
	#DMA0TSEL_13
 (13*0x0001uË

	)

1306 
	#DMA0TSEL_14
 (14*0x0001uË

	)

1307 
	#DMA0TSEL_15
 (15*0x0001uË

	)

1308 
	#DMA0TSEL_16
 (16*0x0001uË

	)

1309 
	#DMA0TSEL_17
 (17*0x0001uË

	)

1310 
	#DMA0TSEL_18
 (18*0x0001uË

	)

1311 
	#DMA0TSEL_19
 (19*0x0001uË

	)

1312 
	#DMA0TSEL_20
 (20*0x0001uË

	)

1313 
	#DMA0TSEL_21
 (21*0x0001uË

	)

1314 
	#DMA0TSEL_22
 (22*0x0001uË

	)

1315 
	#DMA0TSEL_23
 (23*0x0001uË

	)

1316 
	#DMA0TSEL_24
 (24*0x0001uË

	)

1317 
	#DMA0TSEL_25
 (25*0x0001uË

	)

1318 
	#DMA0TSEL_26
 (26*0x0001uË

	)

1319 
	#DMA0TSEL_27
 (27*0x0001uË

	)

1320 
	#DMA0TSEL_28
 (28*0x0001uË

	)

1321 
	#DMA0TSEL_29
 (29*0x0001uË

	)

1322 
	#DMA0TSEL_30
 (30*0x0001uË

	)

1323 
	#DMA0TSEL_31
 (31*0x0001uË

	)

1325 
	#DMA1TSEL_0
 (0*0x0100uË

	)

1326 
	#DMA1TSEL_1
 (1*0x0100uË

	)

1327 
	#DMA1TSEL_2
 (2*0x0100uË

	)

1328 
	#DMA1TSEL_3
 (3*0x0100uË

	)

1329 
	#DMA1TSEL_4
 (4*0x0100uË

	)

1330 
	#DMA1TSEL_5
 (5*0x0100uË

	)

1331 
	#DMA1TSEL_6
 (6*0x0100uË

	)

1332 
	#DMA1TSEL_7
 (7*0x0100uË

	)

1333 
	#DMA1TSEL_8
 (8*0x0100uË

	)

1334 
	#DMA1TSEL_9
 (9*0x0100uË

	)

1335 
	#DMA1TSEL_10
 (10*0x0100uË

	)

1336 
	#DMA1TSEL_11
 (11*0x0100uË

	)

1337 
	#DMA1TSEL_12
 (12*0x0100uË

	)

1338 
	#DMA1TSEL_13
 (13*0x0100uË

	)

1339 
	#DMA1TSEL_14
 (14*0x0100uË

	)

1340 
	#DMA1TSEL_15
 (15*0x0100uË

	)

1341 
	#DMA1TSEL_16
 (16*0x0100uË

	)

1342 
	#DMA1TSEL_17
 (17*0x0100uË

	)

1343 
	#DMA1TSEL_18
 (18*0x0100uË

	)

1344 
	#DMA1TSEL_19
 (19*0x0100uË

	)

1345 
	#DMA1TSEL_20
 (20*0x0100uË

	)

1346 
	#DMA1TSEL_21
 (21*0x0100uË

	)

1347 
	#DMA1TSEL_22
 (22*0x0100uË

	)

1348 
	#DMA1TSEL_23
 (23*0x0100uË

	)

1349 
	#DMA1TSEL_24
 (24*0x0100uË

	)

1350 
	#DMA1TSEL_25
 (25*0x0100uË

	)

1351 
	#DMA1TSEL_26
 (26*0x0100uË

	)

1352 
	#DMA1TSEL_27
 (27*0x0100uË

	)

1353 
	#DMA1TSEL_28
 (28*0x0100uË

	)

1354 
	#DMA1TSEL_29
 (29*0x0100uË

	)

1355 
	#DMA1TSEL_30
 (30*0x0100uË

	)

1356 
	#DMA1TSEL_31
 (31*0x0100uË

	)

1358 
	#DMA2TSEL_0
 (0*0x0001uË

	)

1359 
	#DMA2TSEL_1
 (1*0x0001uË

	)

1360 
	#DMA2TSEL_2
 (2*0x0001uË

	)

1361 
	#DMA2TSEL_3
 (3*0x0001uË

	)

1362 
	#DMA2TSEL_4
 (4*0x0001uË

	)

1363 
	#DMA2TSEL_5
 (5*0x0001uË

	)

1364 
	#DMA2TSEL_6
 (6*0x0001uË

	)

1365 
	#DMA2TSEL_7
 (7*0x0001uË

	)

1366 
	#DMA2TSEL_8
 (8*0x0001uË

	)

1367 
	#DMA2TSEL_9
 (9*0x0001uË

	)

1368 
	#DMA2TSEL_10
 (10*0x0001uË

	)

1369 
	#DMA2TSEL_11
 (11*0x0001uË

	)

1370 
	#DMA2TSEL_12
 (12*0x0001uË

	)

1371 
	#DMA2TSEL_13
 (13*0x0001uË

	)

1372 
	#DMA2TSEL_14
 (14*0x0001uË

	)

1373 
	#DMA2TSEL_15
 (15*0x0001uË

	)

1374 
	#DMA2TSEL_16
 (16*0x0001uË

	)

1375 
	#DMA2TSEL_17
 (17*0x0001uË

	)

1376 
	#DMA2TSEL_18
 (18*0x0001uË

	)

1377 
	#DMA2TSEL_19
 (19*0x0001uË

	)

1378 
	#DMA2TSEL_20
 (20*0x0001uË

	)

1379 
	#DMA2TSEL_21
 (21*0x0001uË

	)

1380 
	#DMA2TSEL_22
 (22*0x0001uË

	)

1381 
	#DMA2TSEL_23
 (23*0x0001uË

	)

1382 
	#DMA2TSEL_24
 (24*0x0001uË

	)

1383 
	#DMA2TSEL_25
 (25*0x0001uË

	)

1384 
	#DMA2TSEL_26
 (26*0x0001uË

	)

1385 
	#DMA2TSEL_27
 (27*0x0001uË

	)

1386 
	#DMA2TSEL_28
 (28*0x0001uË

	)

1387 
	#DMA2TSEL_29
 (29*0x0001uË

	)

1388 
	#DMA2TSEL_30
 (30*0x0001uË

	)

1389 
	#DMA2TSEL_31
 (31*0x0001uË

	)

1391 
	#DMA0TSEL__DMA_REQ
 (0*0x0001uË

	)

1392 
	#DMA0TSEL__TA0CCR0
 (1*0x0001uË

	)

1393 
	#DMA0TSEL__TA0CCR2
 (2*0x0001uË

	)

1394 
	#DMA0TSEL__TA1CCR0
 (3*0x0001uË

	)

1395 
	#DMA0TSEL__TA1CCR2
 (4*0x0001uË

	)

1396 
	#DMA0TSEL__TB0CCR0
 (5*0x0001uË

	)

1397 
	#DMA0TSEL__TB0CCR2
 (6*0x0001uË

	)

1398 
	#DMA0TSEL__RES7
 (7*0x0001uË

	)

1399 
	#DMA0TSEL__RES8
 (8*0x0001uË

	)

1400 
	#DMA0TSEL__RES9
 (9*0x0001uË

	)

1401 
	#DMA0TSEL__RES10
 (10*0x0001uË

	)

1402 
	#DMA0TSEL__RES11
 (11*0x0001uË

	)

1403 
	#DMA0TSEL__RES12
 (12*0x0001uË

	)

1404 
	#DMA0TSEL__RES13
 (13*0x0001uË

	)

1405 
	#DMA0TSEL__RFRXIFG
 (14*0x0001uË

	)

1406 
	#DMA0TSEL__RFTXIFG
 (15*0x0001uË

	)

1407 
	#DMA0TSEL__USCIA0RX
 (16*0x0001uË

	)

1408 
	#DMA0TSEL__USCIA0TX
 (17*0x0001uË

	)

1409 
	#DMA0TSEL__USCIB0RX
 (18*0x0001uË

	)

1410 
	#DMA0TSEL__USCIB0TX
 (19*0x0001uË

	)

1411 
	#DMA0TSEL__RES20
 (20*0x0001uË

	)

1412 
	#DMA0TSEL__RES21
 (21*0x0001uË

	)

1413 
	#DMA0TSEL__RES22
 (22*0x0001uË

	)

1414 
	#DMA0TSEL__RES23
 (23*0x0001uË

	)

1415 
	#DMA0TSEL__ADC12IFG
 (24*0x0001uË

	)

1416 
	#DMA0TSEL__RES25
 (25*0x0001uË

	)

1417 
	#DMA0TSEL__RES26
 (26*0x0001uË

	)

1418 
	#DMA0TSEL__RES27
 (27*0x0001uË

	)

1419 
	#DMA0TSEL__RES28
 (28*0x0001uË

	)

1420 
	#DMA0TSEL__MPY
 (29*0x0001uË

	)

1421 
	#DMA0TSEL__DMA2IFG
 (30*0x0001uË

	)

1422 
	#DMA0TSEL__DMAE0
 (31*0x0001uË

	)

1424 
	#DMA1TSEL__DMA_REQ
 (0*0x0100uË

	)

1425 
	#DMA1TSEL__TA0CCR0
 (1*0x0100uË

	)

1426 
	#DMA1TSEL__TA0CCR2
 (2*0x0100uË

	)

1427 
	#DMA1TSEL__TA1CCR0
 (3*0x0100uË

	)

1428 
	#DMA1TSEL__TA1CCR2
 (4*0x0100uË

	)

1429 
	#DMA1TSEL__TB0CCR0
 (5*0x0100uË

	)

1430 
	#DMA1TSEL__TB0CCR2
 (6*0x0100uË

	)

1431 
	#DMA1TSEL__RES7
 (7*0x0100uË

	)

1432 
	#DMA1TSEL__RES8
 (8*0x0100uË

	)

1433 
	#DMA1TSEL__RES9
 (9*0x0100uË

	)

1434 
	#DMA1TSEL__RES10
 (10*0x0100uË

	)

1435 
	#DMA1TSEL__RES11
 (11*0x0100uË

	)

1436 
	#DMA1TSEL__RES12
 (12*0x0100uË

	)

1437 
	#DMA1TSEL__RES13
 (13*0x0100uË

	)

1438 
	#DMA1TSEL__RFRXIFG
 (14*0x0100uË

	)

1439 
	#DMA1TSEL__RFTXIFG
 (15*0x0100uË

	)

1440 
	#DMA1TSEL__USCIA0RX
 (16*0x0100uË

	)

1441 
	#DMA1TSEL__USCIA0TX
 (17*0x0100uË

	)

1442 
	#DMA1TSEL__USCIB0RX
 (18*0x0100uË

	)

1443 
	#DMA1TSEL__USCIB0TX
 (19*0x0100uË

	)

1444 
	#DMA1TSEL__RES20
 (20*0x0100uË

	)

1445 
	#DMA1TSEL__RES21
 (21*0x0100uË

	)

1446 
	#DMA1TSEL__RES22
 (22*0x0100uË

	)

1447 
	#DMA1TSEL__RES23
 (23*0x0100uË

	)

1448 
	#DMA1TSEL__ADC12IFG
 (24*0x0100uË

	)

1449 
	#DMA1TSEL__RES25
 (25*0x0100uË

	)

1450 
	#DMA1TSEL__RES26
 (26*0x0100uË

	)

1451 
	#DMA1TSEL__RES27
 (27*0x0100uË

	)

1452 
	#DMA1TSEL__RES28
 (28*0x0100uË

	)

1453 
	#DMA1TSEL__MPY
 (29*0x0100uË

	)

1454 
	#DMA1TSEL__DMA0IFG
 (30*0x0100uË

	)

1455 
	#DMA1TSEL__DMAE0
 (31*0x0100uË

	)

1457 
	#DMA2TSEL__DMA_REQ
 (0*0x0001uË

	)

1458 
	#DMA2TSEL__TA0CCR0
 (1*0x0001uË

	)

1459 
	#DMA2TSEL__TA0CCR2
 (2*0x0001uË

	)

1460 
	#DMA2TSEL__TA1CCR0
 (3*0x0001uË

	)

1461 
	#DMA2TSEL__TA1CCR2
 (4*0x0001uË

	)

1462 
	#DMA2TSEL__TB0CCR0
 (5*0x0001uË

	)

1463 
	#DMA2TSEL__TB0CCR2
 (6*0x0001uË

	)

1464 
	#DMA2TSEL__RES7
 (7*0x0001uË

	)

1465 
	#DMA2TSEL__RES8
 (8*0x0001uË

	)

1466 
	#DMA2TSEL__RES9
 (9*0x0001uË

	)

1467 
	#DMA2TSEL__RES10
 (10*0x0001uË

	)

1468 
	#DMA2TSEL__RES11
 (11*0x0001uË

	)

1469 
	#DMA2TSEL__RES12
 (12*0x0001uË

	)

1470 
	#DMA2TSEL__RES13
 (13*0x0001uË

	)

1471 
	#DMA2TSEL__RFRXIFG
 (14*0x0001uË

	)

1472 
	#DMA2TSEL__RFTXIFG
 (15*0x0001uË

	)

1473 
	#DMA2TSEL__USCIA0RX
 (16*0x0001uË

	)

1474 
	#DMA2TSEL__USCIA0TX
 (17*0x0001uË

	)

1475 
	#DMA2TSEL__USCIB0RX
 (18*0x0001uË

	)

1476 
	#DMA2TSEL__USCIB0TX
 (19*0x0001uË

	)

1477 
	#DMA2TSEL__RES20
 (20*0x0001uË

	)

1478 
	#DMA2TSEL__RES21
 (21*0x0001uË

	)

1479 
	#DMA2TSEL__RES22
 (22*0x0001uË

	)

1480 
	#DMA2TSEL__RES23
 (23*0x0001uË

	)

1481 
	#DMA2TSEL__ADC12IFG
 (24*0x0001uË

	)

1482 
	#DMA2TSEL__RES25
 (25*0x0001uË

	)

1483 
	#DMA2TSEL__RES26
 (26*0x0001uË

	)

1484 
	#DMA2TSEL__RES27
 (27*0x0001uË

	)

1485 
	#DMA2TSEL__RES28
 (28*0x0001uË

	)

1486 
	#DMA2TSEL__MPY
 (29*0x0001uË

	)

1487 
	#DMA2TSEL__DMA1IFG
 (30*0x0001uË

	)

1488 
	#DMA2TSEL__DMAE0
 (31*0x0001uË

	)

1493 
	#__MSP430_HAS_FLASH__


	)

1494 
	#__MSP430_BASEADDRESS_FLASH__
 0x0140

	)

1496 
SFR_16BIT
(
FCTL1
);

1497 
SFR_8BIT
(
FCTL1_L
);

1498 
SFR_8BIT
(
FCTL1_H
);

1500 
SFR_16BIT
(
FCTL3
);

1501 
SFR_8BIT
(
FCTL3_L
);

1502 
SFR_8BIT
(
FCTL3_H
);

1503 
SFR_16BIT
(
FCTL4
);

1504 
SFR_8BIT
(
FCTL4_L
);

1505 
SFR_8BIT
(
FCTL4_H
);

1507 
	#FRPW
 (0x9600Ë

	)

1508 
	#FWPW
 (0xA500Ë

	)

1509 
	#FXPW
 (0x3300Ë

	)

1510 
	#FRKEY
 (0x9600Ë

	)

1511 
	#FWKEY
 (0xA500Ë

	)

1512 
	#FXKEY
 (0x3300Ë

	)

1516 
	#ERASE
 (0x0002Ë

	)

1517 
	#MERAS
 (0x0004Ë

	)

1520 
	#SWRT
 (0x0020Ë

	)

1521 
	#WRT
 (0x0040Ë

	)

1522 
	#BLKWRT
 (0x0080Ë

	)

1526 
	#ERASE_L
 (0x0002Ë

	)

1527 
	#MERAS_L
 (0x0004Ë

	)

1530 
	#SWRT_L
 (0x0020Ë

	)

1531 
	#WRT_L
 (0x0040Ë

	)

1532 
	#BLKWRT_L
 (0x0080Ë

	)

1540 
	#BUSY
 (0x0001Ë

	)

1541 
	#KEYV
 (0x0002Ë

	)

1542 
	#ACCVIFG
 (0x0004Ë

	)

1543 
	#WAIT
 (0x0008Ë

	)

1544 
	#LOCK
 (0x0010Ë

	)

1545 
	#EMEX
 (0x0020Ë

	)

1546 
	#LOCKA
 (0x0040Ë

	)

1550 
	#BUSY_L
 (0x0001Ë

	)

1551 
	#KEYV_L
 (0x0002Ë

	)

1552 
	#ACCVIFG_L
 (0x0004Ë

	)

1553 
	#WAIT_L
 (0x0008Ë

	)

1554 
	#LOCK_L
 (0x0010Ë

	)

1555 
	#EMEX_L
 (0x0020Ë

	)

1556 
	#LOCKA_L
 (0x0040Ë

	)

1563 
	#VPE
 (0x0001Ë

	)

1564 
	#MGR0
 (0x0010Ë

	)

1565 
	#MGR1
 (0x0020Ë

	)

1566 
	#LOCKINFO
 (0x0080Ë

	)

1569 
	#VPE_L
 (0x0001Ë

	)

1570 
	#MGR0_L
 (0x0010Ë

	)

1571 
	#MGR1_L
 (0x0020Ë

	)

1572 
	#LOCKINFO_L
 (0x0080Ë

	)

1579 
	#__MSP430_HAS_LCD_B__


	)

1580 
	#__MSP430_BASEADDRESS_LCD_B__
 0x0A00

	)

1582 
SFR_16BIT
(
LCDBCTL0
);

1583 
SFR_8BIT
(
LCDBCTL0_L
);

1584 
SFR_8BIT
(
LCDBCTL0_H
);

1585 
SFR_16BIT
(
LCDBCTL1
);

1586 
SFR_8BIT
(
LCDBCTL1_L
);

1587 
SFR_8BIT
(
LCDBCTL1_H
);

1588 
SFR_16BIT
(
LCDBBLKCTL
);

1589 
SFR_8BIT
(
LCDBBLKCTL_L
);

1590 
SFR_8BIT
(
LCDBBLKCTL_H
);

1591 
SFR_16BIT
(
LCDBMEMCTL
);

1592 
SFR_8BIT
(
LCDBMEMCTL_L
);

1593 
SFR_8BIT
(
LCDBMEMCTL_H
);

1594 
SFR_16BIT
(
LCDBVCTL
);

1595 
SFR_8BIT
(
LCDBVCTL_L
);

1596 
SFR_8BIT
(
LCDBVCTL_H
);

1597 
SFR_16BIT
(
LCDBPCTL0
);

1598 
SFR_8BIT
(
LCDBPCTL0_L
);

1599 
SFR_8BIT
(
LCDBPCTL0_H
);

1600 
SFR_16BIT
(
LCDBPCTL1
);

1601 
SFR_8BIT
(
LCDBPCTL1_L
);

1602 
SFR_8BIT
(
LCDBPCTL1_H
);

1603 
SFR_16BIT
(
LCDBPCTL2
);

1604 
SFR_8BIT
(
LCDBPCTL2_L
);

1605 
SFR_8BIT
(
LCDBPCTL2_H
);

1606 
SFR_16BIT
(
LCDBPCTL3
);

1607 
SFR_8BIT
(
LCDBPCTL3_L
);

1608 
SFR_8BIT
(
LCDBPCTL3_H
);

1609 
SFR_16BIT
(
LCDBCPCTL
);

1610 
SFR_8BIT
(
LCDBCPCTL_L
);

1611 
SFR_8BIT
(
LCDBCPCTL_H
);

1612 
SFR_16BIT
(
LCDBIV
);

1615 
	#LCDON
 (0x0001Ë

	)

1616 
	#LCDSON
 (0x0004Ë

	)

1617 
	#LCDMX0
 (0x0008Ë

	)

1618 
	#LCDMX1
 (0x0010Ë

	)

1621 
	#LCDSSEL
 (0x0080Ë

	)

1622 
	#LCDPRE0
 (0x0100Ë

	)

1623 
	#LCDPRE1
 (0x0200Ë

	)

1624 
	#LCDPRE2
 (0x0400Ë

	)

1625 
	#LCDDIV0
 (0x0800Ë

	)

1626 
	#LCDDIV1
 (0x1000Ë

	)

1627 
	#LCDDIV2
 (0x2000Ë

	)

1628 
	#LCDDIV3
 (0x4000Ë

	)

1629 
	#LCDDIV4
 (0x8000Ë

	)

1632 
	#LCDON_L
 (0x0001Ë

	)

1633 
	#LCDSON_L
 (0x0004Ë

	)

1634 
	#LCDMX0_L
 (0x0008Ë

	)

1635 
	#LCDMX1_L
 (0x0010Ë

	)

1638 
	#LCDSSEL_L
 (0x0080Ë

	)

1643 
	#LCDPRE0_H
 (0x0001Ë

	)

1644 
	#LCDPRE1_H
 (0x0002Ë

	)

1645 
	#LCDPRE2_H
 (0x0004Ë

	)

1646 
	#LCDDIV0_H
 (0x0008Ë

	)

1647 
	#LCDDIV1_H
 (0x0010Ë

	)

1648 
	#LCDDIV2_H
 (0x0020Ë

	)

1649 
	#LCDDIV3_H
 (0x0040Ë

	)

1650 
	#LCDDIV4_H
 (0x0080Ë

	)

1652 
	#LCDPRE_0
 (0x0000Ë

	)

1653 
	#LCDPRE_1
 (0x0100Ë

	)

1654 
	#LCDPRE_2
 (0x0200Ë

	)

1655 
	#LCDPRE_3
 (0x0300Ë

	)

1656 
	#LCDPRE_4
 (0x0400Ë

	)

1657 
	#LCDPRE_5
 (0x0500Ë

	)

1658 
	#LCDPRE__1
 (0x0000Ë

	)

1659 
	#LCDPRE__2
 (0x0100Ë

	)

1660 
	#LCDPRE__4
 (0x0200Ë

	)

1661 
	#LCDPRE__8
 (0x0300Ë

	)

1662 
	#LCDPRE__16
 (0x0400Ë

	)

1663 
	#LCDPRE__32
 (0x0500Ë

	)

1665 
	#LCDDIV_0
 (0x0000Ë

	)

1666 
	#LCDDIV_1
 (0x0800Ë

	)

1667 
	#LCDDIV_2
 (0x1000Ë

	)

1668 
	#LCDDIV_3
 (0x1800Ë

	)

1669 
	#LCDDIV_4
 (0x2000Ë

	)

1670 
	#LCDDIV_5
 (0x2800Ë

	)

1671 
	#LCDDIV_6
 (0x3000Ë

	)

1672 
	#LCDDIV_7
 (0x3800Ë

	)

1673 
	#LCDDIV_8
 (0x4000Ë

	)

1674 
	#LCDDIV_9
 (0x4800Ë

	)

1675 
	#LCDDIV_10
 (0x5000Ë

	)

1676 
	#LCDDIV_11
 (0x5800Ë

	)

1677 
	#LCDDIV_12
 (0x6000Ë

	)

1678 
	#LCDDIV_13
 (0x6800Ë

	)

1679 
	#LCDDIV_14
 (0x7000Ë

	)

1680 
	#LCDDIV_15
 (0x7800Ë

	)

1681 
	#LCDDIV_16
 (0x8000Ë

	)

1682 
	#LCDDIV_17
 (0x8800Ë

	)

1683 
	#LCDDIV_18
 (0x9000Ë

	)

1684 
	#LCDDIV_19
 (0x9800Ë

	)

1685 
	#LCDDIV_20
 (0xA000Ë

	)

1686 
	#LCDDIV_21
 (0xA800Ë

	)

1687 
	#LCDDIV_22
 (0xB000Ë

	)

1688 
	#LCDDIV_23
 (0xB800Ë

	)

1689 
	#LCDDIV_24
 (0xC000Ë

	)

1690 
	#LCDDIV_25
 (0xC800Ë

	)

1691 
	#LCDDIV_26
 (0xD000Ë

	)

1692 
	#LCDDIV_27
 (0xD800Ë

	)

1693 
	#LCDDIV_28
 (0xE000Ë

	)

1694 
	#LCDDIV_29
 (0xE800Ë

	)

1695 
	#LCDDIV_30
 (0xF000Ë

	)

1696 
	#LCDDIV_31
 (0xF800Ë

	)

1697 
	#LCDDIV__1
 (0x0000Ë

	)

1698 
	#LCDDIV__2
 (0x0800Ë

	)

1699 
	#LCDDIV__3
 (0x1000Ë

	)

1700 
	#LCDDIV__4
 (0x1800Ë

	)

1701 
	#LCDDIV__5
 (0x2000Ë

	)

1702 
	#LCDDIV__6
 (0x2800Ë

	)

1703 
	#LCDDIV__7
 (0x3000Ë

	)

1704 
	#LCDDIV__8
 (0x3800Ë

	)

1705 
	#LCDDIV__9
 (0x4000Ë

	)

1706 
	#LCDDIV__10
 (0x4800Ë

	)

1707 
	#LCDDIV__11
 (0x5000Ë

	)

1708 
	#LCDDIV__12
 (0x5800Ë

	)

1709 
	#LCDDIV__13
 (0x6000Ë

	)

1710 
	#LCDDIV__14
 (0x6800Ë

	)

1711 
	#LCDDIV__15
 (0x7000Ë

	)

1712 
	#LCDDIV__16
 (0x7800Ë

	)

1713 
	#LCDDIV__17
 (0x8000Ë

	)

1714 
	#LCDDIV__18
 (0x8800Ë

	)

1715 
	#LCDDIV__19
 (0x9000Ë

	)

1716 
	#LCDDIV__20
 (0x9800Ë

	)

1717 
	#LCDDIV__21
 (0xA000Ë

	)

1718 
	#LCDDIV__22
 (0xA800Ë

	)

1719 
	#LCDDIV__23
 (0xB000Ë

	)

1720 
	#LCDDIV__24
 (0xB800Ë

	)

1721 
	#LCDDIV__25
 (0xC000Ë

	)

1722 
	#LCDDIV__26
 (0xC800Ë

	)

1723 
	#LCDDIV__27
 (0xD000Ë

	)

1724 
	#LCDDIV__28
 (0xD800Ë

	)

1725 
	#LCDDIV__29
 (0xE000Ë

	)

1726 
	#LCDDIV__30
 (0xE800Ë

	)

1727 
	#LCDDIV__31
 (0xF000Ë

	)

1728 
	#LCDDIV__32
 (0xF800Ë

	)

1731 
	#LCDSTATIC
 (
LCDSON
)

	)

1732 
	#LCD2MUX
 (
LCDMX0
+
LCDSON
)

	)

1733 
	#LCD3MUX
 (
LCDMX1
+
LCDSON
)

	)

1734 
	#LCD4MUX
 (
LCDMX1
+
LCDMX0
+
LCDSON
)

	)

1737 
	#LCDFRMIFG
 (0x0001Ë

	)

1738 
	#LCDBLKOFFIFG
 (0x0002Ë

	)

1739 
	#LCDBLKONIFG
 (0x0004Ë

	)

1740 
	#LCDNOCAPIFG
 (0x0008Ë

	)

1741 
	#LCDFRMIE
 (0x0100Ë

	)

1742 
	#LCDBLKOFFIE
 (0x0200Ë

	)

1743 
	#LCDBLKONIE
 (0x0400Ë

	)

1744 
	#LCDNOCAPIE
 (0x0800Ë

	)

1747 
	#LCDFRMIFG_L
 (0x0001Ë

	)

1748 
	#LCDBLKOFFIFG_L
 (0x0002Ë

	)

1749 
	#LCDBLKONIFG_L
 (0x0004Ë

	)

1750 
	#LCDNOCAPIFG_L
 (0x0008Ë

	)

1753 
	#LCDFRMIE_H
 (0x0001Ë

	)

1754 
	#LCDBLKOFFIE_H
 (0x0002Ë

	)

1755 
	#LCDBLKONIE_H
 (0x0004Ë

	)

1756 
	#LCDNOCAPIE_H
 (0x0008Ë

	)

1759 
	#LCDBLKMOD0
 (0x0001Ë

	)

1760 
	#LCDBLKMOD1
 (0x0002Ë

	)

1761 
	#LCDBLKPRE0
 (0x0004Ë

	)

1762 
	#LCDBLKPRE1
 (0x0008Ë

	)

1763 
	#LCDBLKPRE2
 (0x0010Ë

	)

1764 
	#LCDBLKDIV0
 (0x0020Ë

	)

1765 
	#LCDBLKDIV1
 (0x0040Ë

	)

1766 
	#LCDBLKDIV2
 (0x0080Ë

	)

1769 
	#LCDBLKMOD0_L
 (0x0001Ë

	)

1770 
	#LCDBLKMOD1_L
 (0x0002Ë

	)

1771 
	#LCDBLKPRE0_L
 (0x0004Ë

	)

1772 
	#LCDBLKPRE1_L
 (0x0008Ë

	)

1773 
	#LCDBLKPRE2_L
 (0x0010Ë

	)

1774 
	#LCDBLKDIV0_L
 (0x0020Ë

	)

1775 
	#LCDBLKDIV1_L
 (0x0040Ë

	)

1776 
	#LCDBLKDIV2_L
 (0x0080Ë

	)

1780 
	#LCDBLKMOD_0
 (0x0000Ë

	)

1781 
	#LCDBLKMOD_1
 (0x0001Ë

	)

1782 
	#LCDBLKMOD_2
 (0x0002Ë

	)

1783 
	#LCDBLKMOD_3
 (0x0003Ë

	)

1786 
	#LCDDISP
 (0x0001Ë

	)

1787 
	#LCDCLRM
 (0x0002Ë

	)

1788 
	#LCDCLRBM
 (0x0004Ë

	)

1791 
	#LCDDISP_L
 (0x0001Ë

	)

1792 
	#LCDCLRM_L
 (0x0002Ë

	)

1793 
	#LCDCLRBM_L
 (0x0004Ë

	)

1798 
	#LCD2B
 (0x0001Ë

	)

1799 
	#VLCDREF0
 (0x0002Ë

	)

1800 
	#VLCDREF1
 (0x0004Ë

	)

1801 
	#LCDCPEN
 (0x0008Ë

	)

1802 
	#VLCDEXT
 (0x0010Ë

	)

1803 
	#LCDEXTBIAS
 (0x0020Ë

	)

1804 
	#R03EXT
 (0x0040Ë

	)

1805 
	#LCDREXT
 (0x0080Ë

	)

1806 
	#VLCD0
 (0x0200Ë

	)

1807 
	#VLCD1
 (0x0400Ë

	)

1808 
	#VLCD2
 (0x0800Ë

	)

1809 
	#VLCD3
 (0x1000Ë

	)

1812 
	#LCD2B_L
 (0x0001Ë

	)

1813 
	#VLCDREF0_L
 (0x0002Ë

	)

1814 
	#VLCDREF1_L
 (0x0004Ë

	)

1815 
	#LCDCPEN_L
 (0x0008Ë

	)

1816 
	#VLCDEXT_L
 (0x0010Ë

	)

1817 
	#LCDEXTBIAS_L
 (0x0020Ë

	)

1818 
	#R03EXT_L
 (0x0040Ë

	)

1819 
	#LCDREXT_L
 (0x0080Ë

	)

1822 
	#VLCD0_H
 (0x0002Ë

	)

1823 
	#VLCD1_H
 (0x0004Ë

	)

1824 
	#VLCD2_H
 (0x0008Ë

	)

1825 
	#VLCD3_H
 (0x0010Ë

	)

1828 
	#VLCDREF_0
 (0<<1Ë

	)

1829 
	#VLCDREF_1
 (1<<1Ë

	)

1830 
	#VLCDREF_2
 (2<<1Ë

	)

1831 
	#VLCDREF_3
 (3<<1Ë

	)

1834 
	#VLCD_0
 (0<<9Ë

	)

1835 
	#VLCD_1
 (1<<9Ë

	)

1836 
	#VLCD_2
 (2<<9Ë

	)

1837 
	#VLCD_3
 (3<<9Ë

	)

1838 
	#VLCD_4
 (4<<9Ë

	)

1839 
	#VLCD_5
 (5<<9Ë

	)

1840 
	#VLCD_6
 (6<<9Ë

	)

1841 
	#VLCD_7
 (7<<9Ë

	)

1842 
	#VLCD_8
 (8<<9Ë

	)

1843 
	#VLCD_9
 (9<<9Ë

	)

1844 
	#VLCD_10
 (10<<9Ë

	)

1845 
	#VLCD_11
 (11<<9Ë

	)

1846 
	#VLCD_12
 (12<<9Ë

	)

1847 
	#VLCD_13
 (12<<9Ë

	)

1848 
	#VLCD_14
 (13<<9Ë

	)

1849 
	#VLCD_15
 (15<<9Ë

	)

1851 
	#VLCD_DISABLED
 (0<<9Ë

	)

1852 
	#VLCD_2_60
 (1<<9Ë

	)

1853 
	#VLCD_2_66
 (2<<9Ë

	)

1854 
	#VLCD_2_72
 (3<<9Ë

	)

1855 
	#VLCD_2_78
 (4<<9Ë

	)

1856 
	#VLCD_2_84
 (5<<9Ë

	)

1857 
	#VLCD_2_90
 (6<<9Ë

	)

1858 
	#VLCD_2_96
 (7<<9Ë

	)

1859 
	#VLCD_3_02
 (8<<9Ë

	)

1860 
	#VLCD_3_08
 (9<<9Ë

	)

1861 
	#VLCD_3_14
 (10<<9Ë

	)

1862 
	#VLCD_3_20
 (11<<9Ë

	)

1863 
	#VLCD_3_26
 (12<<9Ë

	)

1864 
	#VLCD_3_32
 (12<<9Ë

	)

1865 
	#VLCD_3_38
 (13<<9Ë

	)

1866 
	#VLCD_3_44
 (15<<9Ë

	)

1869 
	#LCDS0
 (0x0001Ë

	)

1870 
	#LCDS1
 (0x0002Ë

	)

1871 
	#LCDS2
 (0x0004Ë

	)

1872 
	#LCDS3
 (0x0008Ë

	)

1873 
	#LCDS4
 (0x0010Ë

	)

1874 
	#LCDS5
 (0x0020Ë

	)

1875 
	#LCDS6
 (0x0040Ë

	)

1876 
	#LCDS7
 (0x0080Ë

	)

1877 
	#LCDS8
 (0x0100Ë

	)

1878 
	#LCDS9
 (0x0200Ë

	)

1879 
	#LCDS10
 (0x0400Ë

	)

1880 
	#LCDS11
 (0x0800Ë

	)

1881 
	#LCDS12
 (0x1000Ë

	)

1882 
	#LCDS13
 (0x2000Ë

	)

1883 
	#LCDS14
 (0x4000Ë

	)

1884 
	#LCDS15
 (0x8000Ë

	)

1887 
	#LCDS0_L
 (0x0001Ë

	)

1888 
	#LCDS1_L
 (0x0002Ë

	)

1889 
	#LCDS2_L
 (0x0004Ë

	)

1890 
	#LCDS3_L
 (0x0008Ë

	)

1891 
	#LCDS4_L
 (0x0010Ë

	)

1892 
	#LCDS5_L
 (0x0020Ë

	)

1893 
	#LCDS6_L
 (0x0040Ë

	)

1894 
	#LCDS7_L
 (0x0080Ë

	)

1897 
	#LCDS8_H
 (0x0001Ë

	)

1898 
	#LCDS9_H
 (0x0002Ë

	)

1899 
	#LCDS10_H
 (0x0004Ë

	)

1900 
	#LCDS11_H
 (0x0008Ë

	)

1901 
	#LCDS12_H
 (0x0010Ë

	)

1902 
	#LCDS13_H
 (0x0020Ë

	)

1903 
	#LCDS14_H
 (0x0040Ë

	)

1904 
	#LCDS15_H
 (0x0080Ë

	)

1907 
	#LCDS16
 (0x0001Ë

	)

1908 
	#LCDS17
 (0x0002Ë

	)

1909 
	#LCDS18
 (0x0004Ë

	)

1910 
	#LCDS19
 (0x0008Ë

	)

1911 
	#LCDS20
 (0x0010Ë

	)

1912 
	#LCDS21
 (0x0020Ë

	)

1913 
	#LCDS22
 (0x0040Ë

	)

1914 
	#LCDS23
 (0x0080Ë

	)

1915 
	#LCDS24
 (0x0100Ë

	)

1916 
	#LCDS25
 (0x0200Ë

	)

1917 
	#LCDS26
 (0x0400Ë

	)

1918 
	#LCDS27
 (0x0800Ë

	)

1919 
	#LCDS28
 (0x1000Ë

	)

1920 
	#LCDS29
 (0x2000Ë

	)

1921 
	#LCDS30
 (0x4000Ë

	)

1922 
	#LCDS31
 (0x8000Ë

	)

1925 
	#LCDS16_L
 (0x0001Ë

	)

1926 
	#LCDS17_L
 (0x0002Ë

	)

1927 
	#LCDS18_L
 (0x0004Ë

	)

1928 
	#LCDS19_L
 (0x0008Ë

	)

1929 
	#LCDS20_L
 (0x0010Ë

	)

1930 
	#LCDS21_L
 (0x0020Ë

	)

1931 
	#LCDS22_L
 (0x0040Ë

	)

1932 
	#LCDS23_L
 (0x0080Ë

	)

1935 
	#LCDS24_H
 (0x0001Ë

	)

1936 
	#LCDS25_H
 (0x0002Ë

	)

1937 
	#LCDS26_H
 (0x0004Ë

	)

1938 
	#LCDS27_H
 (0x0008Ë

	)

1939 
	#LCDS28_H
 (0x0010Ë

	)

1940 
	#LCDS29_H
 (0x0020Ë

	)

1941 
	#LCDS30_H
 (0x0040Ë

	)

1942 
	#LCDS31_H
 (0x0080Ë

	)

1945 
	#LCDS32
 (0x0001Ë

	)

1946 
	#LCDS33
 (0x0002Ë

	)

1947 
	#LCDS34
 (0x0004Ë

	)

1948 
	#LCDS35
 (0x0008Ë

	)

1949 
	#LCDS36
 (0x0010Ë

	)

1950 
	#LCDS37
 (0x0020Ë

	)

1951 
	#LCDS38
 (0x0040Ë

	)

1952 
	#LCDS39
 (0x0080Ë

	)

1953 
	#LCDS40
 (0x0100Ë

	)

1954 
	#LCDS41
 (0x0200Ë

	)

1955 
	#LCDS42
 (0x0400Ë

	)

1956 
	#LCDS43
 (0x0800Ë

	)

1957 
	#LCDS44
 (0x1000Ë

	)

1958 
	#LCDS45
 (0x2000Ë

	)

1959 
	#LCDS46
 (0x4000Ë

	)

1960 
	#LCDS47
 (0x8000Ë

	)

1963 
	#LCDS32_L
 (0x0001Ë

	)

1964 
	#LCDS33_L
 (0x0002Ë

	)

1965 
	#LCDS34_L
 (0x0004Ë

	)

1966 
	#LCDS35_L
 (0x0008Ë

	)

1967 
	#LCDS36_L
 (0x0010Ë

	)

1968 
	#LCDS37_L
 (0x0020Ë

	)

1969 
	#LCDS38_L
 (0x0040Ë

	)

1970 
	#LCDS39_L
 (0x0080Ë

	)

1973 
	#LCDS40_H
 (0x0001Ë

	)

1974 
	#LCDS41_H
 (0x0002Ë

	)

1975 
	#LCDS42_H
 (0x0004Ë

	)

1976 
	#LCDS43_H
 (0x0008Ë

	)

1977 
	#LCDS44_H
 (0x0010Ë

	)

1978 
	#LCDS45_H
 (0x0020Ë

	)

1979 
	#LCDS46_H
 (0x0040Ë

	)

1980 
	#LCDS47_H
 (0x0080Ë

	)

1983 
	#LCDS48
 (0x0001Ë

	)

1984 
	#LCDS49
 (0x0002Ë

	)

1985 
	#LCDS50
 (0x0004Ë

	)

1988 
	#LCDS48_L
 (0x0001Ë

	)

1989 
	#LCDS49_L
 (0x0002Ë

	)

1990 
	#LCDS50_L
 (0x0004Ë

	)

1995 
	#LCDCPDIS0
 (0x0001Ë

	)

1996 
	#LCDCPDIS1
 (0x0002Ë

	)

1997 
	#LCDCPDIS2
 (0x0004Ë

	)

1998 
	#LCDCPDIS3
 (0x0008Ë

	)

1999 
	#LCDCPDIS4
 (0x0010Ë

	)

2000 
	#LCDCPDIS5
 (0x0020Ë

	)

2001 
	#LCDCPDIS6
 (0x0040Ë

	)

2002 
	#LCDCPDIS7
 (0x0080Ë

	)

2003 
	#LCDCPCLKSYNC
 (0x8000Ë

	)

2006 
	#LCDCPDIS0_L
 (0x0001Ë

	)

2007 
	#LCDCPDIS1_L
 (0x0002Ë

	)

2008 
	#LCDCPDIS2_L
 (0x0004Ë

	)

2009 
	#LCDCPDIS3_L
 (0x0008Ë

	)

2010 
	#LCDCPDIS4_L
 (0x0010Ë

	)

2011 
	#LCDCPDIS5_L
 (0x0020Ë

	)

2012 
	#LCDCPDIS6_L
 (0x0040Ë

	)

2013 
	#LCDCPDIS7_L
 (0x0080Ë

	)

2016 
	#LCDCPCLKSYNC_H
 (0x0080Ë

	)

2018 
SFR_8BIT
(
LCDM1
);

2019 
	#LCDMEM_
 
LCDM1


	)

2020 #ifde‡
__ASM_HEADER__


2021 
	#LCDMEM
 
LCDM1


	)

2023 
	#LCDMEM
 ((*Ë&
LCDM1
Ë

	)

2025 
SFR_8BIT
(
LCDM2
);

2026 
SFR_8BIT
(
LCDM3
);

2027 
SFR_8BIT
(
LCDM4
);

2028 
SFR_8BIT
(
LCDM5
);

2029 
SFR_8BIT
(
LCDM6
);

2030 
SFR_8BIT
(
LCDM7
);

2031 
SFR_8BIT
(
LCDM8
);

2032 
SFR_8BIT
(
LCDM9
);

2033 
SFR_8BIT
(
LCDM10
);

2034 
SFR_8BIT
(
LCDM11
);

2035 
SFR_8BIT
(
LCDM12
);

2036 
SFR_8BIT
(
LCDM13
);

2037 
SFR_8BIT
(
LCDM14
);

2038 
SFR_8BIT
(
LCDM15
);

2039 
SFR_8BIT
(
LCDM16
);

2040 
SFR_8BIT
(
LCDM17
);

2041 
SFR_8BIT
(
LCDM18
);

2042 
SFR_8BIT
(
LCDM19
);

2043 
SFR_8BIT
(
LCDM20
);

2044 
SFR_8BIT
(
LCDM21
);

2045 
SFR_8BIT
(
LCDM22
);

2046 
SFR_8BIT
(
LCDM23
);

2047 
SFR_8BIT
(
LCDM24
);

2049 
SFR_8BIT
(
LCDBM1
);

2050 
	#LCDBMEM_
 
LCDBM1


	)

2051 #ifde‡
__ASM_HEADER__


2052 
	#LCDBMEM
 (
LCDBM1
Ë

	)

2054 
	#LCDBMEM
 ((*Ë&
LCDBM1
Ë

	)

2056 
SFR_8BIT
(
LCDBM2
);

2057 
SFR_8BIT
(
LCDBM3
);

2058 
SFR_8BIT
(
LCDBM4
);

2059 
SFR_8BIT
(
LCDBM5
);

2060 
SFR_8BIT
(
LCDBM6
);

2061 
SFR_8BIT
(
LCDBM7
);

2062 
SFR_8BIT
(
LCDBM8
);

2063 
SFR_8BIT
(
LCDBM9
);

2064 
SFR_8BIT
(
LCDBM10
);

2065 
SFR_8BIT
(
LCDBM11
);

2066 
SFR_8BIT
(
LCDBM12
);

2067 
SFR_8BIT
(
LCDBM13
);

2068 
SFR_8BIT
(
LCDBM14
);

2069 
SFR_8BIT
(
LCDBM15
);

2070 
SFR_8BIT
(
LCDBM16
);

2071 
SFR_8BIT
(
LCDBM17
);

2072 
SFR_8BIT
(
LCDBM18
);

2073 
SFR_8BIT
(
LCDBM19
);

2074 
SFR_8BIT
(
LCDBM20
);

2075 
SFR_8BIT
(
LCDBM21
);

2076 
SFR_8BIT
(
LCDBM22
);

2077 
SFR_8BIT
(
LCDBM23
);

2078 
SFR_8BIT
(
LCDBM24
);

2081 
	#LCDBIV_NONE
 (0x0000Ë

	)

2082 
	#LCDBIV_LCDNOCAPIFG
 (0x0002Ë

	)

2083 
	#LCDBIV_LCDBLKOFFIFG
 (0x0004Ë

	)

2084 
	#LCDBIV_LCDBLKONIFG
 (0x0006Ë

	)

2085 
	#LCDBIV_LCDFRMIFG
 (0x0008Ë

	)

2090 
	#__MSP430_HAS_MPY32__


	)

2091 
	#__MSP430_BASEADDRESS_MPY32__
 0x04C0

	)

2093 
SFR_16BIT
(
MPY
);

2094 
SFR_8BIT
(
MPY_L
);

2095 
SFR_8BIT
(
MPY_H
);

2096 
SFR_16BIT
(
MPYS
);

2097 
SFR_8BIT
(
MPYS_L
);

2098 
SFR_8BIT
(
MPYS_H
);

2099 
SFR_16BIT
(
MAC
);

2100 
SFR_8BIT
(
MAC_L
);

2101 
SFR_8BIT
(
MAC_H
);

2102 
SFR_16BIT
(
MACS
);

2103 
SFR_8BIT
(
MACS_L
);

2104 
SFR_8BIT
(
MACS_H
);

2105 
SFR_16BIT
(
OP2
);

2106 
SFR_8BIT
(
OP2_L
);

2107 
SFR_8BIT
(
OP2_H
);

2108 
SFR_16BIT
(
RESLO
);

2109 
SFR_8BIT
(
RESLO_L
);

2110 
SFR_8BIT
(
RESLO_H
);

2111 
SFR_16BIT
(
RESHI
);

2112 
SFR_8BIT
(
RESHI_L
);

2113 
SFR_8BIT
(
RESHI_H
);

2114 
SFR_16BIT
(
SUMEXT
);

2115 
SFR_8BIT
(
SUMEXT_L
);

2116 
SFR_8BIT
(
SUMEXT_H
);

2118 
SFR_16BIT
(
MPY32L
);

2119 
SFR_8BIT
(
MPY32L_L
);

2120 
SFR_8BIT
(
MPY32L_H
);

2121 
SFR_16BIT
(
MPY32H
);

2122 
SFR_8BIT
(
MPY32H_L
);

2123 
SFR_8BIT
(
MPY32H_H
);

2124 
SFR_16BIT
(
MPYS32L
);

2125 
SFR_8BIT
(
MPYS32L_L
);

2126 
SFR_8BIT
(
MPYS32L_H
);

2127 
SFR_16BIT
(
MPYS32H
);

2128 
SFR_8BIT
(
MPYS32H_L
);

2129 
SFR_8BIT
(
MPYS32H_H
);

2130 
SFR_16BIT
(
MAC32L
);

2131 
SFR_8BIT
(
MAC32L_L
);

2132 
SFR_8BIT
(
MAC32L_H
);

2133 
SFR_16BIT
(
MAC32H
);

2134 
SFR_8BIT
(
MAC32H_L
);

2135 
SFR_8BIT
(
MAC32H_H
);

2136 
SFR_16BIT
(
MACS32L
);

2137 
SFR_8BIT
(
MACS32L_L
);

2138 
SFR_8BIT
(
MACS32L_H
);

2139 
SFR_16BIT
(
MACS32H
);

2140 
SFR_8BIT
(
MACS32H_L
);

2141 
SFR_8BIT
(
MACS32H_H
);

2142 
SFR_16BIT
(
OP2L
);

2143 
SFR_8BIT
(
OP2L_L
);

2144 
SFR_8BIT
(
OP2L_H
);

2145 
SFR_16BIT
(
OP2H
);

2146 
SFR_8BIT
(
OP2H_L
);

2147 
SFR_8BIT
(
OP2H_H
);

2148 
SFR_16BIT
(
RES0
);

2149 
SFR_8BIT
(
RES0_L
);

2150 
SFR_8BIT
(
RES0_H
);

2151 
SFR_16BIT
(
RES1
);

2152 
SFR_8BIT
(
RES1_L
);

2153 
SFR_8BIT
(
RES1_H
);

2154 
SFR_16BIT
(
RES2
);

2155 
SFR_8BIT
(
RES2_L
);

2156 
SFR_8BIT
(
RES2_H
);

2157 
SFR_16BIT
(
RES3
);

2158 
SFR_8BIT
(
RES3_L
);

2159 
SFR_8BIT
(
RES3_H
);

2160 
SFR_16BIT
(
MPY32CTL0
);

2161 
SFR_8BIT
(
MPY32CTL0_L
);

2162 
SFR_8BIT
(
MPY32CTL0_H
);

2164 
	#MPY_B
 
MPY_L


	)

2165 
	#MPYS_B
 
MPYS_L


	)

2166 
	#MAC_B
 
MAC_L


	)

2167 
	#MACS_B
 
MACS_L


	)

2168 
	#OP2_B
 
OP2_L


	)

2169 
	#MPY32L_B
 
MPY32L_L


	)

2170 
	#MPY32H_B
 
MPY32H_L


	)

2171 
	#MPYS32L_B
 
MPYS32L_L


	)

2172 
	#MPYS32H_B
 
MPYS32H_L


	)

2173 
	#MAC32L_B
 
MAC32L_L


	)

2174 
	#MAC32H_B
 
MAC32H_L


	)

2175 
	#MACS32L_B
 
MACS32L_L


	)

2176 
	#MACS32H_B
 
MACS32H_L


	)

2177 
	#OP2L_B
 
OP2L_L


	)

2178 
	#OP2H_B
 
OP2H_L


	)

2181 
	#MPYC
 (0x0001Ë

	)

2183 
	#MPYFRAC
 (0x0004Ë

	)

2184 
	#MPYSAT
 (0x0008Ë

	)

2185 
	#MPYM0
 (0x0010Ë

	)

2186 
	#MPYM1
 (0x0020Ë

	)

2187 
	#OP1_32
 (0x0040Ë

	)

2188 
	#OP2_32
 (0x0080Ë

	)

2189 
	#MPYDLYWRTEN
 (0x0100Ë

	)

2190 
	#MPYDLY32
 (0x0200Ë

	)

2193 
	#MPYC_L
 (0x0001Ë

	)

2195 
	#MPYFRAC_L
 (0x0004Ë

	)

2196 
	#MPYSAT_L
 (0x0008Ë

	)

2197 
	#MPYM0_L
 (0x0010Ë

	)

2198 
	#MPYM1_L
 (0x0020Ë

	)

2199 
	#OP1_32_L
 (0x0040Ë

	)

2200 
	#OP2_32_L
 (0x0080Ë

	)

2204 
	#MPYDLYWRTEN_H
 (0x0001Ë

	)

2205 
	#MPYDLY32_H
 (0x0002Ë

	)

2207 
	#MPYM_0
 (0x0000Ë

	)

2208 
	#MPYM_1
 (0x0010Ë

	)

2209 
	#MPYM_2
 (0x0020Ë

	)

2210 
	#MPYM_3
 (0x0030Ë

	)

2211 
	#MPYM__MPY
 (0x0000Ë

	)

2212 
	#MPYM__MPYS
 (0x0010Ë

	)

2213 
	#MPYM__MAC
 (0x0020Ë

	)

2214 
	#MPYM__MACS
 (0x0030Ë

	)

2219 
	#__MSP430_HAS_PORT1_R__


	)

2220 
	#__MSP430_BASEADDRESS_PORT1_R__
 0x0200

	)

2221 
	#__MSP430_HAS_PORT2_R__


	)

2222 
	#__MSP430_BASEADDRESS_PORT2_R__
 0x0200

	)

2223 
	#__MSP430_HAS_PORTA_R__


	)

2224 
	#__MSP430_BASEADDRESS_PORTA_R__
 0x0200

	)

2226 
SFR_16BIT
(
PAIN
);

2227 
SFR_8BIT
(
PAIN_L
);

2228 
SFR_8BIT
(
PAIN_H
);

2229 
SFR_16BIT
(
PAOUT
);

2230 
SFR_8BIT
(
PAOUT_L
);

2231 
SFR_8BIT
(
PAOUT_H
);

2232 
SFR_16BIT
(
PADIR
);

2233 
SFR_8BIT
(
PADIR_L
);

2234 
SFR_8BIT
(
PADIR_H
);

2235 
SFR_16BIT
(
PAREN
);

2236 
SFR_8BIT
(
PAREN_L
);

2237 
SFR_8BIT
(
PAREN_H
);

2238 
SFR_16BIT
(
PADS
);

2239 
SFR_8BIT
(
PADS_L
);

2240 
SFR_8BIT
(
PADS_H
);

2241 
SFR_16BIT
(
PASEL
);

2242 
SFR_8BIT
(
PASEL_L
);

2243 
SFR_8BIT
(
PASEL_H
);

2244 
SFR_16BIT
(
PAIES
);

2245 
SFR_8BIT
(
PAIES_L
);

2246 
SFR_8BIT
(
PAIES_H
);

2247 
SFR_16BIT
(
PAIE
);

2248 
SFR_8BIT
(
PAIE_L
);

2249 
SFR_8BIT
(
PAIE_H
);

2250 
SFR_16BIT
(
PAIFG
);

2251 
SFR_8BIT
(
PAIFG_L
);

2252 
SFR_8BIT
(
PAIFG_H
);

2255 
SFR_16BIT
(
P1IV
);

2256 
SFR_16BIT
(
P2IV
);

2257 
	#P1IN
 (
PAIN_L
Ë

	)

2258 
	#P1OUT
 (
PAOUT_L
Ë

	)

2259 
	#P1DIR
 (
PADIR_L
Ë

	)

2260 
	#P1REN
 (
PAREN_L
Ë

	)

2261 
	#P1DS
 (
PADS_L
Ë

	)

2262 
	#P1SEL
 (
PASEL_L
Ë

	)

2263 
	#P1IES
 (
PAIES_L
Ë

	)

2264 
	#P1IE
 (
PAIE_L
Ë

	)

2265 
	#P1IFG
 (
PAIFG_L
Ë

	)

2268 
	#P1IV_NONE
 (0x0000Ë

	)

2269 
	#P1IV_P1IFG0
 (0x0002Ë

	)

2270 
	#P1IV_P1IFG1
 (0x0004Ë

	)

2271 
	#P1IV_P1IFG2
 (0x0006Ë

	)

2272 
	#P1IV_P1IFG3
 (0x0008Ë

	)

2273 
	#P1IV_P1IFG4
 (0x000AË

	)

2274 
	#P1IV_P1IFG5
 (0x000CË

	)

2275 
	#P1IV_P1IFG6
 (0x000EË

	)

2276 
	#P1IV_P1IFG7
 (0x0010Ë

	)

2278 
	#P2IN
 (
PAIN_H
Ë

	)

2279 
	#P2OUT
 (
PAOUT_H
Ë

	)

2280 
	#P2DIR
 (
PADIR_H
Ë

	)

2281 
	#P2REN
 (
PAREN_H
Ë

	)

2282 
	#P2DS
 (
PADS_H
Ë

	)

2283 
	#P2SEL
 (
PASEL_H
Ë

	)

2284 
	#P2IES
 (
PAIES_H
Ë

	)

2285 
	#P2IE
 (
PAIE_H
Ë

	)

2286 
	#P2IFG
 (
PAIFG_H
Ë

	)

2289 
	#P2IV_NONE
 (0x0000Ë

	)

2290 
	#P2IV_P2IFG0
 (0x0002Ë

	)

2291 
	#P2IV_P2IFG1
 (0x0004Ë

	)

2292 
	#P2IV_P2IFG2
 (0x0006Ë

	)

2293 
	#P2IV_P2IFG3
 (0x0008Ë

	)

2294 
	#P2IV_P2IFG4
 (0x000AË

	)

2295 
	#P2IV_P2IFG5
 (0x000CË

	)

2296 
	#P2IV_P2IFG6
 (0x000EË

	)

2297 
	#P2IV_P2IFG7
 (0x0010Ë

	)

2303 
	#__MSP430_HAS_PORT3_R__


	)

2304 
	#__MSP430_BASEADDRESS_PORT3_R__
 0x0220

	)

2305 
	#__MSP430_HAS_PORT4_R__


	)

2306 
	#__MSP430_BASEADDRESS_PORT4_R__
 0x0220

	)

2307 
	#__MSP430_HAS_PORTB_R__


	)

2308 
	#__MSP430_BASEADDRESS_PORTB_R__
 0x0220

	)

2310 
SFR_16BIT
(
PBIN
);

2311 
SFR_8BIT
(
PBIN_L
);

2312 
SFR_8BIT
(
PBIN_H
);

2313 
SFR_16BIT
(
PBOUT
);

2314 
SFR_8BIT
(
PBOUT_L
);

2315 
SFR_8BIT
(
PBOUT_H
);

2316 
SFR_16BIT
(
PBDIR
);

2317 
SFR_8BIT
(
PBDIR_L
);

2318 
SFR_8BIT
(
PBDIR_H
);

2319 
SFR_16BIT
(
PBREN
);

2320 
SFR_8BIT
(
PBREN_L
);

2321 
SFR_8BIT
(
PBREN_H
);

2322 
SFR_16BIT
(
PBDS
);

2323 
SFR_8BIT
(
PBDS_L
);

2324 
SFR_8BIT
(
PBDS_H
);

2325 
SFR_16BIT
(
PBSEL
);

2326 
SFR_8BIT
(
PBSEL_L
);

2327 
SFR_8BIT
(
PBSEL_H
);

2330 
	#P3IN
 (
PBIN_L
Ë

	)

2331 
	#P3OUT
 (
PBOUT_L
Ë

	)

2332 
	#P3DIR
 (
PBDIR_L
Ë

	)

2333 
	#P3REN
 (
PBREN_L
Ë

	)

2334 
	#P3DS
 (
PBDS_L
Ë

	)

2335 
	#P3SEL
 (
PBSEL_L
Ë

	)

2337 
	#P4IN
 (
PBIN_H
Ë

	)

2338 
	#P4OUT
 (
PBOUT_H
Ë

	)

2339 
	#P4DIR
 (
PBDIR_H
Ë

	)

2340 
	#P4REN
 (
PBREN_H
Ë

	)

2341 
	#P4DS
 (
PBDS_H
Ë

	)

2342 
	#P4SEL
 (
PBSEL_H
Ë

	)

2348 
	#__MSP430_HAS_PORT5_R__


	)

2349 
	#__MSP430_BASEADDRESS_PORT5_R__
 0x0240

	)

2350 
	#__MSP430_HAS_PORTC_R__


	)

2351 
	#__MSP430_BASEADDRESS_PORTC_R__
 0x0240

	)

2353 
SFR_16BIT
(
PCIN
);

2354 
SFR_8BIT
(
PCIN_L
);

2355 
SFR_8BIT
(
PCIN_H
);

2356 
SFR_16BIT
(
PCOUT
);

2357 
SFR_8BIT
(
PCOUT_L
);

2358 
SFR_8BIT
(
PCOUT_H
);

2359 
SFR_16BIT
(
PCDIR
);

2360 
SFR_8BIT
(
PCDIR_L
);

2361 
SFR_8BIT
(
PCDIR_H
);

2362 
SFR_16BIT
(
PCREN
);

2363 
SFR_8BIT
(
PCREN_L
);

2364 
SFR_8BIT
(
PCREN_H
);

2365 
SFR_16BIT
(
PCDS
);

2366 
SFR_8BIT
(
PCDS_L
);

2367 
SFR_8BIT
(
PCDS_H
);

2368 
SFR_16BIT
(
PCSEL
);

2369 
SFR_8BIT
(
PCSEL_L
);

2370 
SFR_8BIT
(
PCSEL_H
);

2373 
	#P5IN
 (
PCIN_L
Ë

	)

2374 
	#P5OUT
 (
PCOUT_L
Ë

	)

2375 
	#P5DIR
 (
PCDIR_L
Ë

	)

2376 
	#P5REN
 (
PCREN_L
Ë

	)

2377 
	#P5DS
 (
PCDS_L
Ë

	)

2378 
	#P5SEL
 (
PCSEL_L
Ë

	)

2384 
	#__MSP430_HAS_PORTJ_R__


	)

2385 
	#__MSP430_BASEADDRESS_PORTJ_R__
 0x0320

	)

2387 
SFR_16BIT
(
PJIN
);

2388 
SFR_8BIT
(
PJIN_L
);

2389 
SFR_8BIT
(
PJIN_H
);

2390 
SFR_16BIT
(
PJOUT
);

2391 
SFR_8BIT
(
PJOUT_L
);

2392 
SFR_8BIT
(
PJOUT_H
);

2393 
SFR_16BIT
(
PJDIR
);

2394 
SFR_8BIT
(
PJDIR_L
);

2395 
SFR_8BIT
(
PJDIR_H
);

2396 
SFR_16BIT
(
PJREN
);

2397 
SFR_8BIT
(
PJREN_L
);

2398 
SFR_8BIT
(
PJREN_H
);

2399 
SFR_16BIT
(
PJDS
);

2400 
SFR_8BIT
(
PJDS_L
);

2401 
SFR_8BIT
(
PJDS_H
);

2406 
	#__MSP430_HAS_PORT_MAPPING__


	)

2407 
	#__MSP430_BASEADDRESS_PORT_MAPPING__
 0x01C0

	)

2409 
SFR_16BIT
(
PMAPKEYID
);

2410 
SFR_8BIT
(
PMAPKEYID_L
);

2411 
SFR_8BIT
(
PMAPKEYID_H
);

2412 
SFR_16BIT
(
PMAPCTL
);

2413 
SFR_8BIT
(
PMAPCTL_L
);

2414 
SFR_8BIT
(
PMAPCTL_H
);

2416 
	#PMAPKEY
 (0x2D52Ë

	)

2417 
	#PMAPPWD
 
PMAPKEYID


	)

2418 
	#PMAPPW
 (0x2D52Ë

	)

2421 
	#PMAPLOCKED
 (0x0001Ë

	)

2422 
	#PMAPRECFG
 (0x0002Ë

	)

2425 
	#PMAPLOCKED_L
 (0x0001Ë

	)

2426 
	#PMAPRECFG_L
 (0x0002Ë

	)

2433 
	#__MSP430_HAS_PORT1_MAPPING__


	)

2434 
	#__MSP430_BASEADDRESS_PORT1_MAPPING__
 0x01C8

	)

2436 
SFR_16BIT
(
P1MAP01
);

2437 
SFR_8BIT
(
P1MAP01_L
);

2438 
SFR_8BIT
(
P1MAP01_H
);

2439 
SFR_16BIT
(
P1MAP23
);

2440 
SFR_8BIT
(
P1MAP23_L
);

2441 
SFR_8BIT
(
P1MAP23_H
);

2442 
SFR_16BIT
(
P1MAP45
);

2443 
SFR_8BIT
(
P1MAP45_L
);

2444 
SFR_8BIT
(
P1MAP45_H
);

2445 
SFR_16BIT
(
P1MAP67
);

2446 
SFR_8BIT
(
P1MAP67_L
);

2447 
SFR_8BIT
(
P1MAP67_H
);

2449 
	#P1MAP0
 
P1MAP01_L


	)

2450 
	#P1MAP1
 
P1MAP01_H


	)

2451 
	#P1MAP2
 
P1MAP23_L


	)

2452 
	#P1MAP3
 
P1MAP23_H


	)

2453 
	#P1MAP4
 
P1MAP45_L


	)

2454 
	#P1MAP5
 
P1MAP45_H


	)

2455 
	#P1MAP6
 
P1MAP67_L


	)

2456 
	#P1MAP7
 
P1MAP67_H


	)

2461 
	#__MSP430_HAS_PORT2_MAPPING__


	)

2462 
	#__MSP430_BASEADDRESS_PORT2_MAPPING__
 0x01D0

	)

2464 
SFR_16BIT
(
P2MAP01
);

2465 
SFR_8BIT
(
P2MAP01_L
);

2466 
SFR_8BIT
(
P2MAP01_H
);

2467 
SFR_16BIT
(
P2MAP23
);

2468 
SFR_8BIT
(
P2MAP23_L
);

2469 
SFR_8BIT
(
P2MAP23_H
);

2470 
SFR_16BIT
(
P2MAP45
);

2471 
SFR_8BIT
(
P2MAP45_L
);

2472 
SFR_8BIT
(
P2MAP45_H
);

2473 
SFR_16BIT
(
P2MAP67
);

2474 
SFR_8BIT
(
P2MAP67_L
);

2475 
SFR_8BIT
(
P2MAP67_H
);

2477 
	#P2MAP0
 
P2MAP01_L


	)

2478 
	#P2MAP1
 
P2MAP01_H


	)

2479 
	#P2MAP2
 
P2MAP23_L


	)

2480 
	#P2MAP3
 
P2MAP23_H


	)

2481 
	#P2MAP4
 
P2MAP45_L


	)

2482 
	#P2MAP5
 
P2MAP45_H


	)

2483 
	#P2MAP6
 
P2MAP67_L


	)

2484 
	#P2MAP7
 
P2MAP67_H


	)

2489 
	#__MSP430_HAS_PORT3_MAPPING__


	)

2490 
	#__MSP430_BASEADDRESS_PORT3_MAPPING__
 0x01D8

	)

2492 
SFR_16BIT
(
P3MAP01
);

2493 
SFR_8BIT
(
P3MAP01_L
);

2494 
SFR_8BIT
(
P3MAP01_H
);

2495 
SFR_16BIT
(
P3MAP23
);

2496 
SFR_8BIT
(
P3MAP23_L
);

2497 
SFR_8BIT
(
P3MAP23_H
);

2498 
SFR_16BIT
(
P3MAP45
);

2499 
SFR_8BIT
(
P3MAP45_L
);

2500 
SFR_8BIT
(
P3MAP45_H
);

2501 
SFR_16BIT
(
P3MAP67
);

2502 
SFR_8BIT
(
P3MAP67_L
);

2503 
SFR_8BIT
(
P3MAP67_H
);

2505 
	#P3MAP0
 
P3MAP01_L


	)

2506 
	#P3MAP1
 
P3MAP01_H


	)

2507 
	#P3MAP2
 
P3MAP23_L


	)

2508 
	#P3MAP3
 
P3MAP23_H


	)

2509 
	#P3MAP4
 
P3MAP45_L


	)

2510 
	#P3MAP5
 
P3MAP45_H


	)

2511 
	#P3MAP6
 
P3MAP67_L


	)

2512 
	#P3MAP7
 
P3MAP67_H


	)

2514 
	#PM_NONE
 0

	)

2515 
	#PM_CBOUT0
 1

	)

2516 
	#PM_TA0CLK
 1

	)

2517 
	#PM_CBOUT1
 2

	)

2518 
	#PM_TA1CLK
 2

	)

2519 
	#PM_ACLK
 3

	)

2520 
	#PM_MCLK
 4

	)

2521 
	#PM_SMCLK
 5

	)

2522 
	#PM_RTCCLK
 6

	)

2523 
	#PM_MODCLK
 7

	)

2524 
	#PM_DMAE0
 7

	)

2525 
	#PM_SVMOUT
 8

	)

2526 
	#PM_TA0CCR0A
 9

	)

2527 
	#PM_TA0CCR1A
 10

	)

2528 
	#PM_TA0CCR2A
 11

	)

2529 
	#PM_TA0CCR3A
 12

	)

2530 
	#PM_TA0CCR4A
 13

	)

2531 
	#PM_TA1CCR0A
 14

	)

2532 
	#PM_TA1CCR1A
 15

	)

2533 
	#PM_TA1CCR2A
 16

	)

2534 
	#PM_UCA0RXD
 17

	)

2535 
	#PM_UCA0SOMI
 17

	)

2536 
	#PM_UCA0TXD
 18

	)

2537 
	#PM_UCA0SIMO
 18

	)

2538 
	#PM_UCA0CLK
 19

	)

2539 
	#PM_UCB0STE
 19

	)

2540 
	#PM_UCB0SOMI
 20

	)

2541 
	#PM_UCB0SCL
 20

	)

2542 
	#PM_UCB0SIMO
 21

	)

2543 
	#PM_UCB0SDA
 21

	)

2544 
	#PM_UCB0CLK
 22

	)

2545 
	#PM_UCA0STE
 22

	)

2546 
	#PM_RFGDO0
 23

	)

2547 
	#PM_RFGDO1
 24

	)

2548 
	#PM_RFGDO2
 25

	)

2549 
	#PM_ANALOG
 31

	)

2554 
	#__MSP430_HAS_PMM__


	)

2555 
	#__MSP430_BASEADDRESS_PMM__
 0x0120

	)

2557 
SFR_16BIT
(
PMMCTL0
);

2558 
SFR_8BIT
(
PMMCTL0_L
);

2559 
SFR_8BIT
(
PMMCTL0_H
);

2560 
SFR_16BIT
(
PMMCTL1
);

2561 
SFR_8BIT
(
PMMCTL1_L
);

2562 
SFR_8BIT
(
PMMCTL1_H
);

2563 
SFR_16BIT
(
SVSMHCTL
);

2564 
SFR_8BIT
(
SVSMHCTL_L
);

2565 
SFR_8BIT
(
SVSMHCTL_H
);

2566 
SFR_16BIT
(
SVSMLCTL
);

2567 
SFR_8BIT
(
SVSMLCTL_L
);

2568 
SFR_8BIT
(
SVSMLCTL_H
);

2569 
SFR_16BIT
(
SVSMIO
);

2570 
SFR_8BIT
(
SVSMIO_L
);

2571 
SFR_8BIT
(
SVSMIO_H
);

2572 
SFR_16BIT
(
PMMIFG
);

2573 
SFR_8BIT
(
PMMIFG_L
);

2574 
SFR_8BIT
(
PMMIFG_H
);

2575 
SFR_16BIT
(
PMMRIE
);

2576 
SFR_8BIT
(
PMMRIE_L
);

2577 
SFR_8BIT
(
PMMRIE_H
);

2578 
SFR_16BIT
(
PM5CTL0
);

2579 
SFR_8BIT
(
PM5CTL0_L
);

2580 
SFR_8BIT
(
PM5CTL0_H
);

2582 
	#PMMPW
 (0xA500Ë

	)

2583 
	#PMMPW_H
 (0xA5Ë

	)

2586 
	#PMMCOREV0
 (0x0001Ë

	)

2587 
	#PMMCOREV1
 (0x0002Ë

	)

2588 
	#PMMSWBOR
 (0x0004Ë

	)

2589 
	#PMMSWPOR
 (0x0008Ë

	)

2590 
	#PMMREGOFF
 (0x0010Ë

	)

2591 
	#PMMHPMRE
 (0x0080Ë

	)

2594 
	#PMMCOREV0_L
 (0x0001Ë

	)

2595 
	#PMMCOREV1_L
 (0x0002Ë

	)

2596 
	#PMMSWBOR_L
 (0x0004Ë

	)

2597 
	#PMMSWPOR_L
 (0x0008Ë

	)

2598 
	#PMMREGOFF_L
 (0x0010Ë

	)

2599 
	#PMMHPMRE_L
 (0x0080Ë

	)

2603 
	#PMMCOREV_0
 (0x0000Ë

	)

2604 
	#PMMCOREV_1
 (0x0001Ë

	)

2605 
	#PMMCOREV_2
 (0x0002Ë

	)

2606 
	#PMMCOREV_3
 (0x0003Ë

	)

2609 
	#PMMREFMD
 (0x0001Ë

	)

2610 
	#PMMCMD0
 (0x0010Ë

	)

2611 
	#PMMCMD1
 (0x0020Ë

	)

2614 
	#PMMREFMD_L
 (0x0001Ë

	)

2615 
	#PMMCMD0_L
 (0x0010Ë

	)

2616 
	#PMMCMD1_L
 (0x0020Ë

	)

2621 
	#SVSMHRRL0
 (0x0001Ë

	)

2622 
	#SVSMHRRL1
 (0x0002Ë

	)

2623 
	#SVSMHRRL2
 (0x0004Ë

	)

2624 
	#SVSMHDLYST
 (0x0008Ë

	)

2625 
	#SVSHMD
 (0x0010Ë

	)

2626 
	#SVSMHEVM
 (0x0040Ë

	)

2627 
	#SVSMHACE
 (0x0080Ë

	)

2628 
	#SVSHRVL0
 (0x0100Ë

	)

2629 
	#SVSHRVL1
 (0x0200Ë

	)

2630 
	#SVSHE
 (0x0400Ë

	)

2631 
	#SVSHFP
 (0x0800Ë

	)

2632 
	#SVMHOVPE
 (0x1000Ë

	)

2633 
	#SVMHE
 (0x4000Ë

	)

2634 
	#SVMHFP
 (0x8000Ë

	)

2637 
	#SVSMHRRL0_L
 (0x0001Ë

	)

2638 
	#SVSMHRRL1_L
 (0x0002Ë

	)

2639 
	#SVSMHRRL2_L
 (0x0004Ë

	)

2640 
	#SVSMHDLYST_L
 (0x0008Ë

	)

2641 
	#SVSHMD_L
 (0x0010Ë

	)

2642 
	#SVSMHEVM_L
 (0x0040Ë

	)

2643 
	#SVSMHACE_L
 (0x0080Ë

	)

2646 
	#SVSHRVL0_H
 (0x0001Ë

	)

2647 
	#SVSHRVL1_H
 (0x0002Ë

	)

2648 
	#SVSHE_H
 (0x0004Ë

	)

2649 
	#SVSHFP_H
 (0x0008Ë

	)

2650 
	#SVMHOVPE_H
 (0x0010Ë

	)

2651 
	#SVMHE_H
 (0x0040Ë

	)

2652 
	#SVMHFP_H
 (0x0080Ë

	)

2654 
	#SVSMHRRL_0
 (0x0000Ë

	)

2655 
	#SVSMHRRL_1
 (0x0001Ë

	)

2656 
	#SVSMHRRL_2
 (0x0002Ë

	)

2657 
	#SVSMHRRL_3
 (0x0003Ë

	)

2658 
	#SVSMHRRL_4
 (0x0004Ë

	)

2659 
	#SVSMHRRL_5
 (0x0005Ë

	)

2660 
	#SVSMHRRL_6
 (0x0006Ë

	)

2661 
	#SVSMHRRL_7
 (0x0007Ë

	)

2663 
	#SVSHRVL_0
 (0x0000Ë

	)

2664 
	#SVSHRVL_1
 (0x0100Ë

	)

2665 
	#SVSHRVL_2
 (0x0200Ë

	)

2666 
	#SVSHRVL_3
 (0x0300Ë

	)

2669 
	#SVSMLRRL0
 (0x0001Ë

	)

2670 
	#SVSMLRRL1
 (0x0002Ë

	)

2671 
	#SVSMLRRL2
 (0x0004Ë

	)

2672 
	#SVSMLDLYST
 (0x0008Ë

	)

2673 
	#SVSLMD
 (0x0010Ë

	)

2674 
	#SVSMLEVM
 (0x0040Ë

	)

2675 
	#SVSMLACE
 (0x0080Ë

	)

2676 
	#SVSLRVL0
 (0x0100Ë

	)

2677 
	#SVSLRVL1
 (0x0200Ë

	)

2678 
	#SVSLE
 (0x0400Ë

	)

2679 
	#SVSLFP
 (0x0800Ë

	)

2680 
	#SVMLOVPE
 (0x1000Ë

	)

2681 
	#SVMLE
 (0x4000Ë

	)

2682 
	#SVMLFP
 (0x8000Ë

	)

2685 
	#SVSMLRRL0_L
 (0x0001Ë

	)

2686 
	#SVSMLRRL1_L
 (0x0002Ë

	)

2687 
	#SVSMLRRL2_L
 (0x0004Ë

	)

2688 
	#SVSMLDLYST_L
 (0x0008Ë

	)

2689 
	#SVSLMD_L
 (0x0010Ë

	)

2690 
	#SVSMLEVM_L
 (0x0040Ë

	)

2691 
	#SVSMLACE_L
 (0x0080Ë

	)

2694 
	#SVSLRVL0_H
 (0x0001Ë

	)

2695 
	#SVSLRVL1_H
 (0x0002Ë

	)

2696 
	#SVSLE_H
 (0x0004Ë

	)

2697 
	#SVSLFP_H
 (0x0008Ë

	)

2698 
	#SVMLOVPE_H
 (0x0010Ë

	)

2699 
	#SVMLE_H
 (0x0040Ë

	)

2700 
	#SVMLFP_H
 (0x0080Ë

	)

2702 
	#SVSMLRRL_0
 (0x0000Ë

	)

2703 
	#SVSMLRRL_1
 (0x0001Ë

	)

2704 
	#SVSMLRRL_2
 (0x0002Ë

	)

2705 
	#SVSMLRRL_3
 (0x0003Ë

	)

2706 
	#SVSMLRRL_4
 (0x0004Ë

	)

2707 
	#SVSMLRRL_5
 (0x0005Ë

	)

2708 
	#SVSMLRRL_6
 (0x0006Ë

	)

2709 
	#SVSMLRRL_7
 (0x0007Ë

	)

2711 
	#SVSLRVL_0
 (0x0000Ë

	)

2712 
	#SVSLRVL_1
 (0x0100Ë

	)

2713 
	#SVSLRVL_2
 (0x0200Ë

	)

2714 
	#SVSLRVL_3
 (0x0300Ë

	)

2717 
	#SVMLOE
 (0x0008Ë

	)

2718 
	#SVMLVLROE
 (0x0010Ë

	)

2719 
	#SVMOUTPOL
 (0x0020Ë

	)

2720 
	#SVMHOE
 (0x0800Ë

	)

2721 
	#SVMHVLROE
 (0x1000Ë

	)

2724 
	#SVMLOE_L
 (0x0008Ë

	)

2725 
	#SVMLVLROE_L
 (0x0010Ë

	)

2726 
	#SVMOUTPOL_L
 (0x0020Ë

	)

2729 
	#SVMHOE_H
 (0x0008Ë

	)

2730 
	#SVMHVLROE_H
 (0x0010Ë

	)

2733 
	#SVSMLDLYIFG
 (0x0001Ë

	)

2734 
	#SVMLIFG
 (0x0002Ë

	)

2735 
	#SVMLVLRIFG
 (0x0004Ë

	)

2736 
	#SVSMHDLYIFG
 (0x0010Ë

	)

2737 
	#SVMHIFG
 (0x0020Ë

	)

2738 
	#SVMHVLRIFG
 (0x0040Ë

	)

2739 
	#PMMBORIFG
 (0x0100Ë

	)

2740 
	#PMMRSTIFG
 (0x0200Ë

	)

2741 
	#PMMPORIFG
 (0x0400Ë

	)

2742 
	#SVSHIFG
 (0x1000Ë

	)

2743 
	#SVSLIFG
 (0x2000Ë

	)

2744 
	#PMMLPM5IFG
 (0x8000Ë

	)

2747 
	#SVSMLDLYIFG_L
 (0x0001Ë

	)

2748 
	#SVMLIFG_L
 (0x0002Ë

	)

2749 
	#SVMLVLRIFG_L
 (0x0004Ë

	)

2750 
	#SVSMHDLYIFG_L
 (0x0010Ë

	)

2751 
	#SVMHIFG_L
 (0x0020Ë

	)

2752 
	#SVMHVLRIFG_L
 (0x0040Ë

	)

2755 
	#PMMBORIFG_H
 (0x0001Ë

	)

2756 
	#PMMRSTIFG_H
 (0x0002Ë

	)

2757 
	#PMMPORIFG_H
 (0x0004Ë

	)

2758 
	#SVSHIFG_H
 (0x0010Ë

	)

2759 
	#SVSLIFG_H
 (0x0020Ë

	)

2760 
	#PMMLPM5IFG_H
 (0x0080Ë

	)

2762 
	#PMMRSTLPM5IFG
 
PMMLPM5IFG


	)

2765 
	#SVSMLDLYIE
 (0x0001Ë

	)

2766 
	#SVMLIE
 (0x0002Ë

	)

2767 
	#SVMLVLRIE
 (0x0004Ë

	)

2768 
	#SVSMHDLYIE
 (0x0010Ë

	)

2769 
	#SVMHIE
 (0x0020Ë

	)

2770 
	#SVMHVLRIE
 (0x0040Ë

	)

2771 
	#SVSLPE
 (0x0100Ë

	)

2772 
	#SVMLVLRPE
 (0x0200Ë

	)

2773 
	#SVSHPE
 (0x1000Ë

	)

2774 
	#SVMHVLRPE
 (0x2000Ë

	)

2777 
	#SVSMLDLYIE_L
 (0x0001Ë

	)

2778 
	#SVMLIE_L
 (0x0002Ë

	)

2779 
	#SVMLVLRIE_L
 (0x0004Ë

	)

2780 
	#SVSMHDLYIE_L
 (0x0010Ë

	)

2781 
	#SVMHIE_L
 (0x0020Ë

	)

2782 
	#SVMHVLRIE_L
 (0x0040Ë

	)

2785 
	#SVSLPE_H
 (0x0001Ë

	)

2786 
	#SVMLVLRPE_H
 (0x0002Ë

	)

2787 
	#SVSHPE_H
 (0x0010Ë

	)

2788 
	#SVMHVLRPE_H
 (0x0020Ë

	)

2791 
	#LOCKLPM5
 (0x0001Ë

	)

2794 
	#LOCKLPM5_L
 (0x0001Ë

	)

2797 
	#LOCKIO
 
LOCKLPM5


	)

2802 
	#__MSP430_HAS_RC__


	)

2803 
	#__MSP430_BASEADDRESS_RC__
 0x0158

	)

2805 
SFR_16BIT
(
RCCTL0
);

2806 
SFR_8BIT
(
RCCTL0_L
);

2807 
SFR_8BIT
(
RCCTL0_H
);

2810 
	#RCRS0OFF
 (0x0001Ë

	)

2811 
	#RCRS1OFF
 (0x0002Ë

	)

2812 
	#RCRS2OFF
 (0x0004Ë

	)

2813 
	#RCRS3OFF
 (0x0008Ë

	)

2816 
	#RCRS0OFF_L
 (0x0001Ë

	)

2817 
	#RCRS1OFF_L
 (0x0002Ë

	)

2818 
	#RCRS2OFF_L
 (0x0004Ë

	)

2819 
	#RCRS3OFF_L
 (0x0008Ë

	)

2823 
	#RCKEY
 (0x5A00)

	)

2828 
	#__MSP430_HAS_REF__


	)

2829 
	#__MSP430_BASEADDRESS_REF__
 0x01B0

	)

2831 
SFR_16BIT
(
REFCTL0
);

2832 
SFR_8BIT
(
REFCTL0_L
);

2833 
SFR_8BIT
(
REFCTL0_H
);

2836 
	#REFON
 (0x0001Ë

	)

2837 
	#REFOUT
 (0x0002Ë

	)

2839 
	#REFTCOFF
 (0x0008Ë

	)

2840 
	#REFVSEL0
 (0x0010Ë

	)

2841 
	#REFVSEL1
 (0x0020Ë

	)

2843 
	#REFMSTR
 (0x0080Ë

	)

2844 
	#REFGENACT
 (0x0100Ë

	)

2845 
	#REFBGACT
 (0x0200Ë

	)

2846 
	#REFGENBUSY
 (0x0400Ë

	)

2847 
	#BGMODE
 (0x0800Ë

	)

2854 
	#REFON_L
 (0x0001Ë

	)

2855 
	#REFOUT_L
 (0x0002Ë

	)

2857 
	#REFTCOFF_L
 (0x0008Ë

	)

2858 
	#REFVSEL0_L
 (0x0010Ë

	)

2859 
	#REFVSEL1_L
 (0x0020Ë

	)

2861 
	#REFMSTR_L
 (0x0080Ë

	)

2870 
	#REFGENACT_H
 (0x0001Ë

	)

2871 
	#REFBGACT_H
 (0x0002Ë

	)

2872 
	#REFGENBUSY_H
 (0x0004Ë

	)

2873 
	#BGMODE_H
 (0x0008Ë

	)

2879 
	#REFVSEL_0
 (0x0000Ë

	)

2880 
	#REFVSEL_1
 (0x0010Ë

	)

2881 
	#REFVSEL_2
 (0x0020Ë

	)

2882 
	#REFVSEL_3
 (0x0030Ë

	)

2887 
	#__MSP430_HAS_RTC_D__


	)

2888 
	#__MSP430_BASEADDRESS_RTC_D__
 0x04A0

	)

2890 
SFR_16BIT
(
RTCCTL01
);

2891 
SFR_8BIT
(
RTCCTL01_L
);

2892 
SFR_8BIT
(
RTCCTL01_H
);

2893 
SFR_16BIT
(
RTCCTL23
);

2894 
SFR_8BIT
(
RTCCTL23_L
);

2895 
SFR_8BIT
(
RTCCTL23_H
);

2896 
SFR_16BIT
(
RTCPS0CTL
);

2897 
SFR_8BIT
(
RTCPS0CTL_L
);

2898 
SFR_8BIT
(
RTCPS0CTL_H
);

2899 
SFR_16BIT
(
RTCPS1CTL
);

2900 
SFR_8BIT
(
RTCPS1CTL_L
);

2901 
SFR_8BIT
(
RTCPS1CTL_H
);

2902 
SFR_16BIT
(
RTCPS
);

2903 
SFR_8BIT
(
RTCPS_L
);

2904 
SFR_8BIT
(
RTCPS_H
);

2905 
SFR_16BIT
(
RTCIV
);

2906 
SFR_16BIT
(
RTCTIM0
);

2907 
SFR_8BIT
(
RTCTIM0_L
);

2908 
SFR_8BIT
(
RTCTIM0_H
);

2909 
SFR_16BIT
(
RTCTIM1
);

2910 
SFR_8BIT
(
RTCTIM1_L
);

2911 
SFR_8BIT
(
RTCTIM1_H
);

2912 
SFR_16BIT
(
RTCDATE
);

2913 
SFR_8BIT
(
RTCDATE_L
);

2914 
SFR_8BIT
(
RTCDATE_H
);

2915 
SFR_16BIT
(
RTCYEAR
);

2916 
SFR_8BIT
(
RTCYEAR_L
);

2917 
SFR_8BIT
(
RTCYEAR_H
);

2918 
SFR_16BIT
(
RTCAMINHR
);

2919 
SFR_8BIT
(
RTCAMINHR_L
);

2920 
SFR_8BIT
(
RTCAMINHR_H
);

2921 
SFR_16BIT
(
RTCADOWDAY
);

2922 
SFR_8BIT
(
RTCADOWDAY_L
);

2923 
SFR_8BIT
(
RTCADOWDAY_H
);

2924 
SFR_16BIT
(
BIN2BCD
);

2925 
SFR_16BIT
(
BCD2BIN
);

2927 
	#RTCCTL0
 
RTCCTL01_L


	)

2928 
	#RTCCTL1
 
RTCCTL01_H


	)

2929 
	#RTCCTL2
 
RTCCTL23_L


	)

2930 
	#RTCCTL3
 
RTCCTL23_H


	)

2931 
	#RTCNT12
 
RTCTIM0


	)

2932 
	#RTCNT34
 
RTCTIM1


	)

2933 
	#RTCNT1
 
RTCTIM0_L


	)

2934 
	#RTCNT2
 
RTCTIM0_H


	)

2935 
	#RTCNT3
 
RTCTIM1_L


	)

2936 
	#RTCNT4
 
RTCTIM1_H


	)

2937 
	#RTCSEC
 
RTCTIM0_L


	)

2938 
	#RTCMIN
 
RTCTIM0_H


	)

2939 
	#RTCHOUR
 
RTCTIM1_L


	)

2940 
	#RTCDOW
 
RTCTIM1_H


	)

2941 
	#RTCDAY
 
RTCDATE_L


	)

2942 
	#RTCMON
 
RTCDATE_H


	)

2943 
	#RTCYEARL
 
RTCYEAR_L


	)

2944 
	#RTCYEARH
 
RTCYEAR_H


	)

2945 
	#RT0PS
 
RTCPS_L


	)

2946 
	#RT1PS
 
RTCPS_H


	)

2947 
	#RTCAMIN
 
RTCAMINHR_L


	)

2948 
	#RTCAHOUR
 
RTCAMINHR_H


	)

2949 
	#RTCADOW
 
RTCADOWDAY_L


	)

2950 
	#RTCADAY
 
RTCADOWDAY_H


	)

2953 
	#RTCBCD
 (0x8000Ë

	)

2954 
	#RTCHOLD
 (0x4000Ë

	)

2955 
	#RTCMODE
 (0x2000Ë

	)

2956 
	#RTCRDY
 (0x1000Ë

	)

2957 
	#RTCSSEL1
 (0x0800Ë

	)

2958 
	#RTCSSEL0
 (0x0400Ë

	)

2959 
	#RTCTEV1
 (0x0200Ë

	)

2960 
	#RTCTEV0
 (0x0100Ë

	)

2961 
	#RTCOFIE
 (0x0080Ë

	)

2962 
	#RTCTEVIE
 (0x0040Ë

	)

2963 
	#RTCAIE
 (0x0020Ë

	)

2964 
	#RTCRDYIE
 (0x0010Ë

	)

2965 
	#RTCOFIFG
 (0x0008Ë

	)

2966 
	#RTCTEVIFG
 (0x0004Ë

	)

2967 
	#RTCAIFG
 (0x0002Ë

	)

2968 
	#RTCRDYIFG
 (0x0001Ë

	)

2971 
	#RTCOFIE_L
 (0x0080Ë

	)

2972 
	#RTCTEVIE_L
 (0x0040Ë

	)

2973 
	#RTCAIE_L
 (0x0020Ë

	)

2974 
	#RTCRDYIE_L
 (0x0010Ë

	)

2975 
	#RTCOFIFG_L
 (0x0008Ë

	)

2976 
	#RTCTEVIFG_L
 (0x0004Ë

	)

2977 
	#RTCAIFG_L
 (0x0002Ë

	)

2978 
	#RTCRDYIFG_L
 (0x0001Ë

	)

2981 
	#RTCBCD_H
 (0x0080Ë

	)

2982 
	#RTCHOLD_H
 (0x0040Ë

	)

2983 
	#RTCMODE_H
 (0x0020Ë

	)

2984 
	#RTCRDY_H
 (0x0010Ë

	)

2985 
	#RTCSSEL1_H
 (0x0008Ë

	)

2986 
	#RTCSSEL0_H
 (0x0004Ë

	)

2987 
	#RTCTEV1_H
 (0x0002Ë

	)

2988 
	#RTCTEV0_H
 (0x0001Ë

	)

2990 
	#RTCSSEL_0
 (0x0000Ë

	)

2991 
	#RTCSSEL_1
 (0x0400Ë

	)

2992 
	#RTCSSEL_2
 (0x0800Ë

	)

2993 
	#RTCSSEL_3
 (0x0C00Ë

	)

2994 
	#RTCSSEL__ACLK
 (0x0000Ë

	)

2995 
	#RTCSSEL__SMCLK
 (0x0400Ë

	)

2996 
	#RTCSSEL__RT1PS
 (0x0800Ë

	)

2997 
	#RTCTEV_0
 (0x0000Ë

	)

2998 
	#RTCTEV_1
 (0x0100Ë

	)

2999 
	#RTCTEV_2
 (0x0200Ë

	)

3000 
	#RTCTEV_3
 (0x0300Ë

	)

3001 
	#RTCTEV__MIN
 (0x0000Ë

	)

3002 
	#RTCTEV__HOUR
 (0x0100Ë

	)

3003 
	#RTCTEV__0000
 (0x0200Ë

	)

3004 
	#RTCTEV__1200
 (0x0300Ë

	)

3007 
	#RTCCALF1
 (0x0200Ë

	)

3008 
	#RTCCALF0
 (0x0100Ë

	)

3009 
	#RTCCALS
 (0x0080Ë

	)

3011 
	#RTCCAL5
 (0x0020Ë

	)

3012 
	#RTCCAL4
 (0x0010Ë

	)

3013 
	#RTCCAL3
 (0x0008Ë

	)

3014 
	#RTCCAL2
 (0x0004Ë

	)

3015 
	#RTCCAL1
 (0x0002Ë

	)

3016 
	#RTCCAL0
 (0x0001Ë

	)

3019 
	#RTCCALS_L
 (0x0080Ë

	)

3021 
	#RTCCAL5_L
 (0x0020Ë

	)

3022 
	#RTCCAL4_L
 (0x0010Ë

	)

3023 
	#RTCCAL3_L
 (0x0008Ë

	)

3024 
	#RTCCAL2_L
 (0x0004Ë

	)

3025 
	#RTCCAL1_L
 (0x0002Ë

	)

3026 
	#RTCCAL0_L
 (0x0001Ë

	)

3029 
	#RTCCALF1_H
 (0x0002Ë

	)

3030 
	#RTCCALF0_H
 (0x0001Ë

	)

3033 
	#RTCCALF_0
 (0x0000Ë

	)

3034 
	#RTCCALF_1
 (0x0100Ë

	)

3035 
	#RTCCALF_2
 (0x0200Ë

	)

3036 
	#RTCCALF_3
 (0x0300Ë

	)

3041 
	#RT0PSDIV2
 (0x2000Ë

	)

3042 
	#RT0PSDIV1
 (0x1000Ë

	)

3043 
	#RT0PSDIV0
 (0x0800Ë

	)

3046 
	#RT0PSHOLD
 (0x0100Ë

	)

3050 
	#RT0IP2
 (0x0010Ë

	)

3051 
	#RT0IP1
 (0x0008Ë

	)

3052 
	#RT0IP0
 (0x0004Ë

	)

3053 
	#RT0PSIE
 (0x0002Ë

	)

3054 
	#RT0PSIFG
 (0x0001Ë

	)

3064 
	#RT0IP2_L
 (0x0010Ë

	)

3065 
	#RT0IP1_L
 (0x0008Ë

	)

3066 
	#RT0IP0_L
 (0x0004Ë

	)

3067 
	#RT0PSIE_L
 (0x0002Ë

	)

3068 
	#RT0PSIFG_L
 (0x0001Ë

	)

3073 
	#RT0PSDIV2_H
 (0x0020Ë

	)

3074 
	#RT0PSDIV1_H
 (0x0010Ë

	)

3075 
	#RT0PSDIV0_H
 (0x0008Ë

	)

3078 
	#RT0PSHOLD_H
 (0x0001Ë

	)

3083 
	#RT0IP_0
 (0x0000Ë

	)

3084 
	#RT0IP_1
 (0x0004Ë

	)

3085 
	#RT0IP_2
 (0x0008Ë

	)

3086 
	#RT0IP_3
 (0x000CË

	)

3087 
	#RT0IP_4
 (0x0010Ë

	)

3088 
	#RT0IP_5
 (0x0014Ë

	)

3089 
	#RT0IP_6
 (0x0018Ë

	)

3090 
	#RT0IP_7
 (0x001CË

	)

3092 
	#RT0PSDIV_0
 (0x0000Ë

	)

3093 
	#RT0PSDIV_1
 (0x0800Ë

	)

3094 
	#RT0PSDIV_2
 (0x1000Ë

	)

3095 
	#RT0PSDIV_3
 (0x1800Ë

	)

3096 
	#RT0PSDIV_4
 (0x2000Ë

	)

3097 
	#RT0PSDIV_5
 (0x2800Ë

	)

3098 
	#RT0PSDIV_6
 (0x3000Ë

	)

3099 
	#RT0PSDIV_7
 (0x3800Ë

	)

3102 
	#RT1SSEL1
 (0x8000Ë

	)

3103 
	#RT1SSEL0
 (0x4000Ë

	)

3104 
	#RT1PSDIV2
 (0x2000Ë

	)

3105 
	#RT1PSDIV1
 (0x1000Ë

	)

3106 
	#RT1PSDIV0
 (0x0800Ë

	)

3109 
	#RT1PSHOLD
 (0x0100Ë

	)

3113 
	#RT1IP2
 (0x0010Ë

	)

3114 
	#RT1IP1
 (0x0008Ë

	)

3115 
	#RT1IP0
 (0x0004Ë

	)

3116 
	#RT1PSIE
 (0x0002Ë

	)

3117 
	#RT1PSIFG
 (0x0001Ë

	)

3125 
	#RT1IP2_L
 (0x0010Ë

	)

3126 
	#RT1IP1_L
 (0x0008Ë

	)

3127 
	#RT1IP0_L
 (0x0004Ë

	)

3128 
	#RT1PSIE_L
 (0x0002Ë

	)

3129 
	#RT1PSIFG_L
 (0x0001Ë

	)

3132 
	#RT1SSEL1_H
 (0x0080Ë

	)

3133 
	#RT1SSEL0_H
 (0x0040Ë

	)

3134 
	#RT1PSDIV2_H
 (0x0020Ë

	)

3135 
	#RT1PSDIV1_H
 (0x0010Ë

	)

3136 
	#RT1PSDIV0_H
 (0x0008Ë

	)

3139 
	#RT1PSHOLD_H
 (0x0001Ë

	)

3144 
	#RT1IP_0
 (0x0000Ë

	)

3145 
	#RT1IP_1
 (0x0004Ë

	)

3146 
	#RT1IP_2
 (0x0008Ë

	)

3147 
	#RT1IP_3
 (0x000CË

	)

3148 
	#RT1IP_4
 (0x0010Ë

	)

3149 
	#RT1IP_5
 (0x0014Ë

	)

3150 
	#RT1IP_6
 (0x0018Ë

	)

3151 
	#RT1IP_7
 (0x001CË

	)

3153 
	#RT1PSDIV_0
 (0x0000Ë

	)

3154 
	#RT1PSDIV_1
 (0x0800Ë

	)

3155 
	#RT1PSDIV_2
 (0x1000Ë

	)

3156 
	#RT1PSDIV_3
 (0x1800Ë

	)

3157 
	#RT1PSDIV_4
 (0x2000Ë

	)

3158 
	#RT1PSDIV_5
 (0x2800Ë

	)

3159 
	#RT1PSDIV_6
 (0x3000Ë

	)

3160 
	#RT1PSDIV_7
 (0x3800Ë

	)

3162 
	#RT1SSEL_0
 (0x0000Ë

	)

3163 
	#RT1SSEL_1
 (0x4000Ë

	)

3164 
	#RT1SSEL_2
 (0x8000Ë

	)

3165 
	#RT1SSEL_3
 (0xC000Ë

	)

3166 
	#RT1SSEL__ACLK
 (0x0000Ë

	)

3167 
	#RT1SSEL__SMCLK
 (0x4000Ë

	)

3168 
	#RT1SSEL__RT0PS
 (0x8000Ë

	)

3171 
	#RTCIV_NONE
 (0x0000Ë

	)

3172 
	#RTCIV_RTCRDYIFG
 (0x0002Ë

	)

3173 
	#RTCIV_RTCTEVIFG
 (0x0004Ë

	)

3174 
	#RTCIV_RTCAIFG
 (0x0006Ë

	)

3175 
	#RTCIV_RT0PSIFG
 (0x0008Ë

	)

3176 
	#RTCIV_RT1PSIFG
 (0x000AË

	)

3177 
	#RTCIV_RTCOFIFG
 (0x000CË

	)

3180 
	#RTC_NONE
 (0x0000Ë

	)

3181 
	#RTC_RTCRDYIFG
 (0x0002Ë

	)

3182 
	#RTC_RTCTEVIFG
 (0x0004Ë

	)

3183 
	#RTC_RTCAIFG
 (0x0006Ë

	)

3184 
	#RTC_RT0PSIFG
 (0x0008Ë

	)

3185 
	#RTC_RT1PSIFG
 (0x000AË

	)

3186 
	#RTC_RTCOFIFG
 (0x000CË

	)

3192 
	#__MSP430_HAS_SFR__


	)

3193 
	#__MSP430_BASEADDRESS_SFR__
 0x0100

	)

3195 
SFR_16BIT
(
SFRIE1
);

3196 
SFR_8BIT
(
SFRIE1_L
);

3197 
SFR_8BIT
(
SFRIE1_H
);

3200 
	#WDTIE
 (0x0001Ë

	)

3201 
	#OFIE
 (0x0002Ë

	)

3203 
	#VMAIE
 (0x0008Ë

	)

3204 
	#NMIIE
 (0x0010Ë

	)

3205 
	#ACCVIE
 (0x0020Ë

	)

3206 
	#JMBINIE
 (0x0040Ë

	)

3207 
	#JMBOUTIE
 (0x0080Ë

	)

3209 
	#WDTIE_L
 (0x0001Ë

	)

3210 
	#OFIE_L
 (0x0002Ë

	)

3212 
	#VMAIE_L
 (0x0008Ë

	)

3213 
	#NMIIE_L
 (0x0010Ë

	)

3214 
	#ACCVIE_L
 (0x0020Ë

	)

3215 
	#JMBINIE_L
 (0x0040Ë

	)

3216 
	#JMBOUTIE_L
 (0x0080Ë

	)

3220 
SFR_16BIT
(
SFRIFG1
);

3221 
SFR_8BIT
(
SFRIFG1_L
);

3222 
SFR_8BIT
(
SFRIFG1_H
);

3224 
	#WDTIFG
 (0x0001Ë

	)

3225 
	#OFIFG
 (0x0002Ë

	)

3227 
	#VMAIFG
 (0x0008Ë

	)

3228 
	#NMIIFG
 (0x0010Ë

	)

3230 
	#JMBINIFG
 (0x0040Ë

	)

3231 
	#JMBOUTIFG
 (0x0080Ë

	)

3233 
	#WDTIFG_L
 (0x0001Ë

	)

3234 
	#OFIFG_L
 (0x0002Ë

	)

3236 
	#VMAIFG_L
 (0x0008Ë

	)

3237 
	#NMIIFG_L
 (0x0010Ë

	)

3239 
	#JMBINIFG_L
 (0x0040Ë

	)

3240 
	#JMBOUTIFG_L
 (0x0080Ë

	)

3245 
SFR_16BIT
(
SFRRPCR
);

3246 
SFR_8BIT
(
SFRRPCR_L
);

3247 
SFR_8BIT
(
SFRRPCR_H
);

3249 
	#SYSNMI
 (0x0001Ë

	)

3250 
	#SYSNMIIES
 (0x0002Ë

	)

3251 
	#SYSRSTUP
 (0x0004Ë

	)

3252 
	#SYSRSTRE
 (0x0008Ë

	)

3254 
	#SYSNMI_L
 (0x0001Ë

	)

3255 
	#SYSNMIIES_L
 (0x0002Ë

	)

3256 
	#SYSRSTUP_L
 (0x0004Ë

	)

3257 
	#SYSRSTRE_L
 (0x0008Ë

	)

3262 
	#__MSP430_HAS_SYS__


	)

3263 
	#__MSP430_BASEADDRESS_SYS__
 0x0180

	)

3265 
SFR_16BIT
(
SYSCTL
);

3266 
SFR_8BIT
(
SYSCTL_L
);

3267 
SFR_8BIT
(
SYSCTL_H
);

3268 
SFR_16BIT
(
SYSBSLC
);

3269 
SFR_8BIT
(
SYSBSLC_L
);

3270 
SFR_8BIT
(
SYSBSLC_H
);

3271 
SFR_16BIT
(
SYSJMBC
);

3272 
SFR_8BIT
(
SYSJMBC_L
);

3273 
SFR_8BIT
(
SYSJMBC_H
);

3274 
SFR_16BIT
(
SYSJMBI0
);

3275 
SFR_8BIT
(
SYSJMBI0_L
);

3276 
SFR_8BIT
(
SYSJMBI0_H
);

3277 
SFR_16BIT
(
SYSJMBI1
);

3278 
SFR_8BIT
(
SYSJMBI1_L
);

3279 
SFR_8BIT
(
SYSJMBI1_H
);

3280 
SFR_16BIT
(
SYSJMBO0
);

3281 
SFR_8BIT
(
SYSJMBO0_L
);

3282 
SFR_8BIT
(
SYSJMBO0_H
);

3283 
SFR_16BIT
(
SYSJMBO1
);

3284 
SFR_8BIT
(
SYSJMBO1_L
);

3285 
SFR_8BIT
(
SYSJMBO1_H
);

3287 
SFR_16BIT
(
SYSBERRIV
);

3288 
SFR_8BIT
(
SYSBERRIV_L
);

3289 
SFR_8BIT
(
SYSBERRIV_H
);

3290 
SFR_16BIT
(
SYSUNIV
);

3291 
SFR_8BIT
(
SYSUNIV_L
);

3292 
SFR_8BIT
(
SYSUNIV_H
);

3293 
SFR_16BIT
(
SYSSNIV
);

3294 
SFR_8BIT
(
SYSSNIV_L
);

3295 
SFR_8BIT
(
SYSSNIV_H
);

3296 
SFR_16BIT
(
SYSRSTIV
);

3297 
SFR_8BIT
(
SYSRSTIV_L
);

3298 
SFR_8BIT
(
SYSRSTIV_H
);

3301 
	#SYSRIVECT
 (0x0001Ë

	)

3303 
	#SYSPMMPE
 (0x0004Ë

	)

3305 
	#SYSBSLIND
 (0x0010Ë

	)

3306 
	#SYSJTAGPIN
 (0x0020Ë

	)

3319 
	#SYSRIVECT_L
 (0x0001Ë

	)

3321 
	#SYSPMMPE_L
 (0x0004Ë

	)

3323 
	#SYSBSLIND_L
 (0x0010Ë

	)

3324 
	#SYSJTAGPIN_L
 (0x0020Ë

	)

3351 
	#SYSBSLSIZE0
 (0x0001Ë

	)

3352 
	#SYSBSLSIZE1
 (0x0002Ë

	)

3353 
	#SYSBSLR
 (0x0004Ë

	)

3365 
	#SYSBSLOFF
 (0x4000Ë

	)

3366 
	#SYSBSLPE
 (0x8000Ë

	)

3369 
	#SYSBSLSIZE0_L
 (0x0001Ë

	)

3370 
	#SYSBSLSIZE1_L
 (0x0002Ë

	)

3371 
	#SYSBSLR_L
 (0x0004Ë

	)

3396 
	#SYSBSLOFF_H
 (0x0040Ë

	)

3397 
	#SYSBSLPE_H
 (0x0080Ë

	)

3400 
	#JMBIN0FG
 (0x0001Ë

	)

3401 
	#JMBIN1FG
 (0x0002Ë

	)

3402 
	#JMBOUT0FG
 (0x0004Ë

	)

3403 
	#JMBOUT1FG
 (0x0008Ë

	)

3404 
	#JMBMODE
 (0x0010Ë

	)

3406 
	#JMBCLR0OFF
 (0x0040Ë

	)

3407 
	#JMBCLR1OFF
 (0x0080Ë

	)

3418 
	#JMBIN0FG_L
 (0x0001Ë

	)

3419 
	#JMBIN1FG_L
 (0x0002Ë

	)

3420 
	#JMBOUT0FG_L
 (0x0004Ë

	)

3421 
	#JMBOUT1FG_L
 (0x0008Ë

	)

3422 
	#JMBMODE_L
 (0x0010Ë

	)

3424 
	#JMBCLR0OFF_L
 (0x0040Ë

	)

3425 
	#JMBCLR1OFF_L
 (0x0080Ë

	)

3447 
	#SYSUNIV_NONE
 (0x0000Ë

	)

3448 
	#SYSUNIV_NMIIFG
 (0x0002Ë

	)

3449 
	#SYSUNIV_OFIFG
 (0x0004Ë

	)

3450 
	#SYSUNIV_ACCVIFG
 (0x0006Ë

	)

3451 
	#SYSUNIV_SYSBERRIV
 (0x0008Ë

	)

3454 
	#SYSSNIV_NONE
 (0x0000Ë

	)

3455 
	#SYSSNIV_SVMLIFG
 (0x0002Ë

	)

3456 
	#SYSSNIV_SVMHIFG
 (0x0004Ë

	)

3457 
	#SYSSNIV_DLYLIFG
 (0x0006Ë

	)

3458 
	#SYSSNIV_DLYHIFG
 (0x0008Ë

	)

3459 
	#SYSSNIV_VMAIFG
 (0x000AË

	)

3460 
	#SYSSNIV_JMBINIFG
 (0x000CË

	)

3461 
	#SYSSNIV_JMBOUTIFG
 (0x000EË

	)

3462 
	#SYSSNIV_VLRLIFG
 (0x0010Ë

	)

3463 
	#SYSSNIV_VLRHIFG
 (0x0012Ë

	)

3466 
	#SYSRSTIV_NONE
 (0x0000Ë

	)

3467 
	#SYSRSTIV_BOR
 (0x0002Ë

	)

3468 
	#SYSRSTIV_RSTNMI
 (0x0004Ë

	)

3469 
	#SYSRSTIV_DOBOR
 (0x0006Ë

	)

3470 
	#SYSRSTIV_LPM5WU
 (0x0008Ë

	)

3471 
	#SYSRSTIV_SECYV
 (0x000AË

	)

3472 
	#SYSRSTIV_SVSL
 (0x000CË

	)

3473 
	#SYSRSTIV_SVSH
 (0x000EË

	)

3474 
	#SYSRSTIV_SVML_OVP
 (0x0010Ë

	)

3475 
	#SYSRSTIV_SVMH_OVP
 (0x0012Ë

	)

3476 
	#SYSRSTIV_DOPOR
 (0x0014Ë

	)

3477 
	#SYSRSTIV_WDTTO
 (0x0016Ë

	)

3478 
	#SYSRSTIV_WDTKEY
 (0x0018Ë

	)

3479 
	#SYSRSTIV_KEYV
 (0x001AË

	)

3480 
	#SYSRSTIV_PLLUL
 (0x001CË

	)

3481 
	#SYSRSTIV_PERF
 (0x001EË

	)

3482 
	#SYSRSTIV_PMMKEY
 (0x0020Ë

	)

3484 
	#SYSRSTIV_PSSKEY
 (0x0020Ë

	)

3489 
	#__MSP430_HAS_T0A5__


	)

3490 
	#__MSP430_BASEADDRESS_T0A5__
 0x0340

	)

3492 
SFR_16BIT
(
TA0CTL
);

3493 
SFR_16BIT
(
TA0CCTL0
);

3494 
SFR_16BIT
(
TA0CCTL1
);

3495 
SFR_16BIT
(
TA0CCTL2
);

3496 
SFR_16BIT
(
TA0CCTL3
);

3497 
SFR_16BIT
(
TA0CCTL4
);

3498 
SFR_16BIT
(
TA0R
);

3499 
SFR_16BIT
(
TA0CCR0
);

3500 
SFR_16BIT
(
TA0CCR1
);

3501 
SFR_16BIT
(
TA0CCR2
);

3502 
SFR_16BIT
(
TA0CCR3
);

3503 
SFR_16BIT
(
TA0CCR4
);

3504 
SFR_16BIT
(
TA0IV
);

3505 
SFR_16BIT
(
TA0EX0
);

3508 
	#TASSEL1
 (0x0200Ë

	)

3509 
	#TASSEL0
 (0x0100Ë

	)

3510 
	#ID1
 (0x0080Ë

	)

3511 
	#ID0
 (0x0040Ë

	)

3512 
	#MC1
 (0x0020Ë

	)

3513 
	#MC0
 (0x0010Ë

	)

3514 
	#TACLR
 (0x0004Ë

	)

3515 
	#TAIE
 (0x0002Ë

	)

3516 
	#TAIFG
 (0x0001Ë

	)

3518 
	#MC_0
 (0*0x10uË

	)

3519 
	#MC_1
 (1*0x10uË

	)

3520 
	#MC_2
 (2*0x10uË

	)

3521 
	#MC_3
 (3*0x10uË

	)

3522 
	#ID_0
 (0*0x40uË

	)

3523 
	#ID_1
 (1*0x40uË

	)

3524 
	#ID_2
 (2*0x40uË

	)

3525 
	#ID_3
 (3*0x40uË

	)

3526 
	#TASSEL_0
 (0*0x100uË

	)

3527 
	#TASSEL_1
 (1*0x100uË

	)

3528 
	#TASSEL_2
 (2*0x100uË

	)

3529 
	#TASSEL_3
 (3*0x100uË

	)

3530 
	#MC__STOP
 (0*0x10uË

	)

3531 
	#MC__UP
 (1*0x10uË

	)

3532 
	#MC__CONTINOUS
 (2*0x10uË

	)

3533 
	#MC__UPDOWN
 (3*0x10uË

	)

3534 
	#ID__1
 (0*0x40uË

	)

3535 
	#ID__2
 (1*0x40uË

	)

3536 
	#ID__4
 (2*0x40uË

	)

3537 
	#ID__8
 (3*0x40uË

	)

3538 
	#TASSEL__TACLK
 (0*0x100uË

	)

3539 
	#TASSEL__ACLK
 (1*0x100uË

	)

3540 
	#TASSEL__SMCLK
 (2*0x100uË

	)

3541 
	#TASSEL__INCLK
 (3*0x100uË

	)

3544 
	#CM1
 (0x8000Ë

	)

3545 
	#CM0
 (0x4000Ë

	)

3546 
	#CCIS1
 (0x2000Ë

	)

3547 
	#CCIS0
 (0x1000Ë

	)

3548 
	#SCS
 (0x0800Ë

	)

3549 
	#SCCI
 (0x0400Ë

	)

3550 
	#CAP
 (0x0100Ë

	)

3551 
	#OUTMOD2
 (0x0080Ë

	)

3552 
	#OUTMOD1
 (0x0040Ë

	)

3553 
	#OUTMOD0
 (0x0020Ë

	)

3554 
	#CCIE
 (0x0010Ë

	)

3555 
	#CCI
 (0x0008Ë

	)

3556 
	#OUT
 (0x0004Ë

	)

3557 
	#COV
 (0x0002Ë

	)

3558 
	#CCIFG
 (0x0001Ë

	)

3560 
	#OUTMOD_0
 (0*0x20uË

	)

3561 
	#OUTMOD_1
 (1*0x20uË

	)

3562 
	#OUTMOD_2
 (2*0x20uË

	)

3563 
	#OUTMOD_3
 (3*0x20uË

	)

3564 
	#OUTMOD_4
 (4*0x20uË

	)

3565 
	#OUTMOD_5
 (5*0x20uË

	)

3566 
	#OUTMOD_6
 (6*0x20uË

	)

3567 
	#OUTMOD_7
 (7*0x20uË

	)

3568 
	#CCIS_0
 (0*0x1000uË

	)

3569 
	#CCIS_1
 (1*0x1000uË

	)

3570 
	#CCIS_2
 (2*0x1000uË

	)

3571 
	#CCIS_3
 (3*0x1000uË

	)

3572 
	#CM_0
 (0*0x4000uË

	)

3573 
	#CM_1
 (1*0x4000uË

	)

3574 
	#CM_2
 (2*0x4000uË

	)

3575 
	#CM_3
 (3*0x4000uË

	)

3578 
	#TAIDEX0
 (0x0001Ë

	)

3579 
	#TAIDEX1
 (0x0002Ë

	)

3580 
	#TAIDEX2
 (0x0004Ë

	)

3582 
	#TAIDEX_0
 (0*0x0001uË

	)

3583 
	#TAIDEX_1
 (1*0x0001uË

	)

3584 
	#TAIDEX_2
 (2*0x0001uË

	)

3585 
	#TAIDEX_3
 (3*0x0001uË

	)

3586 
	#TAIDEX_4
 (4*0x0001uË

	)

3587 
	#TAIDEX_5
 (5*0x0001uË

	)

3588 
	#TAIDEX_6
 (6*0x0001uË

	)

3589 
	#TAIDEX_7
 (7*0x0001uË

	)

3592 
	#TA0IV_NONE
 (0x0000Ë

	)

3593 
	#TA0IV_TA0CCR1
 (0x0002Ë

	)

3594 
	#TA0IV_TA0CCR2
 (0x0004Ë

	)

3595 
	#TA0IV_TA0CCR3
 (0x0006Ë

	)

3596 
	#TA0IV_TA0CCR4
 (0x0008Ë

	)

3597 
	#TA0IV_5
 (0x000AË

	)

3598 
	#TA0IV_6
 (0x000CË

	)

3599 
	#TA0IV_TA0IFG
 (0x000EË

	)

3604 
	#__MSP430_HAS_T1A3__


	)

3605 
	#__MSP430_BASEADDRESS_T1A3__
 0x0380

	)

3607 
SFR_16BIT
(
TA1CTL
);

3608 
SFR_16BIT
(
TA1CCTL0
);

3609 
SFR_16BIT
(
TA1CCTL1
);

3610 
SFR_16BIT
(
TA1CCTL2
);

3611 
SFR_16BIT
(
TA1R
);

3612 
SFR_16BIT
(
TA1CCR0
);

3613 
SFR_16BIT
(
TA1CCR1
);

3614 
SFR_16BIT
(
TA1CCR2
);

3615 
SFR_16BIT
(
TA1IV
);

3616 
SFR_16BIT
(
TA1EX0
);

3621 
	#TA1IV_NONE
 (0x0000Ë

	)

3622 
	#TA1IV_TA1CCR1
 (0x0002Ë

	)

3623 
	#TA1IV_TA1CCR2
 (0x0004Ë

	)

3624 
	#TA1IV_3
 (0x0006Ë

	)

3625 
	#TA1IV_4
 (0x0008Ë

	)

3626 
	#TA1IV_5
 (0x000AË

	)

3627 
	#TA1IV_6
 (0x000CË

	)

3628 
	#TA1IV_TA1IFG
 (0x000EË

	)

3633 
	#__MSP430_HAS_UCS_RF__


	)

3634 
	#__MSP430_BASEADDRESS_UCS_RF__
 0x0160

	)

3636 
SFR_16BIT
(
UCSCTL0
);

3637 
SFR_8BIT
(
UCSCTL0_L
);

3638 
SFR_8BIT
(
UCSCTL0_H
);

3639 
SFR_16BIT
(
UCSCTL1
);

3640 
SFR_8BIT
(
UCSCTL1_L
);

3641 
SFR_8BIT
(
UCSCTL1_H
);

3642 
SFR_16BIT
(
UCSCTL2
);

3643 
SFR_8BIT
(
UCSCTL2_L
);

3644 
SFR_8BIT
(
UCSCTL2_H
);

3645 
SFR_16BIT
(
UCSCTL3
);

3646 
SFR_8BIT
(
UCSCTL3_L
);

3647 
SFR_8BIT
(
UCSCTL3_H
);

3648 
SFR_16BIT
(
UCSCTL4
);

3649 
SFR_8BIT
(
UCSCTL4_L
);

3650 
SFR_8BIT
(
UCSCTL4_H
);

3651 
SFR_16BIT
(
UCSCTL5
);

3652 
SFR_8BIT
(
UCSCTL5_L
);

3653 
SFR_8BIT
(
UCSCTL5_H
);

3654 
SFR_16BIT
(
UCSCTL6
);

3655 
SFR_8BIT
(
UCSCTL6_L
);

3656 
SFR_8BIT
(
UCSCTL6_H
);

3657 
SFR_16BIT
(
UCSCTL7
);

3658 
SFR_8BIT
(
UCSCTL7_L
);

3659 
SFR_8BIT
(
UCSCTL7_H
);

3660 
SFR_16BIT
(
UCSCTL8
);

3661 
SFR_8BIT
(
UCSCTL8_L
);

3662 
SFR_8BIT
(
UCSCTL8_H
);

3668 
	#MOD0
 (0x0008Ë

	)

3669 
	#MOD1
 (0x0010Ë

	)

3670 
	#MOD2
 (0x0020Ë

	)

3671 
	#MOD3
 (0x0040Ë

	)

3672 
	#MOD4
 (0x0080Ë

	)

3673 
	#DCO0
 (0x0100Ë

	)

3674 
	#DCO1
 (0x0200Ë

	)

3675 
	#DCO2
 (0x0400Ë

	)

3676 
	#DCO3
 (0x0800Ë

	)

3677 
	#DCO4
 (0x1000Ë

	)

3686 
	#MOD0_L
 (0x0008Ë

	)

3687 
	#MOD1_L
 (0x0010Ë

	)

3688 
	#MOD2_L
 (0x0020Ë

	)

3689 
	#MOD3_L
 (0x0040Ë

	)

3690 
	#MOD4_L
 (0x0080Ë

	)

3699 
	#DCO0_H
 (0x0001Ë

	)

3700 
	#DCO1_H
 (0x0002Ë

	)

3701 
	#DCO2_H
 (0x0004Ë

	)

3702 
	#DCO3_H
 (0x0008Ë

	)

3703 
	#DCO4_H
 (0x0010Ë

	)

3709 
	#DISMOD
 (0x0001Ë

	)

3713 
	#DCORSEL0
 (0x0010Ë

	)

3714 
	#DCORSEL1
 (0x0020Ë

	)

3715 
	#DCORSEL2
 (0x0040Ë

	)

3727 
	#DISMOD_L
 (0x0001Ë

	)

3731 
	#DCORSEL0_L
 (0x0010Ë

	)

3732 
	#DCORSEL1_L
 (0x0020Ë

	)

3733 
	#DCORSEL2_L
 (0x0040Ë

	)

3758 
	#DCORSEL_0
 (0x0000Ë

	)

3759 
	#DCORSEL_1
 (0x0010Ë

	)

3760 
	#DCORSEL_2
 (0x0020Ë

	)

3761 
	#DCORSEL_3
 (0x0030Ë

	)

3762 
	#DCORSEL_4
 (0x0040Ë

	)

3763 
	#DCORSEL_5
 (0x0050Ë

	)

3764 
	#DCORSEL_6
 (0x0060Ë

	)

3765 
	#DCORSEL_7
 (0x0070Ë

	)

3768 
	#FLLN0
 (0x0001Ë

	)

3769 
	#FLLN1
 (0x0002Ë

	)

3770 
	#FLLN2
 (0x0004Ë

	)

3771 
	#FLLN3
 (0x0008Ë

	)

3772 
	#FLLN4
 (0x0010Ë

	)

3773 
	#FLLN5
 (0x0020Ë

	)

3774 
	#FLLN6
 (0x0040Ë

	)

3775 
	#FLLN7
 (0x0080Ë

	)

3776 
	#FLLN8
 (0x0100Ë

	)

3777 
	#FLLN9
 (0x0200Ë

	)

3780 
	#FLLD0
 (0x1000Ë

	)

3781 
	#FLLD1
 (0x2000Ë

	)

3782 
	#FLLD2
 (0x4000Ë

	)

3786 
	#FLLN0_L
 (0x0001Ë

	)

3787 
	#FLLN1_L
 (0x0002Ë

	)

3788 
	#FLLN2_L
 (0x0004Ë

	)

3789 
	#FLLN3_L
 (0x0008Ë

	)

3790 
	#FLLN4_L
 (0x0010Ë

	)

3791 
	#FLLN5_L
 (0x0020Ë

	)

3792 
	#FLLN6_L
 (0x0040Ë

	)

3793 
	#FLLN7_L
 (0x0080Ë

	)

3799 
	#FLLN8_H
 (0x0001Ë

	)

3800 
	#FLLN9_H
 (0x0002Ë

	)

3803 
	#FLLD0_H
 (0x0010Ë

	)

3804 
	#FLLD1_H
 (0x0020Ë

	)

3805 
	#FLLD2_H
 (0x0040Ë

	)

3808 
	#FLLD_0
 (0x0000Ë

	)

3809 
	#FLLD_1
 (0x1000Ë

	)

3810 
	#FLLD_2
 (0x2000Ë

	)

3811 
	#FLLD_3
 (0x3000Ë

	)

3812 
	#FLLD_4
 (0x4000Ë

	)

3813 
	#FLLD_5
 (0x5000Ë

	)

3814 
	#FLLD_6
 (0x6000Ë

	)

3815 
	#FLLD_7
 (0x7000Ë

	)

3816 
	#FLLD__1
 (0x0000Ë

	)

3817 
	#FLLD__2
 (0x1000Ë

	)

3818 
	#FLLD__4
 (0x2000Ë

	)

3819 
	#FLLD__8
 (0x3000Ë

	)

3820 
	#FLLD__16
 (0x4000Ë

	)

3821 
	#FLLD__32
 (0x5000Ë

	)

3824 
	#FLLREFDIV0
 (0x0001Ë

	)

3825 
	#FLLREFDIV1
 (0x0002Ë

	)

3826 
	#FLLREFDIV2
 (0x0004Ë

	)

3828 
	#SELREF0
 (0x0010Ë

	)

3829 
	#SELREF1
 (0x0020Ë

	)

3830 
	#SELREF2
 (0x0040Ë

	)

3842 
	#FLLREFDIV0_L
 (0x0001Ë

	)

3843 
	#FLLREFDIV1_L
 (0x0002Ë

	)

3844 
	#FLLREFDIV2_L
 (0x0004Ë

	)

3846 
	#SELREF0_L
 (0x0010Ë

	)

3847 
	#SELREF1_L
 (0x0020Ë

	)

3848 
	#SELREF2_L
 (0x0040Ë

	)

3871 
	#FLLREFDIV_0
 (0x0000Ë

	)

3872 
	#FLLREFDIV_1
 (0x0001Ë

	)

3873 
	#FLLREFDIV_2
 (0x0002Ë

	)

3874 
	#FLLREFDIV_3
 (0x0003Ë

	)

3875 
	#FLLREFDIV_4
 (0x0004Ë

	)

3876 
	#FLLREFDIV_5
 (0x0005Ë

	)

3877 
	#FLLREFDIV_6
 (0x0006Ë

	)

3878 
	#FLLREFDIV_7
 (0x0007Ë

	)

3879 
	#FLLREFDIV__1
 (0x0000Ë

	)

3880 
	#FLLREFDIV__2
 (0x0001Ë

	)

3881 
	#FLLREFDIV__4
 (0x0002Ë

	)

3882 
	#FLLREFDIV__8
 (0x0003Ë

	)

3883 
	#FLLREFDIV__12
 (0x0004Ë

	)

3884 
	#FLLREFDIV__16
 (0x0005Ë

	)

3885 
	#SELREF_0
 (0x0000Ë

	)

3886 
	#SELREF_1
 (0x0010Ë

	)

3887 
	#SELREF_2
 (0x0020Ë

	)

3888 
	#SELREF_3
 (0x0030Ë

	)

3889 
	#SELREF_4
 (0x0040Ë

	)

3890 
	#SELREF_5
 (0x0050Ë

	)

3891 
	#SELREF_6
 (0x0060Ë

	)

3892 
	#SELREF_7
 (0x0070Ë

	)

3893 
	#SELREF__XT1CLK
 (0x0000Ë

	)

3894 
	#SELREF__REFOCLK
 (0x0020Ë

	)

3895 
	#SELREF__XT2CLK
 (0x0050Ë

	)

3898 
	#SELM0
 (0x0001Ë

	)

3899 
	#SELM1
 (0x0002Ë

	)

3900 
	#SELM2
 (0x0004Ë

	)

3902 
	#SELS0
 (0x0010Ë

	)

3903 
	#SELS1
 (0x0020Ë

	)

3904 
	#SELS2
 (0x0040Ë

	)

3906 
	#SELA0
 (0x0100Ë

	)

3907 
	#SELA1
 (0x0200Ë

	)

3908 
	#SELA2
 (0x0400Ë

	)

3916 
	#SELM0_L
 (0x0001Ë

	)

3917 
	#SELM1_L
 (0x0002Ë

	)

3918 
	#SELM2_L
 (0x0004Ë

	)

3920 
	#SELS0_L
 (0x0010Ë

	)

3921 
	#SELS1_L
 (0x0020Ë

	)

3922 
	#SELS2_L
 (0x0040Ë

	)

3933 
	#SELA0_H
 (0x0001Ë

	)

3934 
	#SELA1_H
 (0x0002Ë

	)

3935 
	#SELA2_H
 (0x0004Ë

	)

3942 
	#SELM_0
 (0x0000Ë

	)

3943 
	#SELM_1
 (0x0001Ë

	)

3944 
	#SELM_2
 (0x0002Ë

	)

3945 
	#SELM_3
 (0x0003Ë

	)

3946 
	#SELM_4
 (0x0004Ë

	)

3947 
	#SELM_5
 (0x0005Ë

	)

3948 
	#SELM_6
 (0x0006Ë

	)

3949 
	#SELM_7
 (0x0007Ë

	)

3950 
	#SELM__XT1CLK
 (0x0000Ë

	)

3951 
	#SELM__VLOCLK
 (0x0001Ë

	)

3952 
	#SELM__REFOCLK
 (0x0002Ë

	)

3953 
	#SELM__DCOCLK
 (0x0003Ë

	)

3954 
	#SELM__DCOCLKDIV
 (0x0004Ë

	)

3955 
	#SELM__XT2CLK
 (0x0005Ë

	)

3957 
	#SELS_0
 (0x0000Ë

	)

3958 
	#SELS_1
 (0x0010Ë

	)

3959 
	#SELS_2
 (0x0020Ë

	)

3960 
	#SELS_3
 (0x0030Ë

	)

3961 
	#SELS_4
 (0x0040Ë

	)

3962 
	#SELS_5
 (0x0050Ë

	)

3963 
	#SELS_6
 (0x0060Ë

	)

3964 
	#SELS_7
 (0x0070Ë

	)

3965 
	#SELS__XT1CLK
 (0x0000Ë

	)

3966 
	#SELS__VLOCLK
 (0x0010Ë

	)

3967 
	#SELS__REFOCLK
 (0x0020Ë

	)

3968 
	#SELS__DCOCLK
 (0x0030Ë

	)

3969 
	#SELS__DCOCLKDIV
 (0x0040Ë

	)

3970 
	#SELS__XT2CLK
 (0x0050Ë

	)

3972 
	#SELA_0
 (0x0000Ë

	)

3973 
	#SELA_1
 (0x0100Ë

	)

3974 
	#SELA_2
 (0x0200Ë

	)

3975 
	#SELA_3
 (0x0300Ë

	)

3976 
	#SELA_4
 (0x0400Ë

	)

3977 
	#SELA_5
 (0x0500Ë

	)

3978 
	#SELA_6
 (0x0600Ë

	)

3979 
	#SELA_7
 (0x0700Ë

	)

3980 
	#SELA__XT1CLK
 (0x0000Ë

	)

3981 
	#SELA__VLOCLK
 (0x0100Ë

	)

3982 
	#SELA__REFOCLK
 (0x0200Ë

	)

3983 
	#SELA__DCOCLK
 (0x0300Ë

	)

3984 
	#SELA__DCOCLKDIV
 (0x0400Ë

	)

3985 
	#SELA__XT2CLK
 (0x0500Ë

	)

3988 
	#DIVM0
 (0x0001Ë

	)

3989 
	#DIVM1
 (0x0002Ë

	)

3990 
	#DIVM2
 (0x0004Ë

	)

3992 
	#DIVS0
 (0x0010Ë

	)

3993 
	#DIVS1
 (0x0020Ë

	)

3994 
	#DIVS2
 (0x0040Ë

	)

3996 
	#DIVA0
 (0x0100Ë

	)

3997 
	#DIVA1
 (0x0200Ë

	)

3998 
	#DIVA2
 (0x0400Ë

	)

4000 
	#DIVPA0
 (0x1000Ë

	)

4001 
	#DIVPA1
 (0x2000Ë

	)

4002 
	#DIVPA2
 (0x4000Ë

	)

4006 
	#DIVM0_L
 (0x0001Ë

	)

4007 
	#DIVM1_L
 (0x0002Ë

	)

4008 
	#DIVM2_L
 (0x0004Ë

	)

4010 
	#DIVS0_L
 (0x0010Ë

	)

4011 
	#DIVS1_L
 (0x0020Ë

	)

4012 
	#DIVS2_L
 (0x0040Ë

	)

4020 
	#DIVA0_H
 (0x0001Ë

	)

4021 
	#DIVA1_H
 (0x0002Ë

	)

4022 
	#DIVA2_H
 (0x0004Ë

	)

4024 
	#DIVPA0_H
 (0x0010Ë

	)

4025 
	#DIVPA1_H
 (0x0020Ë

	)

4026 
	#DIVPA2_H
 (0x0040Ë

	)

4029 
	#DIVM_0
 (0x0000Ë

	)

4030 
	#DIVM_1
 (0x0001Ë

	)

4031 
	#DIVM_2
 (0x0002Ë

	)

4032 
	#DIVM_3
 (0x0003Ë

	)

4033 
	#DIVM_4
 (0x0004Ë

	)

4034 
	#DIVM_5
 (0x0005Ë

	)

4035 
	#DIVM_6
 (0x0006Ë

	)

4036 
	#DIVM_7
 (0x0007Ë

	)

4037 
	#DIVM__1
 (0x0000Ë

	)

4038 
	#DIVM__2
 (0x0001Ë

	)

4039 
	#DIVM__4
 (0x0002Ë

	)

4040 
	#DIVM__8
 (0x0003Ë

	)

4041 
	#DIVM__16
 (0x0004Ë

	)

4042 
	#DIVM__32
 (0x0005Ë

	)

4044 
	#DIVS_0
 (0x0000Ë

	)

4045 
	#DIVS_1
 (0x0010Ë

	)

4046 
	#DIVS_2
 (0x0020Ë

	)

4047 
	#DIVS_3
 (0x0030Ë

	)

4048 
	#DIVS_4
 (0x0040Ë

	)

4049 
	#DIVS_5
 (0x0050Ë

	)

4050 
	#DIVS_6
 (0x0060Ë

	)

4051 
	#DIVS_7
 (0x0070Ë

	)

4052 
	#DIVS__1
 (0x0000Ë

	)

4053 
	#DIVS__2
 (0x0010Ë

	)

4054 
	#DIVS__4
 (0x0020Ë

	)

4055 
	#DIVS__8
 (0x0030Ë

	)

4056 
	#DIVS__16
 (0x0040Ë

	)

4057 
	#DIVS__32
 (0x0050Ë

	)

4059 
	#DIVA_0
 (0x0000Ë

	)

4060 
	#DIVA_1
 (0x0100Ë

	)

4061 
	#DIVA_2
 (0x0200Ë

	)

4062 
	#DIVA_3
 (0x0300Ë

	)

4063 
	#DIVA_4
 (0x0400Ë

	)

4064 
	#DIVA_5
 (0x0500Ë

	)

4065 
	#DIVA_6
 (0x0600Ë

	)

4066 
	#DIVA_7
 (0x0700Ë

	)

4067 
	#DIVA__1
 (0x0000Ë

	)

4068 
	#DIVA__2
 (0x0100Ë

	)

4069 
	#DIVA__4
 (0x0200Ë

	)

4070 
	#DIVA__8
 (0x0300Ë

	)

4071 
	#DIVA__16
 (0x0400Ë

	)

4072 
	#DIVA__32
 (0x0500Ë

	)

4074 
	#DIVPA_0
 (0x0000Ë

	)

4075 
	#DIVPA_1
 (0x1000Ë

	)

4076 
	#DIVPA_2
 (0x2000Ë

	)

4077 
	#DIVPA_3
 (0x3000Ë

	)

4078 
	#DIVPA_4
 (0x4000Ë

	)

4079 
	#DIVPA_5
 (0x5000Ë

	)

4080 
	#DIVPA_6
 (0x6000Ë

	)

4081 
	#DIVPA_7
 (0x7000Ë

	)

4082 
	#DIVPA__1
 (0x0000Ë

	)

4083 
	#DIVPA__2
 (0x1000Ë

	)

4084 
	#DIVPA__4
 (0x2000Ë

	)

4085 
	#DIVPA__8
 (0x3000Ë

	)

4086 
	#DIVPA__16
 (0x4000Ë

	)

4087 
	#DIVPA__32
 (0x5000Ë

	)

4090 
	#XT1OFF
 (0x0001Ë

	)

4091 
	#SMCLKOFF
 (0x0002Ë

	)

4092 
	#XCAP0
 (0x0004Ë

	)

4093 
	#XCAP1
 (0x0008Ë

	)

4094 
	#XT1BYPASS
 (0x0010Ë

	)

4095 
	#XTS
 (0x0020Ë

	)

4096 
	#XT1DRIVE0
 (0x0040Ë

	)

4097 
	#XT1DRIVE1
 (0x0080Ë

	)

4098 
	#XT2OFF
 (0x0100Ë

	)

4108 
	#XT1OFF_L
 (0x0001Ë

	)

4109 
	#SMCLKOFF_L
 (0x0002Ë

	)

4110 
	#XCAP0_L
 (0x0004Ë

	)

4111 
	#XCAP1_L
 (0x0008Ë

	)

4112 
	#XT1BYPASS_L
 (0x0010Ë

	)

4113 
	#XTS_L
 (0x0020Ë

	)

4114 
	#XT1DRIVE0_L
 (0x0040Ë

	)

4115 
	#XT1DRIVE1_L
 (0x0080Ë

	)

4125 
	#XT2OFF_H
 (0x0001Ë

	)

4134 
	#XCAP_0
 (0x0000Ë

	)

4135 
	#XCAP_1
 (0x0004Ë

	)

4136 
	#XCAP_2
 (0x0008Ë

	)

4137 
	#XCAP_3
 (0x000CË

	)

4138 
	#XT1DRIVE_0
 (0x0000Ë

	)

4139 
	#XT1DRIVE_1
 (0x0040Ë

	)

4140 
	#XT1DRIVE_2
 (0x0080Ë

	)

4141 
	#XT1DRIVE_3
 (0x00C0Ë

	)

4144 
	#DCOFFG
 (0x0001Ë

	)

4145 
	#XT1LFOFFG
 (0x0002Ë

	)

4146 
	#XT1HFOFFG
 (0x0004Ë

	)

4147 
	#XT2OFFG
 (0x0008Ë

	)

4162 
	#DCOFFG_L
 (0x0001Ë

	)

4163 
	#XT1LFOFFG_L
 (0x0002Ë

	)

4164 
	#XT1HFOFFG_L
 (0x0004Ë

	)

4165 
	#XT2OFFG_L
 (0x0008Ë

	)

4194 
	#ACLKREQEN
 (0x0001Ë

	)

4195 
	#MCLKREQEN
 (0x0002Ë

	)

4196 
	#SMCLKREQEN
 (0x0004Ë

	)

4197 
	#MODOSCREQEN
 (0x0008Ë

	)

4212 
	#ACLKREQEN_L
 (0x0001Ë

	)

4213 
	#MCLKREQEN_L
 (0x0002Ë

	)

4214 
	#SMCLKREQEN_L
 (0x0004Ë

	)

4215 
	#MODOSCREQEN_L
 (0x0008Ë

	)

4246 
	#__MSP430_HAS_USCI_A0__


	)

4247 
	#__MSP430_BASEADDRESS_USCI_A0__
 0x05C0

	)

4249 
SFR_16BIT
(
UCA0CTLW0
);

4250 
SFR_8BIT
(
UCA0CTLW0_L
);

4251 
SFR_8BIT
(
UCA0CTLW0_H
);

4252 
	#UCA0CTL1
 
UCA0CTLW0_L


	)

4253 
	#UCA0CTL0
 
UCA0CTLW0_H


	)

4254 
SFR_16BIT
(
UCA0BRW
);

4255 
SFR_8BIT
(
UCA0BRW_L
);

4256 
SFR_8BIT
(
UCA0BRW_H
);

4257 
	#UCA0BR0
 
UCA0BRW_L


	)

4258 
	#UCA0BR1
 
UCA0BRW_H


	)

4259 
SFR_8BIT
(
UCA0MCTL
);

4260 
SFR_8BIT
(
UCA0STAT
);

4261 
SFR_8BIT
(
UCA0RXBUF
);

4262 
SFR_8BIT
(
UCA0TXBUF
);

4263 
SFR_8BIT
(
UCA0ABCTL
);

4264 
SFR_16BIT
(
UCA0IRCTL
);

4265 
SFR_8BIT
(
UCA0IRCTL_L
);

4266 
SFR_8BIT
(
UCA0IRCTL_H
);

4267 
	#UCA0IRTCTL
 
UCA0IRCTL_L


	)

4268 
	#UCA0IRRCTL
 
UCA0IRCTL_H


	)

4269 
SFR_16BIT
(
UCA0ICTL
);

4270 
SFR_8BIT
(
UCA0ICTL_L
);

4271 
SFR_8BIT
(
UCA0ICTL_H
);

4272 
	#UCA0IE
 
UCA0ICTL_L


	)

4273 
	#UCA0IFG
 
UCA0ICTL_H


	)

4274 
SFR_16BIT
(
UCA0IV
);

4280 
	#__MSP430_HAS_USCI_B0__


	)

4281 
	#__MSP430_BASEADDRESS_USCI_B0__
 0x05E0

	)

4284 
SFR_16BIT
(
UCB0CTLW0
);

4285 
SFR_8BIT
(
UCB0CTLW0_L
);

4286 
SFR_8BIT
(
UCB0CTLW0_H
);

4287 
	#UCB0CTL1
 
UCB0CTLW0_L


	)

4288 
	#UCB0CTL0
 
UCB0CTLW0_H


	)

4289 
SFR_16BIT
(
UCB0BRW
);

4290 
SFR_8BIT
(
UCB0BRW_L
);

4291 
SFR_8BIT
(
UCB0BRW_H
);

4292 
	#UCB0BR0
 
UCB0BRW_L


	)

4293 
	#UCB0BR1
 
UCB0BRW_H


	)

4294 
SFR_8BIT
(
UCB0STAT
);

4295 
SFR_8BIT
(
UCB0RXBUF
);

4296 
SFR_8BIT
(
UCB0TXBUF
);

4297 
SFR_16BIT
(
UCB0I2COA
);

4298 
SFR_8BIT
(
UCB0I2COA_L
);

4299 
SFR_8BIT
(
UCB0I2COA_H
);

4300 
SFR_16BIT
(
UCB0I2CSA
);

4301 
SFR_8BIT
(
UCB0I2CSA_L
);

4302 
SFR_8BIT
(
UCB0I2CSA_H
);

4303 
SFR_16BIT
(
UCB0ICTL
);

4304 
SFR_8BIT
(
UCB0ICTL_L
);

4305 
SFR_8BIT
(
UCB0ICTL_H
);

4306 
	#UCB0IE
 
UCB0ICTL_L


	)

4307 
	#UCB0IFG
 
UCB0ICTL_H


	)

4308 
SFR_16BIT
(
UCB0IV
);

4311 
	#UCPEN
 (0x80Ë

	)

4312 
	#UCPAR
 (0x40Ë

	)

4313 
	#UCMSB
 (0x20Ë

	)

4314 
	#UC7BIT
 (0x10Ë

	)

4315 
	#UCSPB
 (0x08Ë

	)

4316 
	#UCMODE1
 (0x04Ë

	)

4317 
	#UCMODE0
 (0x02Ë

	)

4318 
	#UCSYNC
 (0x01Ë

	)

4321 
	#UCCKPH
 (0x80Ë

	)

4322 
	#UCCKPL
 (0x40Ë

	)

4323 
	#UCMST
 (0x08Ë

	)

4326 
	#UCA10
 (0x80Ë

	)

4327 
	#UCSLA10
 (0x40Ë

	)

4328 
	#UCMM
 (0x20Ë

	)

4330 
	#UCMODE_0
 (0x00Ë

	)

4331 
	#UCMODE_1
 (0x02Ë

	)

4332 
	#UCMODE_2
 (0x04Ë

	)

4333 
	#UCMODE_3
 (0x06Ë

	)

4336 
	#UCSSEL1
 (0x80Ë

	)

4337 
	#UCSSEL0
 (0x40Ë

	)

4338 
	#UCRXEIE
 (0x20Ë

	)

4339 
	#UCBRKIE
 (0x10Ë

	)

4340 
	#UCDORM
 (0x08Ë

	)

4341 
	#UCTXADDR
 (0x04Ë

	)

4342 
	#UCTXBRK
 (0x02Ë

	)

4343 
	#UCSWRST
 (0x01Ë

	)

4354 
	#UCTR
 (0x10Ë

	)

4355 
	#UCTXNACK
 (0x08Ë

	)

4356 
	#UCTXSTP
 (0x04Ë

	)

4357 
	#UCTXSTT
 (0x02Ë

	)

4358 
	#UCSSEL_0
 (0x00Ë

	)

4359 
	#UCSSEL_1
 (0x40Ë

	)

4360 
	#UCSSEL_2
 (0x80Ë

	)

4361 
	#UCSSEL_3
 (0xC0Ë

	)

4362 
	#UCSSEL__UCLK
 (0x00Ë

	)

4363 
	#UCSSEL__ACLK
 (0x40Ë

	)

4364 
	#UCSSEL__SMCLK
 (0x80Ë

	)

4367 
	#UCBRF3
 (0x80Ë

	)

4368 
	#UCBRF2
 (0x40Ë

	)

4369 
	#UCBRF1
 (0x20Ë

	)

4370 
	#UCBRF0
 (0x10Ë

	)

4371 
	#UCBRS2
 (0x08Ë

	)

4372 
	#UCBRS1
 (0x04Ë

	)

4373 
	#UCBRS0
 (0x02Ë

	)

4374 
	#UCOS16
 (0x01Ë

	)

4376 
	#UCBRF_0
 (0x00Ë

	)

4377 
	#UCBRF_1
 (0x10Ë

	)

4378 
	#UCBRF_2
 (0x20Ë

	)

4379 
	#UCBRF_3
 (0x30Ë

	)

4380 
	#UCBRF_4
 (0x40Ë

	)

4381 
	#UCBRF_5
 (0x50Ë

	)

4382 
	#UCBRF_6
 (0x60Ë

	)

4383 
	#UCBRF_7
 (0x70Ë

	)

4384 
	#UCBRF_8
 (0x80Ë

	)

4385 
	#UCBRF_9
 (0x90Ë

	)

4386 
	#UCBRF_10
 (0xA0Ë

	)

4387 
	#UCBRF_11
 (0xB0Ë

	)

4388 
	#UCBRF_12
 (0xC0Ë

	)

4389 
	#UCBRF_13
 (0xD0Ë

	)

4390 
	#UCBRF_14
 (0xE0Ë

	)

4391 
	#UCBRF_15
 (0xF0Ë

	)

4393 
	#UCBRS_0
 (0x00Ë

	)

4394 
	#UCBRS_1
 (0x02Ë

	)

4395 
	#UCBRS_2
 (0x04Ë

	)

4396 
	#UCBRS_3
 (0x06Ë

	)

4397 
	#UCBRS_4
 (0x08Ë

	)

4398 
	#UCBRS_5
 (0x0AË

	)

4399 
	#UCBRS_6
 (0x0CË

	)

4400 
	#UCBRS_7
 (0x0EË

	)

4403 
	#UCLISTEN
 (0x80Ë

	)

4404 
	#UCFE
 (0x40Ë

	)

4405 
	#UCOE
 (0x20Ë

	)

4406 
	#UCPE
 (0x10Ë

	)

4407 
	#UCBRK
 (0x08Ë

	)

4408 
	#UCRXERR
 (0x04Ë

	)

4409 
	#UCADDR
 (0x02Ë

	)

4410 
	#UCBUSY
 (0x01Ë

	)

4411 
	#UCIDLE
 (0x02Ë

	)

4414 
	#UCSCLLOW
 (0x40Ë

	)

4415 
	#UCGC
 (0x20Ë

	)

4416 
	#UCBBUSY
 (0x10Ë

	)

4419 
	#UCIRTXPL5
 (0x80Ë

	)

4420 
	#UCIRTXPL4
 (0x40Ë

	)

4421 
	#UCIRTXPL3
 (0x20Ë

	)

4422 
	#UCIRTXPL2
 (0x10Ë

	)

4423 
	#UCIRTXPL1
 (0x08Ë

	)

4424 
	#UCIRTXPL0
 (0x04Ë

	)

4425 
	#UCIRTXCLK
 (0x02Ë

	)

4426 
	#UCIREN
 (0x01Ë

	)

4429 
	#UCIRRXFL5
 (0x80Ë

	)

4430 
	#UCIRRXFL4
 (0x40Ë

	)

4431 
	#UCIRRXFL3
 (0x20Ë

	)

4432 
	#UCIRRXFL2
 (0x10Ë

	)

4433 
	#UCIRRXFL1
 (0x08Ë

	)

4434 
	#UCIRRXFL0
 (0x04Ë

	)

4435 
	#UCIRRXPL
 (0x02Ë

	)

4436 
	#UCIRRXFE
 (0x01Ë

	)

4441 
	#UCDELIM1
 (0x20Ë

	)

4442 
	#UCDELIM0
 (0x10Ë

	)

4443 
	#UCSTOE
 (0x08Ë

	)

4444 
	#UCBTOE
 (0x04Ë

	)

4446 
	#UCABDEN
 (0x01Ë

	)

4449 
	#UCGCEN
 (0x8000Ë

	)

4450 
	#UCOA9
 (0x0200Ë

	)

4451 
	#UCOA8
 (0x0100Ë

	)

4452 
	#UCOA7
 (0x0080Ë

	)

4453 
	#UCOA6
 (0x0040Ë

	)

4454 
	#UCOA5
 (0x0020Ë

	)

4455 
	#UCOA4
 (0x0010Ë

	)

4456 
	#UCOA3
 (0x0008Ë

	)

4457 
	#UCOA2
 (0x0004Ë

	)

4458 
	#UCOA1
 (0x0002Ë

	)

4459 
	#UCOA0
 (0x0001Ë

	)

4462 
	#UCOA7_L
 (0x0080Ë

	)

4463 
	#UCOA6_L
 (0x0040Ë

	)

4464 
	#UCOA5_L
 (0x0020Ë

	)

4465 
	#UCOA4_L
 (0x0010Ë

	)

4466 
	#UCOA3_L
 (0x0008Ë

	)

4467 
	#UCOA2_L
 (0x0004Ë

	)

4468 
	#UCOA1_L
 (0x0002Ë

	)

4469 
	#UCOA0_L
 (0x0001Ë

	)

4472 
	#UCGCEN_H
 (0x0080Ë

	)

4473 
	#UCOA9_H
 (0x0002Ë

	)

4474 
	#UCOA8_H
 (0x0001Ë

	)

4477 
	#UCSA9
 (0x0200Ë

	)

4478 
	#UCSA8
 (0x0100Ë

	)

4479 
	#UCSA7
 (0x0080Ë

	)

4480 
	#UCSA6
 (0x0040Ë

	)

4481 
	#UCSA5
 (0x0020Ë

	)

4482 
	#UCSA4
 (0x0010Ë

	)

4483 
	#UCSA3
 (0x0008Ë

	)

4484 
	#UCSA2
 (0x0004Ë

	)

4485 
	#UCSA1
 (0x0002Ë

	)

4486 
	#UCSA0
 (0x0001Ë

	)

4489 
	#UCSA7_L
 (0x0080Ë

	)

4490 
	#UCSA6_L
 (0x0040Ë

	)

4491 
	#UCSA5_L
 (0x0020Ë

	)

4492 
	#UCSA4_L
 (0x0010Ë

	)

4493 
	#UCSA3_L
 (0x0008Ë

	)

4494 
	#UCSA2_L
 (0x0004Ë

	)

4495 
	#UCSA1_L
 (0x0002Ë

	)

4496 
	#UCSA0_L
 (0x0001Ë

	)

4499 
	#UCSA9_H
 (0x0002Ë

	)

4500 
	#UCSA8_H
 (0x0001Ë

	)

4503 
	#UCTXIE
 (0x0002Ë

	)

4504 
	#UCRXIE
 (0x0001Ë

	)

4507 
	#UCNACKIE
 (0x0020Ë

	)

4508 
	#UCALIE
 (0x0010Ë

	)

4509 
	#UCSTPIE
 (0x0008Ë

	)

4510 
	#UCSTTIE
 (0x0004Ë

	)

4511 
	#UCTXIE
 (0x0002Ë

	)

4512 
	#UCRXIE
 (0x0001Ë

	)

4515 
	#UCTXIFG
 (0x0002Ë

	)

4516 
	#UCRXIFG
 (0x0001Ë

	)

4519 
	#UCNACKIFG
 (0x0020Ë

	)

4520 
	#UCALIFG
 (0x0010Ë

	)

4521 
	#UCSTPIFG
 (0x0008Ë

	)

4522 
	#UCSTTIFG
 (0x0004Ë

	)

4523 
	#UCTXIFG
 (0x0002Ë

	)

4524 
	#UCRXIFG
 (0x0001Ë

	)

4527 
	#USCI_NONE
 (0x0000Ë

	)

4528 
	#USCI_UCRXIFG
 (0x0002Ë

	)

4529 
	#USCI_UCTXIFG
 (0x0004Ë

	)

4530 
	#USCI_I2C_UCALIFG
 (0x0002Ë

	)

4531 
	#USCI_I2C_UCNACKIFG
 (0x0004Ë

	)

4532 
	#USCI_I2C_UCSTTIFG
 (0x0006Ë

	)

4533 
	#USCI_I2C_UCSTPIFG
 (0x0008Ë

	)

4534 
	#USCI_I2C_UCRXIFG
 (0x000AË

	)

4535 
	#USCI_I2C_UCTXIFG
 (0x000CË

	)

4540 
	#__MSP430_HAS_WDT_A__


	)

4541 
	#__MSP430_BASEADDRESS_WDT_A__
 0x0150

	)

4543 
SFR_16BIT
(
WDTCTL
);

4544 
SFR_8BIT
(
WDTCTL_L
);

4545 
SFR_8BIT
(
WDTCTL_H
);

4548 
	#WDTIS0
 (0x0001Ë

	)

4549 
	#WDTIS1
 (0x0002Ë

	)

4550 
	#WDTIS2
 (0x0004Ë

	)

4551 
	#WDTCNTCL
 (0x0008Ë

	)

4552 
	#WDTTMSEL
 (0x0010Ë

	)

4553 
	#WDTSSEL0
 (0x0020Ë

	)

4554 
	#WDTSSEL1
 (0x0040Ë

	)

4555 
	#WDTHOLD
 (0x0080Ë

	)

4558 
	#WDTIS0_L
 (0x0001Ë

	)

4559 
	#WDTIS1_L
 (0x0002Ë

	)

4560 
	#WDTIS2_L
 (0x0004Ë

	)

4561 
	#WDTCNTCL_L
 (0x0008Ë

	)

4562 
	#WDTTMSEL_L
 (0x0010Ë

	)

4563 
	#WDTSSEL0_L
 (0x0020Ë

	)

4564 
	#WDTSSEL1_L
 (0x0040Ë

	)

4565 
	#WDTHOLD_L
 (0x0080Ë

	)

4569 
	#WDTPW
 (0x5A00)

	)

4571 
	#WDTIS_0
 (0*0x0001uË

	)

4572 
	#WDTIS_1
 (1*0x0001uË

	)

4573 
	#WDTIS_2
 (2*0x0001uË

	)

4574 
	#WDTIS_3
 (3*0x0001uË

	)

4575 
	#WDTIS_4
 (4*0x0001uË

	)

4576 
	#WDTIS_5
 (5*0x0001uË

	)

4577 
	#WDTIS_6
 (6*0x0001uË

	)

4578 
	#WDTIS_7
 (7*0x0001uË

	)

4579 
	#WDTIS__2G
 (0*0x0001uË

	)

4580 
	#WDTIS__128M
 (1*0x0001uË

	)

4581 
	#WDTIS__8192K
 (2*0x0001uË

	)

4582 
	#WDTIS__512K
 (3*0x0001uË

	)

4583 
	#WDTIS__32K
 (4*0x0001uË

	)

4584 
	#WDTIS__8192
 (5*0x0001uË

	)

4585 
	#WDTIS__512
 (6*0x0001uË

	)

4586 
	#WDTIS__64
 (7*0x0001uË

	)

4588 
	#WDTSSEL_0
 (0*0x0020uË

	)

4589 
	#WDTSSEL_1
 (1*0x0020uË

	)

4590 
	#WDTSSEL_2
 (2*0x0020uË

	)

4591 
	#WDTSSEL_3
 (3*0x0020uË

	)

4592 
	#WDTSSEL__SMCLK
 (0*0x0020uË

	)

4593 
	#WDTSSEL__ACLK
 (1*0x0020uË

	)

4594 
	#WDTSSEL__VLO
 (2*0x0020uË

	)

4598 
	#WDT_MDLY_32
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
Ë

	)

4599 
	#WDT_MDLY_8
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTIS0
Ë

	)

4600 
	#WDT_MDLY_0_5
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTIS1
Ë

	)

4601 
	#WDT_MDLY_0_064
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTIS1
+
WDTIS0
Ë

	)

4603 
	#WDT_ADLY_1000
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTSSEL0
Ë

	)

4604 
	#WDT_ADLY_250
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTSSEL0
+
WDTIS0
Ë

	)

4605 
	#WDT_ADLY_16
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTSSEL0
+
WDTIS1
Ë

	)

4606 
	#WDT_ADLY_1_9
 (
WDTPW
+
WDTTMSEL
+
WDTCNTCL
+
WDTIS2
+
WDTSSEL0
+
WDTIS1
+
WDTIS0
Ë

	)

4609 
	#WDT_MRST_32
 (
WDTPW
+
WDTCNTCL
+
WDTIS2
Ë

	)

4610 
	#WDT_MRST_8
 (
WDTPW
+
WDTCNTCL
+
WDTIS2
+
WDTIS0
Ë

	)

4611 
	#WDT_MRST_0_5
 (
WDTPW
+
WDTCNTCL
+
WDTIS2
+
WDTIS1
Ë

	)

4612 
	#WDT_MRST_0_064
 (
WDTPW
+
WDTCNTCL
+
WDTIS2
+
WDTIS1
+
WDTIS0
Ë

	)

4614 
	#WDT_ARST_1000
 (
WDTPW
+
WDTCNTCL
+
WDTSSEL0
+
WDTIS2
Ë

	)

4615 
	#WDT_ARST_250
 (
WDTPW
+
WDTCNTCL
+
WDTSSEL0
+
WDTIS2
+
WDTIS0
Ë

	)

4616 
	#WDT_ARST_16
 (
WDTPW
+
WDTCNTCL
+
WDTSSEL0
+
WDTIS2
+
WDTIS1
Ë

	)

4617 
	#WDT_ARST_1_9
 (
WDTPW
+
WDTCNTCL
+
WDTSSEL0
+
WDTIS2
+
WDTIS1
+
WDTIS0
Ë

	)

4623 
	#__MSP430_HAS_TLV__


	)

4625 
	#TLV_START
 (0x1A08Ë

	)

4626 
	#TLV_END
 (0x1AFFË

	)

4628 
	#TLV_LDTAG
 (0x01Ë

	)

4629 
	#TLV_PDTAG
 (0x02Ë

	)

4630 
	#TLV_Re£rved3
 (0x03Ë

	)

4631 
	#TLV_Re£rved4
 (0x04Ë

	)

4632 
	#TLV_BLANK
 (0x05Ë

	)

4633 
	#TLV_Re£rved6
 (0x06Ë

	)

4634 
	#TLV_Re£rved7
 (0x07Ë

	)

4635 
	#TLV_DIERECORD
 (0x08Ë

	)

4636 
	#TLV_ADCCAL
 (0x11Ë

	)

4637 
	#TLV_ADC12CAL
 (0x11Ë

	)

4638 
	#TLV_ADC10CAL
 (0x13Ë

	)

4639 
	#TLV_REFCAL
 (0x12Ë

	)

4640 
	#TLV_TAGEXT
 (0xFEË

	)

4641 
	#TLV_TAGEND
 (0xFF)

4642 

	)

4647 #¥agm®
düg_suµªss
 1107

4648 
	#VECTOR_NAME
(
«me
Ë«me##
_±r


	)

4649 
	#EMIT_PRAGMA
(
x
Ë
	`_Pøgma
(#x)

	)

4650 
	#CREATE_VECTOR
(
«me
Ë* c⁄° 
	`VECTOR_NAME
“ameË(*)()&
	)
name

4651 
	#PLACE_VECTOR
(
ve˘‹
,
£˘i⁄
Ë
	`EMIT_PRAGMA
(
	`DATA_SECTION
(ve˘‹,£˘i⁄))

	)

4652 
	#PLACE_INTERRUPT
(
func
Ë
	`EMIT_PRAGMA
(
	`CODE_SECTION
(func,".ãxt:_i§"))

	)

4653 
	#ISR_VECTOR
(
func
,
off£t
Ë
	`CREATE_VECTOR
(func); \

	)

4654 
PLACE_VECTOR
(
VECTOR_NAME
(
func
), 
off£t
) \

4655 
PLACE_INTERRUPT
(
func
)

4658 #ifde‡
__ASM_HEADER__


4659 
	#AES_VECTOR
 ".öt45"

	)

4661 
	#AES_VECTOR
 (45 * 1uË

	)

4664 #ifde‡
__ASM_HEADER__


4665 
	#RTC_VECTOR
 ".öt46"

	)

4667 
	#RTC_VECTOR
 (46 * 1uË

	)

4670 #ifde‡
__ASM_HEADER__


4671 
	#LCD_B_VECTOR
 ".öt47"

	)

4673 
	#LCD_B_VECTOR
 (47 * 1uË

	)

4676 #ifde‡
__ASM_HEADER__


4677 
	#PORT2_VECTOR
 ".öt48"

	)

4679 
	#PORT2_VECTOR
 (48 * 1uË

	)

4682 #ifde‡
__ASM_HEADER__


4683 
	#PORT1_VECTOR
 ".öt49"

	)

4685 
	#PORT1_VECTOR
 (49 * 1uË

	)

4688 #ifde‡
__ASM_HEADER__


4689 
	#TIMER1_A1_VECTOR
 ".öt50"

	)

4691 
	#TIMER1_A1_VECTOR
 (50 * 1uË

	)

4694 #ifde‡
__ASM_HEADER__


4695 
	#TIMER1_A0_VECTOR
 ".öt51"

	)

4697 
	#TIMER1_A0_VECTOR
 (51 * 1uË

	)

4700 #ifde‡
__ASM_HEADER__


4701 
	#DMA_VECTOR
 ".öt52"

	)

4703 
	#DMA_VECTOR
 (52 * 1uË

	)

4706 #ifde‡
__ASM_HEADER__


4707 
	#CC1101_VECTOR
 ".öt53"

	)

4709 
	#CC1101_VECTOR
 (53 * 1uË

	)

4712 #ifde‡
__ASM_HEADER__


4713 
	#TIMER0_A1_VECTOR
 ".öt54"

	)

4715 
	#TIMER0_A1_VECTOR
 (54 * 1uË

	)

4718 #ifde‡
__ASM_HEADER__


4719 
	#TIMER0_A0_VECTOR
 ".öt55"

	)

4721 
	#TIMER0_A0_VECTOR
 (55 * 1uË

	)

4724 #ifde‡
__ASM_HEADER__


4725 
	#ADC10_VECTOR
 ".öt56"

	)

4727 
	#ADC10_VECTOR
 (56 * 1uË

	)

4730 #ifde‡
__ASM_HEADER__


4731 
	#USCI_B0_VECTOR
 ".öt57"

	)

4733 
	#USCI_B0_VECTOR
 (57 * 1uË

	)

4736 #ifde‡
__ASM_HEADER__


4737 
	#USCI_A0_VECTOR
 ".öt58"

	)

4739 
	#USCI_A0_VECTOR
 (58 * 1uË

	)

4742 #ifde‡
__ASM_HEADER__


4743 
	#WDT_VECTOR
 ".öt59"

	)

4745 
	#WDT_VECTOR
 (59 * 1uË

	)

4748 #ifde‡
__ASM_HEADER__


4749 
	#COMP_B_VECTOR
 ".öt60"

	)

4751 
	#COMP_B_VECTOR
 (60 * 1uË

	)

4754 #ifde‡
__ASM_HEADER__


4755 
	#UNMI_VECTOR
 ".öt61"

	)

4757 
	#UNMI_VECTOR
 (61 * 1uË

	)

4760 #ifde‡
__ASM_HEADER__


4761 
	#SYSNMI_VECTOR
 ".öt62"

	)

4763 
	#SYSNMI_VECTOR
 (62 * 1uË

	)

4766 #ifde‡
__ASM_HEADER__


4767 
	#RESET_VECTOR
 ".ª£t"

	)

4769 
	#RESET_VECTOR
 (63 * 1uË

	)

4777 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
109
2644
apps/lowpan.h
apps/main.c
apps/mrfi_uip_if.c
apps/mrfi_uip_if.h
core/contiki.h
core/dev/nullradio.c
core/dev/nullradio.h
core/dev/radio.h
core/lib/list.c
core/lib/list.h
core/lib/memb.c
core/lib/memb.h
core/lib/random.c
core/lib/random.h
core/net/address802154.c
core/net/address802154.h
core/net/mac/frame802154.c
core/net/mac/frame802154.h
core/net/mac/framer-802154.c
core/net/mac/framer-802154.h
core/net/mac/framer-nullmac.c
core/net/mac/framer-nullmac.h
core/net/mac/framer.h
core/net/mac/mac.c
core/net/mac/mac.h
core/net/mac/newmac.c
core/net/mac/newmac.h
core/net/mac/nullmac.c
core/net/mac/nullmac.h
core/net/mac/nullrdc.c
core/net/mac/nullrdc.h
core/net/mac/sicslowmac.c
core/net/mac/sicslowmac.h
core/net/neighbor-attr.c
core/net/neighbor-attr.h
core/net/neighbor-info.c
core/net/neighbor-info.h
core/net/netstack.c
core/net/netstack.h
core/net/packetbuf.c
core/net/packetbuf.h
core/net/queuebuf.c
core/net/queuebuf.h
core/net/rdc.h
core/net/rimeaddr.c
core/net/rimeaddr.h
core/net/sicslowpan.c
core/net/sicslowpan.h
core/net/tcpip.c
core/net/tcpip.h
core/net/uip-ds6.c
core/net/uip-ds6.h
core/net/uip-icmp6.c
core/net/uip-icmp6.h
core/net/uip-nd6.c
core/net/uip-nd6.h
core/net/uip.h
core/net/uip6.c
core/net/uipopt.h
core/sys/clock.h
core/sys/stimer.c
core/sys/stimer.h
core/sys/timer.c
core/sys/timer.h
platform/cc430/bsp/bsp.c
platform/cc430/bsp/bsp.h
platform/cc430/bsp/bsp_board.c
platform/cc430/bsp/bsp_board_defs.h
platform/cc430/bsp/bsp_button_defs.h
platform/cc430/bsp/bsp_buttons.c
platform/cc430/bsp/bsp_buttons.h
platform/cc430/bsp/bsp_config.h
platform/cc430/bsp/bsp_driver_defs.h
platform/cc430/bsp/bsp_drivers.c
platform/cc430/bsp/bsp_generic_buttons.h
platform/cc430/bsp/bsp_generic_leds.h
platform/cc430/bsp/bsp_led_defs.h
platform/cc430/bsp/bsp_leds.c
platform/cc430/bsp/bsp_leds.h
platform/cc430/bsp/bsp_macros.h
platform/cc430/bsp/bsp_msp430_defs.h
platform/cc430/bsp/bsp_uart.c
platform/cc430/bsp/bsp_uart.h
platform/cc430/bsp/bsp_uart_defs.h
platform/cc430/bsp/mrfi_board_defs.h
platform/cc430/contiki-conf.h
platform/cc430/radio/mrfi.c
platform/cc430/radio/mrfi.h
platform/cc430/radio/mrfi_defs.h
platform/cc430/radio/mrfi_radio.c
platform/cc430/radio/mrfi_radio_interface.c
platform/cc430/radio/mrfi_radio_interface.h
platform/cc430/radio/smartrf_CC430.h
platform/cc430f6147.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
